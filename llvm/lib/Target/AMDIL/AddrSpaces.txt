This document covers OpenCL Address Spaces(AS) and how they map onto the AMD IL 
language that is the output of the AMD GPU backend. This document also covers
the various hardware memory and how the address spaces map to them. 
There are four source level address spaces in OpenCL, which are global, local, 
constant and private. There is a fifth address space which is exposed via an 
AMD OpenCL extension, which is the Region Address Space. This AS exposes GDS 
support. The enum values for these address spaces are defined in AMDIL.hpp under 
the AMDILAS address space. This text document will cover the various address 
spaces, along with how they are mapped to the GPU and what modes are supported. 
Inside of the official 4 AS's and the AMD extension, there are sub-address 
spaces for various parts of the Device and Constant memory. 


1) Device memory
    Device memory is the default memory for the GPU. It is where all memory 
that is not hardware accelerated is stored. Device memory supports the 
following features and address spaces. The Execution Mode(EM) options are
either supported or unsupported. Supported is also split into hardware or
software modes.
    - Software EM Global AS
        Software EM Global AS implies that only a single hardware UAV is 
        supported and multiple hardware UAV's are not supported. This is the
        method that is supported on HD4XXX hardware.
    - Hardware EM Global AS
        Hardware EM Global AS implies that multiple hardware UAV's are 
        supported. This implies support for both the raw uav and the
        arena uav. A raw uav is a UAV that supports writes of 32 bits or larger
        and an arena uav is a UAV that supports writes of 8, 16 or 32 bits.
    - Software EM Private AS(Address Space)
        Software EM Private AS pointers exist in the global UAV. The offsets
        are handled by LLVM, but the base pointer offset is added in the 
        backend. This mode uses the AMDIL::T1 register for base pointer
        storage.
    - Software EM Local AS
        Software EM Private AS is handled the same as private with the exception
        that instead of the AMDIL::T1 register, the AMDIL::T2 register is 
        used instead.
    - Software EM Constant AS
        A software EM constant AS pointer is no different than a global pointer
        and resides in the same memory segment. There is no special handling
        required and is treated the same as global. If the array is specified
        in the compilation unit, then the constant data goes to the software
        emulated data segment.
    - Software EM Region AS
        Software EM Region AS is handled the same as local with the exception
        that instead of the AMDIL::T2 register, the AMDIL::T4 register is 
        used instead. 
    - Read-Only Images
        Read only images are mapped to the texture/sampler resources in IL.
        The image functions are modified in AMDILImageLowering pass and
        there can be a max of 128 images. The resource ID must be known at 
        compile time.
    - Write-Only Images
        Write only images are mapped to the first 8 UAV's. They are typed
        based on the sampler and 

2) Local Data Share memory(LDS)
    Local memory is memory that is per-SIMD and is closest to a software 
controlled L1 cache.  This memory type only supports a single feature, 
hardware Local AS.  The size that is declared is either the max amount that 
the chip can support if there exists a kernel argument that doesn't not have 
a compile-time known size, or the sum of all the local memory arrays declared 
in the kernel.  The sizes for kernel local memory arrays are calculated for each 
function and stored in a map. When a kernel is parsed for information the map is 
queried to determine if that kernel uses any of the known local arrays. This
information is used to calculate sizes and offsets for each kernel array
and is used to calculate addressing. This only works when LocalMem is set to
Hardware EM. This is not supported on HD4XXX chips.

3) Private Memory   
    Private memory is per-thread memory that is similiar to thread local 
storage on x86. This memory is limited to 64k per thread and is represented
as an indexed temp array in the IL.  This memory normally represents private 
address space arrays in the CL source code, but also any frame or stack memory 
that the kernel might need. Outside of private arrays declared in a kernel, 
structs that are passed by value are also stored in private memory. The
backend emits code to copy data from the metadata area to private memory,
so that it is in the correct location when the kernel attemps to load it.
This only works when PrivateMem is set to Hardware EM. This is supported on 
HD4XXX chips and later.

4) Constant Memory
    Constant memory is global read-only memory that exists in the KCACHE's on
the chip. They are limited to 64K of memory per buffer, but there can be
8 buffers that are available to the user. Constant memory can be defined
in a kernel, as a kernel argument, or global scoped in a compilation unit.
Therefor there are multiple functions that check and allocate constant memory.
The backend verifies that the allocation fits correctly for all kernels in the 
compilation unit. Any constant memory that does not fit in the hardware constant 
falls back into the Software EM constant buffer. The data section for the kernel 
also can use the constant buffer.  Just as with LDS memory, sizes and offsets 
are needed in instruction selection and are used to calculate addressing.
This is supported on HD4XXX chips and later.

5) Global Data Share memory(GDS)
    GDS memory is memory that is per-Device and is closest to a software
controlled L2 cache. This memory only supports a single feature, hardware 
Region AS. This feature is not yet 100% supported, but will be implemented 
similiar to how LDS memory is implemented. This will handle pointers to
kernel that are in the region AS and region arrays that are defined
in a kernel. This only works when RegionMem is set to Hardare EM. This is not
supported on HD4XXX chips.

