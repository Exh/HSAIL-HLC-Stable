version 1:0:$small;

readonly_u32 &__math32_RCBRT_TBL_INV_F[33] = {1073741824, 1073233424, 1072754929, 1072303777, 1071877689, 1071474633, 1071092790, 1070730529, 1070386381, 1070059020, 1069747249, 1069449978, 1069166220, 1068895073, 1068635715, 1068387393, 1068149419, 1067921157, 1067702026, 1067491489, 1067289049, 1067094248, 1066906662, 1066725897, 1066551589, 1066383396, 1066221003, 1066064115, 1065912457, 1065765770, 1065623816, 1065486369, 1065353216};

readonly_u32 &__math32_RCBRT_TBL_F[66] = {1065353216, 0, 1065181184, 944635448, 1065017344, 929906806, 1064857600, 954919582, 1064706048, 949685272, 1064558592, 956237286, 1064415232, 964033918, 1064280064, 958226488, 1064148992, 952595980, 1064022016, 945969432, 1063899136, 927775247, 1063776256, 961700810, 1063661568, 955838673, 1063546880, 964630943, 1063440384, 949906762, 1063333888, 952439325, 1063231488, 943589790, 1063129088, 959265744, 1063030784, 961767264, 1062936576, 958022414, 1062842368, 964332789, 1062752256, 963475659, 1062666240, 953765053, 1062580224, 954479116, 1062494208, 964177891, 1062412288, 964271831, 1062334464, 954388566, 1062256640, 951430532, 1062178816, 959543506, 1062105088, 954349105, 1062031360, 957727856, 1061961728, 937266821, 1061888000, 964645535};

readonly_u32 &__math32_RCBRT_TBL_REM_F[10] = {1070276608, 973034143, 1067532288, 958593421, 1065353216, 0, 1061888000, 964645535, 1059143680, 950204813};

readonly_u64 &__math64_RCBRT_TBL[514] = {4607182418800017408, 0, 4607170720919715840, 4492489729512512663, 4607159083974262784, 4471780069513806737, 4607147506621480960, 4492402745025756593, 4607135988861370368, 4494038839917228896, 4607124530157060096, 4490924866194755447, 4607113129703243776, 4492454556697117160, 4607101787231485952, 4490230950408798791, 4607090501936480256, 4494091512901184063, 4607079273818226688, 4482511264436885994, 4607068101802983424, 4486783191997672224, 4607056985622315008, 4490655754845163469, 4607045925007785984, 4478557723229755373, 4607034919154089984, 4479717853563239814, 4607023967524356096, 4493168058316103583, 4607013070118584320, 4490536972019127322, 4607002226131468288, 4490121262843127524, 4606991435026137088, 4494577667161228969, 4606980696802590720, 4487382339276048422, 4606970010387087360, 4493637318761488226, 4606959375779627008, 4494477596243217734, 4606948792711774208, 4460650565057494041, 4606938260109787136, 4487295520820180300, 4606927777973665792, 4488642224343605425, 4606917345766539264, 4491562914197599815, 4606906963219972096, 4490350837263742789, 4606896629797093376, 4489847118182666849, 4606886345229467648, 4470203936268742075, 4606876108711788544, 4491439965401263716, 4606865920244056064, 4493567347748644330, 4606855779557834752, 4486025115044897908, 4606845685847818240, 4487796387912474919, 4606835638845571072, 4492394125983545963, 4606825638551093248, 4467344650950544684, 4606815683890642944, 4492413251239153805, 4606805775132655616, 4491060153630870411, 4606795911740260352, 4483917169931643844, 4606786093176586240, 4483794371660294260, 4606776319173197824, 4485900942612343134, 4606766589461659648, 4478585263113417991, 4606756903505100800, 4487721171811827136, 4606747261035085824, 4492940119215279843, 4606737662051614720, 4482454696579108919, 4606728105749381120, 4482025808202742257, 4606718591859949568, 4490429341710095624, 4606709120383320064, 4478822340446697844, 4606699690514186240, 4491017061501755239, 4606690302252548096, 4493365128800462419, 4606680955329970176, 4491769746783123866, 4606671649209581568, 4493652123540907764, 4606662383891382272, 4486980349561181157, 4606653158570065920, 4493074958960999474, 4606643973514067968, 4485940243524320217, 4606634827918082048, 4490234127440627523, 4606625721782108160, 4489315373885915095, 4606616654569275392, 4494508859485964148, 4606607626548019200, 4470878981568456816, 4606598636644597760, 4489869509931164974, 4606589685127446528, 4486593497734349035, 4606580771459694592, 4488754292524313912, 4606571895372906496, 4492819798128287964, 4606563056867082240, 4488365457059980586, 4606554255405350912, 4484024866932493554, 4606545490719277056, 4483723830370465146, 4606536762540425216, 4487888979691230479, 4606528070600359936, 4492379911728453035, 4606519414899081216, 4487333766979453051, 4606510794899718144, 4483258357240948831, 4606502210333835264, 4486645237294914799, 4606493660932997120, 4492490377131713825, 4606485146697203712, 4491149706251274502, 4606476667089584128, 4493970267811600427, 4606468222110138368, 4492648253385895033, 4606459811490430976, 4485853713741125270, 4606451434693591040, 4489545648913703902, 4606443091719618560, 4490131696495525644, 4606434782300078080, 4489807838761547035, 4606426506166534144, 4490380734281870582, 4606418263050551296, 4492621340123449610, 4606410052952129536, 4487777631414347762, 4606401875334397952, 4489252596779587806, 4606393730197356544, 4483235278817332685, 4606385617004134400, 4492174736372415816, 4606377536023166976, 4485918436873350529, 4606369486449147904, 4494395329948263978, 4606361468818948096, 4474926720689303118, 4606353482058825728, 4491762024781993146, 4606345526705651712, 4478456485249400130, 4606337601954119680, 4489610552187921346, 4606329708072665088, 4476505514665603202, 4606321844524417024, 4478077175088472027, 4606314011040940032, 4492555750842390444, 4606306207890669568, 4487883177842264857, 4606298434536734720, 4481816559792429252, 4606290690710700032, 4487127104450522984, 4606282976412565504, 4484266206297081940, 4606275291373895680, 4474921815740677921, 4606267635326255104, 4481173064874161889, 4606260008001208320, 4492150284141290523, 4606252409667190784, 4481895727940994462, 4606244839518896128, 4491736707374572269, 4606237297824759808, 4491356251333654241, 4606229784316346368, 4487082701837611850, 4606222298725220352, 4477755003520142803, 4606214840782946304, 4483884263795790503, 4606207410489524224, 4472785587865383445, 4606200007308083200, 4493839237460140946, 4606192631775494144, 4483308925332011260, 4606185283086450688, 4483674732356276300, 4606177961240952832, 4486526496809555623, 4606170665970565120, 4493366921889792545, 4606163397543723008, 4485554228930583456, 4606156155155120128, 4493067310217816536, 4606148939073191936, 4494475872836477820, 4606141749297938432, 4479452596435671608, 4606134585024053248, 4490686208976865237, 4606127446519971840, 4492556527739988205, 4606120333785694208, 4481112772553522720, 4606113246284349440, 4471104514145392122, 4606106183747502080, 4493612401184899855, 4606099146712023040, 4481340453378681911, 4606092134372605952, 4482789551077986019, 4606085146729250816, 4488981225327260492, 4606078183781957632, 4487606871214320600, 4606071245262290944, 4487931131576209242, 4606064330901815296, 4493999248545560542, 4606057440968966144, 4489557196836070437, 4606050574926872576, 4489018480906167903, 4606043732775534592, 4486495362000257453, 4606036914246516736, 4490188907248873211, 4606030119339819008, 4490429440496812252, 4606023347787005952, 4493247749701174327, 4606016599588077568, 4493911732041844058, 4606009874743033856, 4485156589505721090, 4606003172715003904, 4486041516962594704, 4605996493503987712, 4490305945499017563, 4605989837109985280, 4489670646515753627, 4605983203264561152, 4491260113757949348, 4605976591967715328, 4489814827895424664, 4605970002951012352, 4490504800648212524, 4605963436214452224, 4486909776651154436, 4605956891489599488, 4487031062086393745, 4605950368776454144, 4478119613425553388, 4605943867806580736, 4479710846604271387, 4605937388311543808, 4493890284220325999, 4605930930828214272, 4476446676822539233, 4605924494551285760, 4475928533569703270, 4605918079480758272, 4489161322867805263, 4605911685616631808, 4492558802036585553, 4605905312958906368, 4490809175850284379, 4605898961239146496, 4488546159322182179, 4605892630188916736, 4493058380105803944, 4605886320076652544, 4487961236931949809, 4605880030365483008, 4491264870973184321, 4605873761323843584, 4481581092314844382, 4605867512414863360, 4489611248246275553, 4605861283906977792, 4483951678274495267, 4605855075263315968, 4493746308380822940, 4605848887020748800, 4482155879097492747, 4605842718373969920, 4490372055286649520, 4605836569591414784, 4491168168637347558, 4605830440673083392, 4462348553785740747, 4605824331082104832, 4486198214665365340, 4605818241086914560, 4473928388429629523, 4605812170150641664, 4493551599255607924, 4605806118810157056, 4488381190319104902, 4605800086528589824, 4484135075654981822, 4605794073037504512, 4493732702619609594, 4605788078873772032, 4479221372430152109, 4605782103232086016, 4488400616666686216, 4605776146380881920, 4489035482811589658, 4605770208051724288, 4493003414460235497, 4605764288513048576, 4482850673396676926, 4605758387227983872, 4480553162065743691, 4605752504196530176, 4486157729844496099, 4605746639418687488, 4486428787721037034, 4605740792626020352, 4492755356557707855, 4605734964086964224, 4488566523736239360, 4605729153264648192, 4492737312532929755, 4605723360427507712, 4490749159041415623, 4605717585307107328, 4488245580459977009, 4605711827635011584, 4493819889686553013, 4605706087679655936, 4492545466943721325, 4605700365172604928, 4491220557783591432, 4605694660113858560, 4481190390152295471, 4605688971966545920, 4494029806998862803, 4605683301267537920, 4492020551717227524, 4605677647748399104, 4480838387749965108, 4605672010872258560, 4493010509953976376, 4605666391175987200, 4489918964484021634, 4605660788122714112, 4492706041465411567, 4605655201980874752, 4488236499410974414, 4605649632213598208, 4494463024806286293, 4605644079357755392, 4484994394111073143, 4605638542608039936, 4492981264394267050, 4605633022501322752, 4488838956276715211, 4605627518500732928, 4492312146547707788, 4605622030874705920, 4489311733205226077, 4605616559354806272, 4485586485815520836, 4605611103672598528, 4492954149363507304, 4605605664096518144, 4493285549833474209, 4605600240626565120, 4475726758027652762, 4605594832725868544, 4480831565519976362, 4605589440394428416, 4492343033934008585, 4605584063900680192, 4491399618350527202, 4605578702976188416, 4490198552356289972, 4605573357620953088, 4475819301590817013, 4605568027298103296, 4494500570642830550, 4605562712812945408, 4469145134166212586, 4605557413091737600, 4493370765392847661, 4605552128939786240, 4485043904297255788, 4605546859551784960, 4493243790926004131, 4605541605464604672, 4488821222792194799, 4605536366141374464, 4491840156178807163, 4605531141850529792, 4487711473161594365, 4605525932323635200, 4482909209880933670, 4605520737292255232, 4493194275268389030, 4605515557293260800, 4479593654876821009, 4605510391521345536, 4491759984072105735, 4605505240513380352, 4486869641957816185, 4605500103732494336, 4492308941046598453, 4605494981447122944, 4491870261115021613, 4605489873388830720, 4493815303710440645, 4605484779826053120, 4481429830073015416, 4605479700221919232, 4479479375379772736, 4605474634576429056, 4490646975187775350, 4605469583158018048, 4485729156064650484, 4605464545429815296, 4494036742412341339, 4605459521928691712, 4487425068458918655, 4605454512117776384, 4485592503491831750, 4605449515997069312, 4488031069508027032, 4605444533566570496, 4490202111453863263, 4605439564826279936, 4488050354781382476, 4605434609507762176, 4492487017278075416, 4605429667879452672, 4488470121827998490, 4605424739672915968, 4477802014226601770, 4605419824619716608, 4490420930637120103, 4605414922988290048, 4490507614196263595, 4605410034510200832, 4493458845036478015, 4605405159453884416, 4486255286791783947, 4605400297282469888, 4490580375499914393, 4605395448264392704, 4489129756805531716, 4605390612131217408, 4492212548297711661, 4605385789151379456, 4483609952200923905, 4605380978788007936, 4490989548413858611, 4605376181309538304, 4492131728913197234, 4605371396715970560, 4487452145872581664, 4605366624738869248, 4485765204258832295, 4605361865378234368, 4484750930410576544, 4605357118634065920, 4472846666547276942, 4605352384237928448, 4489604865169060267, 4605347662458257408, 4486876742686573623, 4605342953026617344, 4487728330777211876, 4605338255943008256, 4488342002656442178, 4605333571207430144, 4484264970521055812, 4605328898551447552, 4490906473262976425, 4605324238243495936, 4486981303451435366};

readonly_f64 &__math64_RCBRT_TBL_REM[10] = {0D3ff965fea0000000, 0D3e54f5b8f20ac166, 0D3ff428a2f0000000, 0D3e631ae515c447bb, 0D3ff0000000000000, 0D0000000000000000, 0D3fe965fea0000000, 0D3e44f5b8f20ac166, 0D3fe428a2f0000000, 0D3e531ae515c447bb};

readonly_f32 &__math32_EXP_TBL[65] = {0F3f800000, 0F3f8164d2, 0F3f82cd87, 0F3f843a29, 0F3f85aac3, 0F3f871f62, 0F3f88980f, 0F3f8a14d5, 0F3f8b95c2, 0F3f8d1adf, 0F3f8ea43a, 0F3f9031dc, 0F3f91c3d3, 0F3f935a2b, 0F3f94f4f0, 0F3f96942d, 0F3f9837f0, 0F3f99e046, 0F3f9b8d3a, 0F3f9d3eda, 0F3f9ef532, 0F3fa0b051, 0F3fa27043, 0F3fa43516, 0F3fa5fed7, 0F3fa7cd94, 0F3fa9a15b, 0F3fab7a3a, 0F3fad583f, 0F3faf3b79, 0F3fb123f6, 0F3fb311c4, 0F3fb504f3, 0F3fb6fd92, 0F3fb8fbaf, 0F3fbaff5b, 0F3fbd08a4, 0F3fbf179a, 0F3fc12c4d, 0F3fc346cd, 0F3fc5672a, 0F3fc78d75, 0F3fc9b9be, 0F3fcbec15, 0F3fce248c, 0F3fd06334, 0F3fd2a81e, 0F3fd4f35b, 0F3fd744fd, 0F3fd99d16, 0F3fdbfbb8, 0F3fde60f5, 0F3fe0ccdf, 0F3fe33f89, 0F3fe5b907, 0F3fe8396a, 0F3feac0c7, 0F3fed4f30, 0F3fefe4ba, 0F3ff28177, 0F3ff5257d, 0F3ff7d0df, 0F3ffa83b3, 0F3ffd3e0c, 0F40000000};

readonly_f32 &__math32_EXP_TBL_EP[130] = {0F3f800000, 0F00000000, 0F3f816000, 0F391a3e77, 0F3f82c000, 0F39d8698a, 0F3f842000, 0F3a51461d, 0F3f85a000, 0F39ac367c, 0F3f870000, 0F3a7b0cb4, 0F3f888000, 0F3a407404, 0F3f8a0000, 0F3a26abaa, 0F3f8b8000, 0F3a2e0f1f, 0F3f8d0000, 0F3a56fadb, 0F3f8ea000, 0F39073168, 0F3f902000, 0F3a0ee218, 0F3f91c000, 0F38f4dcea, 0F3f934000, 0F3a515978, 0F3f94e000, 0F3a277d47, 0F3f968000, 0F3a2169b9, 0F3f982000, 0F3a3f828c, 0F3f99e000, 0F370b2641, 0F3f9b8000, 0F39d39b9d, 0F3f9d2000, 0F3a76cd39, 0F3f9ee000, 0F3a299304, 0F3fa0a000, 0F3a02887d, 0F3fa26000, 0F3a021818, 0F3fa42000, 0F3a28ad70, 0F3fa5e000, 0F3a76b54d, 0F3fa7c000, 0F39d93b4e, 0F3fa9a000, 0F382d5a75, 0F3fab6000, 0F3a51cdad, 0F3fad4000, 0F3a41f752, 0F3faf2000, 0F3a5bc56b, 0F3fb12000, 0F38fd6074, 0F3fb30000, 0F3a0e2095, 0F3fb50000, 0F391e667f, 0F3fb6e000, 0F3a6c8f19, 0F3fb8e000, 0F3a5d7a3b, 0F3fbae000, 0F3a7ad590, 0F3fbd0000, 0F398a39f5, 0F3fbf0000, 0F3a3ccdb3, 0F3fc12000, 0F39c4cca6, 0F3fc34000, 0F39599b44, 0F3fc56000, 0F3965422a, 0F3fc78000, 0F39d74c8a, 0F3fc9a000, 0F3a4dec33, 0F3fcbe000, 0F39c14fef, 0F3fce2000, 0F391182a3, 0F3fd06000, 0F38ccf6bb, 0F3fd2a000, 0F3981d91f, 0F3fd4e000, 0F3a1ad55e, 0F3fd74000, 0F391f995a, 0F3fd98000, 0F3a68ae13, 0F3fdbe000, 0F3a5dbcbe, 0F3fde6000, 0F37f4825e, 0F3fe0c000, 0F39cdeec2, 0F3fe32000, 0F3a7c4b95, 0F3fe5a000, 0F3a48373b, 0F3fe82000, 0F3a4b5281, 0F3feac000, 0F37c6e7dd, 0F3fed4000, 0F39f301ed, 0F3fefe000, 0F3917337b, 0F3ff28000, 0F383b9e2c, 0F3ff52000, 0F392fa2a4, 0F3ff7c000, 0F3a06fb98, 0F3ffa8000, 0F38ecb6dc, 0F3ffd2000, 0F3a706067, 0F40000000, 0F00000000};

readonly_f32 &__math32_LOG2_TBL[258] = {0F00000000, 0F00000000, 0F3c37c000, 0F374a16dd, 0F3cb70000, 0F37f2d0b8, 0F3d08c000, 0F381a3aa2, 0F3d35c000, 0F37b4dd63, 0F3d624000, 0F383f5721, 0F3d874000, 0F384e27e8, 0F3d9d4000, 0F380bf749, 0F3db30000, 0F387dbeb2, 0F3dc8c000, 0F37216e46, 0F3dde4000, 0F3684815b, 0F3df38000, 0F383b045f, 0F3e044000, 0F390b119b, 0F3e0ec000, 0F391a32ea, 0F3e194000, 0F38ba789e, 0F3e238000, 0F39553f30, 0F3e2e0000, 0F3651cfde, 0F3e380000, 0F39685a9d, 0F3e424000, 0F39057a05, 0F3e4c4000, 0F395ba0ef, 0F3e564000, 0F396bc5b6, 0F3e604000, 0F3936d9bb, 0F3e6a4000, 0F38772619, 0F3e740000, 0F39017ce9, 0F3e7dc000, 0F3902d720, 0F3e83c000, 0F38856dd8, 0F3e888000, 0F3941f6b4, 0F3e8d4000, 0F3980b652, 0F3e920000, 0F3980f561, 0F3e96c000, 0F39443f13, 0F3e9b8000, 0F38926752, 0F3ea00000, 0F39c8c763, 0F3ea4c000, 0F391e12f3, 0F3ea94000, 0F39b7bf89, 0F3eae0000, 0F36d1cfde, 0F3eb28000, 0F38c7f233, 0F3eb70000, 0F39087367, 0F3ebb8000, 0F38e95d3f, 0F3ec00000, 0F38256316, 0F3ec44000, 0F39d38e5c, 0F3ec8c000, 0F396ea247, 0F3ecd4000, 0F350e4788, 0F3ed18000, 0F395d829f, 0F3ed5c000, 0F39c30f2f, 0F3eda0000, 0F39fd7ee7, 0F3ede8000, 0F3872e9e7, 0F3ee2c000, 0F3897d694, 0F3ee70000, 0F3824923a, 0F3eeb0000, 0F39ea7c06, 0F3eef4000, 0F39a7fa88, 0F3ef38000, 0F391aa879, 0F3ef78000, 0F39dace65, 0F3efbc000, 0F39215a32, 0F3effc000, 0F39af3350, 0F3f01c000, 0F3a7b5172, 0F3f040000, 0F389cf27f, 0F3f060000, 0F3902806b, 0F3f080000, 0F3909d8a9, 0F3f0a0000, 0F38c9faa1, 0F3f0c0000, 0F37a33dca, 0F3f0dc000, 0F3a6623d2, 0F3f0fc000, 0F3a3c7a61, 0F3f11c000, 0F3a083a84, 0F3f13c000, 0F39930161, 0F3f15c000, 0F35d1cfde, 0F3f178000, 0F3a2d0ebd, 0F3f198000, 0F399f1aad, 0F3f1b4000, 0F3a67ff6d, 0F3f1d4000, 0F39ecfea8, 0F3f1f0000, 0F3a7b26f3, 0F3f210000, 0F39ec1fa6, 0F3f22c000, 0F3a675314, 0F3f24c000, 0F399e12f3, 0F3f268000, 0F3a2d4b66, 0F3f288000, 0F370c3845, 0F3f2a4000, 0F399ba329, 0F3f2c0000, 0F3a1044d3, 0F3f2dc000, 0F3a49a196, 0F3f2f8000, 0F3a79fe83, 0F3f318000, 0F3905c7aa, 0F3f334000, 0F39802391, 0F3f350000, 0F39abe796, 0F3f36c000, 0F39c65a9d, 0F3f388000, 0F39cfa6c5, 0F3f3a4000, 0F39c7f593, 0F3f3c0000, 0F39af6ff7, 0F3f3dc000, 0F39863e4d, 0F3f3f8000, 0F391910c1, 0F3f414000, 0F369d5be7, 0F3f42c000, 0F3a541616, 0F3f448000, 0F3a1ee960, 0F3f464000, 0F39c38ed2, 0F3f480000, 0F38e61600, 0F3f498000, 0F3a4fedb4, 0F3f4b4000, 0F39f6b4ab, 0F3f4d0000, 0F38f8d3b0, 0F3f4e8000, 0F3a3b3faa, 0F3f504000, 0F399fb693, 0F3f51c000, 0F3a5cfe71, 0F3f538000, 0F39c5740b, 0F3f550000, 0F3a611eb0, 0F3f56c000, 0F39b079c4, 0F3f584000, 0F3a4824d7, 0F3f5a0000, 0F39439a54, 0F3f5b8000, 0F3a1291ea, 0F3f5d0000, 0F3a6d3673, 0F3f5ec000, 0F3981c731, 0F3f604000, 0F3a0da88f, 0F3f61c000, 0F3a53945c, 0F3f638000, 0F3895ae91, 0F3f650000, 0F3996372a, 0F3f668000, 0F39f9a832, 0F3f680000, 0F3a27eda4, 0F3f698000, 0F3a4c764f, 0F3f6b0000, 0F3a6a7c06, 0F3f6cc000, 0F370321eb, 0F3f6e4000, 0F3899ab3f, 0F3f6fc000, 0F38f02086, 0F3f714000, 0F390a1707, 0F3f72c000, 0F39031e44, 0F3f744000, 0F38c6b362, 0F3f75c000, 0F382bf195, 0F3f770000, 0F3a768e36, 0F3f788000, 0F3a5c503b, 0F3f7a0000, 0F3a3c1179, 0F3f7b8000, 0F3a15de1d, 0F3f7d0000, 0F39d3845d, 0F3f7e8000, 0F395f263f, 0F3f800000, 0F00000000};

readonly_f32 &__math32_LOG10_TBL[258] = {0F00000000, 0F00000000, 0F3b5d4000, 0F367a8e44, 0F3bdc8000, 0F368ed49f, 0F3c24c000, 0F36c21451, 0F3c5ac000, 0F375211d6, 0F3c884000, 0F3720ea11, 0F3ca2c000, 0F37e9eb59, 0F3cbd4000, 0F37b87be7, 0F3cd78000, 0F37bf2560, 0F3cf1c000, 0F33d597a0, 0F3d05c000, 0F37806a05, 0F3d128000, 0F3820581f, 0F3d1f4000, 0F38223334, 0F3d2c0000, 0F378e3bac, 0F3d388000, 0F3810684f, 0F3d450000, 0F37feb7ae, 0F3d518000, 0F36a9d609, 0F3d5dc000, 0F37a68163, 0F3d6a0000, 0F376a8b27, 0F3d760000, 0F384c8fd6, 0F3d810000, 0F3885183e, 0F3d870000, 0F3874a760, 0F3d8d0000, 0F380d1154, 0F3d92c000, 0F38ea42bd, 0F3d98c000, 0F384c1571, 0F3d9e8000, 0F38ba66b8, 0F3da44000, 0F38e7da3b, 0F3daa0000, 0F38eee632, 0F3dafc000, 0F38d00911, 0F3db58000, 0F388bbede, 0F3dbb4000, 0F378a0512, 0F3dc0c000, 0F3894c7a0, 0F3dc64000, 0F38e30710, 0F3dcc0000, 0F36db2829, 0F3dd18000, 0F3729d609, 0F3dd6c000, 0F38fa0e82, 0F3ddc4000, 0F38bc9a75, 0F3de1c000, 0F383a9297, 0F3de70000, 0F38dc83c8, 0F3dec8000, 0F37eac335, 0F3df1c000, 0F38706ac3, 0F3df70000, 0F389574c2, 0F3dfc4000, 0F3892d068, 0F3e00c000, 0F38615032, 0F3e034000, 0F3917acf4, 0F3e05c000, 0F3967a126, 0F3e088000, 0F38217840, 0F3e0b0000, 0F38b420ab, 0F3e0d8000, 0F38f9c7b2, 0F3e100000, 0F391103bd, 0F3e128000, 0F39169a6b, 0F3e150000, 0F390dd194, 0F3e178000, 0F38eda471, 0F3e1a0000, 0F38a38950, 0F3e1c8000, 0F37f6844a, 0F3e1ec000, 0F395e1cdb, 0F3e214000, 0F390fcffc, 0F3e23c000, 0F38503e9d, 0F3e260000, 0F394b00fd, 0F3e288000, 0F38a9910a, 0F3e2ac000, 0F39518a31, 0F3e2d4000, 0F3882d2c2, 0F3e2f8000, 0F392488e4, 0F3e31c000, 0F397b0aff, 0F3e344000, 0F388a22d8, 0F3e368000, 0F3902bd5e, 0F3e38c000, 0F39342f85, 0F3e3b0000, 0F39598811, 0F3e3d4000, 0F3972e6b1, 0F3e3fc000, 0F34d53654, 0F3e420000, 0F360ca25e, 0F3e440000, 0F39785cc0, 0F3e464000, 0F39630710, 0F3e488000, 0F39424ed7, 0F3e4ac000, 0F39165101, 0F3e4d0000, 0F38be5421, 0F3e4f4000, 0F37e7b0c0, 0F3e514000, 0F394fd0c3, 0F3e538000, 0F38efaaaa, 0F3e55c000, 0F37a8f566, 0F3e57c000, 0F3927c744, 0F3e5a0000, 0F383fa4d5, 0F3e5c0000, 0F392d9e39, 0F3e5e4000, 0F3803feae, 0F3e604000, 0F390a268c, 0F3e624000, 0F39692b80, 0F3e648000, 0F38789b4f, 0F3e668000, 0F3909307d, 0F3e688000, 0F394a601c, 0F3e6ac000, 0F35e67edc, 0F3e6cc000, 0F383e386d, 0F3e6ec000, 0F38a7743d, 0F3e70c000, 0F38dccec3, 0F3e72c000, 0F38ff57e0, 0F3e74c000, 0F39079d8b, 0F3e76c000, 0F390651a6, 0F3e78c000, 0F38f7bad9, 0F3e7ac000, 0F38d0ab82, 0F3e7cc000, 0F38979e7d, 0F3e7ec000, 0F381978ee, 0F3e804000, 0F397816c8, 0F3e814000, 0F39410cb2, 0F3e824000, 0F39015384, 0F3e834000, 0F3863fa28, 0F3e840000, 0F39f41065, 0F3e850000, 0F39c7668a, 0F3e860000, 0F39968afa, 0F3e870000, 0F39430db9, 0F3e880000, 0F38a18cf3, 0F3e88c000, 0F39eb2907, 0F3e89c000, 0F39a9e10c, 0F3e8ac000, 0F39492800, 0F3e8bc000, 0F385a53d1, 0F3e8c8000, 0F39ce0cf7, 0F3e8d8000, 0F3979c7b2, 0F3e8e8000, 0F389f5d99, 0F3e8f4000, 0F39ceefcb, 0F3e904000, 0F39646a39, 0F3e914000, 0F380d7a9b, 0F3e920000, 0F39ad6650, 0F3e930000, 0F390ac3b8, 0F3e93c000, 0F39d9a9a8, 0F3e94c000, 0F39548a99, 0F3e958000, 0F39f73c4b, 0F3e968000, 0F3980960e, 0F3e978000, 0F374b3d5a, 0F3e984000, 0F39888f1e, 0F3e994000, 0F37679a07, 0F3e9a0000, 0F39826a13};

readonly_f32 &__math32_LOGE_TBL[258] = {0F00000000, 0F00000000, 0F3bff0000, 0F3429ac41, 0F3c7e0000, 0F35a8b0fc, 0F3cbdc000, 0F368d83ea, 0F3cfc1000, 0F361b0e78, 0F3d1cf000, 0F3687b9fe, 0F3d3ba000, 0F3631ec65, 0F3d5a1000, 0F36dd7119, 0F3d785000, 0F35c30045, 0F3d8b2000, 0F379b7751, 0F3d9a0000, 0F37ebcb0d, 0F3da8d000, 0F37839f83, 0F3db78000, 0F37528ae5, 0F3dc61000, 0F37a2eb18, 0F3dd49000, 0F36da7495, 0F3de2f000, 0F36a91eb7, 0F3df13000, 0F3783b715, 0F3dff6000, 0F371131db, 0F3e06b000, 0F383f3e68, 0F3e0db000, 0F38156a97, 0F3e14a000, 0F38297c0f, 0F3e1b8000, 0F387e100f, 0F3e226000, 0F3815b665, 0F3e293000, 0F37e5e3a1, 0F3e2ff000, 0F38183853, 0F3e36b000, 0F35fe719d, 0F3e3d5000, 0F38448108, 0F3e43f000, 0F38503290, 0F3e4a9000, 0F373539e8, 0F3e511000, 0F385e0ff1, 0F3e579000, 0F3864a740, 0F3e5e1000, 0F3786742d, 0F3e647000, 0F387be3cd, 0F3e6ae000, 0F3685ad3e, 0F3e713000, 0F3803b715, 0F3e778000, 0F37adcbdc, 0F3e7dc000, 0F380c36af, 0F3e820000, 0F371652d3, 0F3e851000, 0F38927139, 0F3e882000, 0F38c5fcd7, 0F3e8b3000, 0F38ae55d5, 0F3e8e4000, 0F3818c169, 0F3e914000, 0F38a0fde7, 0F3e944000, 0F38ad09ef, 0F3e974000, 0F3862bae1, 0F3e9a3000, 0F38eecd4c, 0F3e9d3000, 0F3798aad2, 0F3ea02000, 0F37421a1a, 0F3ea30000, 0F38c5e10e, 0F3ea5f000, 0F37bf2aee, 0F3ea8d000, 0F382d872d, 0F3eabb000, 0F37ee2e8a, 0F3eae8000, 0F38dedfac, 0F3eb16000, 0F3802f2b9, 0F3eb43000, 0F38481e9b, 0F3eb70000, 0F380eaa2b, 0F3eb9c000, 0F38ebfb5d, 0F3ebc9000, 0F38255fdd, 0F3ebf5000, 0F38783b82, 0F3ec21000, 0F3851da1e, 0F3ec4d000, 0F374e1b05, 0F3ec78000, 0F388f439b, 0F3eca3000, 0F38ca0e10, 0F3ecce000, 0F38cac08b, 0F3ecf9000, 0F3891f65f, 0F3ed24000, 0F378121cb, 0F3ed4e000, 0F386c9a9a, 0F3ed78000, 0F38949923, 0F3eda2000, 0F38777bcc, 0F3edcc000, 0F37b12d26, 0F3edf5000, 0F38a6ced3, 0F3ee1e000, 0F38ebd3e6, 0F3ee47000, 0F38fbe3cd, 0F3ee70000, 0F38d785c2, 0F3ee99000, 0F387e7e00, 0F3eec1000, 0F38f392c5, 0F3eeea000, 0F37d40983, 0F3ef12000, 0F38081a7c, 0F3ef3a000, 0F3784c3ad, 0F3ef61000, 0F38cce923, 0F3ef89000, 0F380f5faf, 0F3efb0000, 0F3891fd38, 0F3efd7000, 0F38ac47bc, 0F3effe000, 0F3897042b, 0F3f012000, 0F392952d2, 0F3f025000, 0F396fced4, 0F3f039000, 0F37f97073, 0F3f04c000, 0F385e9eae, 0F3f05f000, 0F3865c84a, 0F3f072000, 0F38130ba3, 0F3f084000, 0F3979cf16, 0F3f097000, 0F3938cac9, 0F3f0aa000, 0F38c3d2f4, 0F3f0bc000, 0F39755dec, 0F3f0cf000, 0F38e6b467, 0F3f0e1000, 0F395c0fb8, 0F3f0f4000, 0F383ebce0, 0F3f106000, 0F38dcd192, 0F3f118000, 0F39186bdf, 0F3f12a000, 0F392de74c, 0F3f13c000, 0F392f0944, 0F3f14e000, 0F391bff61, 0F3f160000, 0F38e9ed44, 0F3f172000, 0F38686dc8, 0F3f183000, 0F396b99a7, 0F3f195000, 0F39099c89, 0F3f1a7000, 0F37a27673, 0F3f1b8000, 0F390bdaa3, 0F3f1c9000, 0F397069ab, 0F3f1db000, 0F388449ff, 0F3f1ec000, 0F39013538, 0F3f1fd000, 0F392dc268, 0F3f20e000, 0F3947f423, 0F3f21f000, 0F394ff17c, 0F3f230000, 0F3945e10e, 0F3f241000, 0F3929e8f5, 0F3f252000, 0F38f85db0, 0F3f263000, 0F38735f99, 0F3f273000, 0F396c08db, 0F3f284000, 0F3909e600, 0F3f295000, 0F37b4996f, 0F3f2a5000, 0F391233cc, 0F3f2b5000, 0F397cead9, 0F3f2c6000, 0F38adb5cd, 0F3f2d6000, 0F3920261a, 0F3f2e6000, 0F3958ee36, 0F3f2f7000, 0F35aa4905, 0F3f307000, 0F37cbd11e, 0F3f317000, 0F3805fdf4};

readonly_f32 &__math32_LOG_INV_TBL[129] = {0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000};

readonly_f32 &__math32_LOG_INV_TBL_EP[258] = {0F40000000, 0F00000000, 0F3ffe0000, 0F38fe03f8, 0F3ffc0000, 0F39fc0fc1, 0F3ffa0000, 0F3a8cb3c9, 0F3ff80000, 0F3af83e10, 0F3ff60000, 0F3b407b30, 0F3ff40000, 0F3b898d60, 0F3ff20000, 0F3bb9d648, 0F3ff00000, 0F3bf0f0f1, 0F3fef0000, 0F3abadc7f, 0F3fed0000, 0F3b66076c, 0F3feb0000, 0F3bbdb2a6, 0F3fea0000, 0F39ea0ea1, 0F3fe80000, 0F3b4b58f7, 0F3fe60000, 0F3bc2b448, 0F3fe50000, 0F3a9660ac, 0F3fe30000, 0F3b8e38e4, 0F3fe10000, 0F3bfc780e, 0F3fe00000, 0F3b607038, 0F3fde0000, 0F3be95c4d, 0F3fdd0000, 0F3b4f914c, 0F3fdb0000, 0F3beb61ef, 0F3fda0000, 0F3b681b4f, 0F3fd90000, 0F385901b2, 0F3fd70000, 0F3b9435e5, 0F3fd60000, 0F3aae0359, 0F3fd40000, 0F3bc77b03, 0F3fd30000, 0F3b501a6d, 0F3fd20000, 0F39d20d21, 0F3fd00000, 0F3bb69fcc, 0F3fcf0000, 0F3b48e951, 0F3fce0000, 0F3a3453b9, 0F3fcc0000, 0F3bcccccd, 0F3fcb0000, 0F3b8727c0, 0F3fca0000, 0F3b0b0fcd, 0F3fc90000, 0F397b49d1, 0F3fc70000, 0F3bce0c7d, 0F3fc60000, 0F3b980c6a, 0F3fc50000, 0F3b4b90f7, 0F3fc40000, 0F3adcbe15, 0F3fc30000, 0F39c30c31, 0F3fc10000, 0F3be4bbd6, 0F3fc00000, 0F3bc0c0c1, 0F3fbf0000, 0F3ba02fe8, 0F3fbe0000, 0F3b82fa0c, 0F3fbd0000, 0F3b52208e, 0F3fbc0000, 0F3b24c818, 0F3fbb0000, 0F3afb9c87, 0F3fba0000, 0F3aba2e8c, 0F3fb90000, 0F3a850fe9, 0F3fb80000, 0F3a381703, 0F3fb70000, 0F39fbb5a2, 0F3fb60000, 0F39b60b61, 0F3fb50000, 0F399e68aa, 0F3fb40000, 0F39b40b41, 0F3fb30000, 0F39f63529, 0F3fb20000, 0F3a321643, 0F3fb10000, 0F3a7e9dc0, 0F3fb00000, 0F3ab02c0b, 0F3faf0000, 0F3aeb771a, 0F3fae0000, 0F3b1882b9, 0F3fad0000, 0F3b4056b0, 0F3fac0000, 0F3b6d2308, 0F3fab0000, 0F3b8f69e3, 0F3faa0000, 0F3baaaaab, 0F3fa90000, 0F3bc84a48, 0F3fa80000, 0F3be83f57, 0F3fa80000, 0F39a80a81, 0F3fa70000, 0F3abc14e6, 0F3fa60000, 0F3b2b8872, 0F3fa50000, 0F3b7d6a05, 0F3fa40000, 0F3ba9cf1e, 0F3fa30000, 0F3bd70a3d, 0F3fa30000, 0F394bc7f6, 0F3fa20000, 0F3adf0cac, 0F3fa10000, 0F3b56625d, 0F3fa00000, 0F3ba0a0a1, 0F3f9f0000, 0F3bd809fe, 0F3f9f0000, 0F3a0b2f39, 0F3f9e0000, 0F3b195a48, 0F3f9d0000, 0F3b89d89e, 0F3f9c0000, 0F3bc8e161, 0F3f9c0000, 0F399c09c1, 0F3f9b0000, 0F3b18df3e, 0F3f9a0000, 0F3b90e7d9, 0F3f990000, 0F3bd722db, 0F3f990000, 0F3a78d28b, 0F3f980000, 0F3b519013, 0F3f970000, 0F3bb425ed, 0F3f970000, 0F3817012e, 0F3f960000, 0F3b1fb4d8, 0F3f950000, 0F3ba02568, 0F3f940000, 0F3bf2094f, 0F3f940000, 0F3b0b0129, 0F3f930000, 0F3b9a85c4, 0F3f920000, 0F3bf11384, 0F3f920000, 0F3b124925, 0F3f910000, 0F3ba2b3c5, 0F3f900000, 0F3bfdbc09, 0F3f900000, 0F3b3470c6, 0F3f8f0000, 0F3bb823ee, 0F3f8f0000, 0F3a3bced0, 0F3f8e0000, 0F3b706ada, 0F3f8d0000, 0F3bda5202, 0F3f8d0000, 0F3af72c23, 0F3f8c0000, 0F3ba29c04, 0F3f8c0000, 0F398c08c1, 0F3f8b0000, 0F3b606894, 0F3f8a0000, 0F3bd8f2fc, 0F3f8a0000, 0F3b05f0e1, 0F3f890000, 0F3bae408a, 0F3f890000, 0F3a5639d7, 0F3f880000, 0F3b888889, 0F3f870000, 0F3bf78088, 0F3f870000, 0F3b4f56be, 0F3f860000, 0F3bd90544, 0F3f860000, 0F3b1714fc, 0F3f850000, 0F3bbf3761, 0F3f850000, 0F3ad0214d, 0F3f840000, 0F3ba9f9c8, 0F3f840000, 0F3a842108, 0F3f830000, 0F3b993052, 0F3f830000, 0F3a1374bc, 0F3f820000, 0F3b8cbfbf, 0F3f820000, 0F39820821, 0F3f810000, 0F3b848da9, 0F3f810000, 0F38810204, 0F3f800000, 0F3b808081, 0F3f800000, 0F00000000};

readonly_f32 &__math32_SINHCOSH_TBL[74] = {0F00000000, 0F3f800000, 0F3f966cfe, 0F3fc583ab, 0F40681e7b, 0F4070c7d0, 0F41204937, 0F41211525, 0F41da51c0, 0F41da7743, 0F4294680b, 0F42946b7e, 0F4349b691, 0F4349b734, 0F4409143b, 0F4409144a, 0F44ba4f53, 0F44ba4f55, 0F457d38ac, 0F457d38ac, 0F462c14ee, 0F462c14ef, 0F46e9e224, 0F46e9e224, 0F479ef0b3, 0F479ef0b3, 0F485805ad, 0F485805ad, 0F4912cd62, 0F4912cd62, 0F49c78665, 0F49c78665, 0F4a87975f, 0F4a87975f, 0F4b3849a4, 0F4b3849a4, 0F4bfa7910, 0F4bfa7910, 0F4caa36c8, 0F4caa36c8, 0F4d675844, 0F4d675844, 0F4e1d3710, 0F4e1d3710, 0F4ed5ad6e, 0F4ed5ad6e, 0F4f91357a, 0F4f91357a, 0F50455bfe, 0F50455bfe, 0F51061e9d, 0F51061e9d, 0F51b64993, 0F51b64993, 0F5277c118, 0F5277c118, 0F53285dd2, 0F53285dd2, 0F53e4d572, 0F53e4d572, 0F549b8238, 0F549b8238, 0F55535bb3, 0F55535bb3, 0F560fa1fe, 0F560fa1fe, 0F56c3379a, 0F56c3379a, 0F5784a9f1, 0F5784a9f1, 0F58344f11, 0F58344f11, 0F58f510ad, 0F58f510ad};

readonly_f32 &__math32_ATAN2_TABLE_JBY256[241] = {0F3d7faade, 0F3d87ccf5, 0F3d8fc36e, 0F3d97b8ca, 0F3d9facf8, 0F3da79feb, 0F3daf9192, 0F3db781df, 0F3dbf70c1, 0F3dc75e2a, 0F3dcf4a0b, 0F3dd73454, 0F3ddf1cf6, 0F3de703e3, 0F3deee90c, 0F3df6cc61, 0F3dfeadd5, 0F3e0346ac, 0F3e07356e, 0F3e0b232a, 0F3e0f0fd8, 0F3e12fb71, 0F3e16e5ee, 0F3e1acf47, 0F3e1eb777, 0F3e229e76, 0F3e26843d, 0F3e2a68c6, 0F3e2e4c09, 0F3e322e00, 0F3e360ea4, 0F3e39edef, 0F3e3dcbda, 0F3e41a85f, 0F3e458377, 0F3e495d1c, 0F3e4d3547, 0F3e510bf3, 0F3e54e119, 0F3e58b4b3, 0F3e5c86bb, 0F3e60572a, 0F3e6425fc, 0F3e67f32a, 0F3e6bbeaf, 0F3e6f8884, 0F3e7350a4, 0F3e77170a, 0F3e7adbb0, 0F3e7e9e90, 0F3e812fd3, 0F3e830f75, 0F3e84ee2d, 0F3e86cbf7, 0F3e88a8d2, 0F3e8a84ba, 0F3e8c5fad, 0F3e8e39a9, 0F3e9012ab, 0F3e91eab1, 0F3e93c1b9, 0F3e9597c0, 0F3e976cc4, 0F3e9940c2, 0F3e9b13ba, 0F3e9ce5a7, 0F3e9eb689, 0F3ea0865d, 0F3ea25522, 0F3ea422d4, 0F3ea5ef73, 0F3ea7bafc, 0F3ea9856d, 0F3eab4ec4, 0F3ead1701, 0F3eaede20, 0F3eb0a420, 0F3eb26900, 0F3eb42cbd, 0F3eb5ef56, 0F3eb7b0ca, 0F3eb97117, 0F3ebb303b, 0F3ebcee34, 0F3ebeab02, 0F3ec066a3, 0F3ec22116, 0F3ec3da58, 0F3ec5926a, 0F3ec74949, 0F3ec8fef4, 0F3ecab36a, 0F3ecc66aa, 0F3ece18b3, 0F3ecfc983, 0F3ed1791a, 0F3ed32776, 0F3ed4d497, 0F3ed6807b, 0F3ed82b21, 0F3ed9d489, 0F3edb7cb1, 0F3edd239a, 0F3edec941, 0F3ee06da6, 0F3ee210c9, 0F3ee3b2a8, 0F3ee55344, 0F3ee6f29a, 0F3ee890ab, 0F3eea2d76, 0F3eebc8fb, 0F3eed6338, 0F3eeefc2e, 0F3ef093db, 0F3ef22a40, 0F3ef3bf5c, 0F3ef5532e, 0F3ef6e5b7, 0F3ef876f5, 0F3efa06e8, 0F3efb9591, 0F3efd22ef, 0F3efeaf01, 0F3f001ce4, 0F3f00e1a1, 0F3f01a5b8, 0F3f02692a, 0F3f032bf5, 0F3f03ee1a, 0F3f04af98, 0F3f057071, 0F3f0630a3, 0F3f06f02f, 0F3f07af14, 0F3f086d54, 0F3f092aed, 0F3f09e7e0, 0F3f0aa42d, 0F3f0b5fd3, 0F3f0c1ad4, 0F3f0cd52f, 0F3f0d8ee4, 0F3f0e47f4, 0F3f0f005d, 0F3f0fb822, 0F3f106f41, 0F3f1125ba, 0F3f11db8f, 0F3f1290bf, 0F3f13454a, 0F3f13f931, 0F3f14ac73, 0F3f155f11, 0F3f16110b, 0F3f16c261, 0F3f177314, 0F3f182324, 0F3f18d290, 0F3f19815a, 0F3f1a2f81, 0F3f1add06, 0F3f1b89e8, 0F3f1c3629, 0F3f1ce1c9, 0F3f1d8cc7, 0F3f1e3725, 0F3f1ee0e1, 0F3f1f89fe, 0F3f20327a, 0F3f20da57, 0F3f218194, 0F3f222833, 0F3f22ce33, 0F3f237394, 0F3f241857, 0F3f24bc7d, 0F3f256006, 0F3f2602f1, 0F3f26a540, 0F3f2746f3, 0F3f27e80a, 0F3f288885, 0F3f292866, 0F3f29c7ac, 0F3f2a6658, 0F3f2b0469, 0F3f2ba1e2, 0F3f2c3ec1, 0F3f2cdb08, 0F3f2d76b6, 0F3f2e11cd, 0F3f2eac4c, 0F3f2f4635, 0F3f2fdf87, 0F3f307842, 0F3f311069, 0F3f31a7fa, 0F3f323ef6, 0F3f32d55e, 0F3f336b32, 0F3f340072, 0F3f349520, 0F3f35293b, 0F3f35bcc5, 0F3f364fbc, 0F3f36e223, 0F3f3773f9, 0F3f38053e, 0F3f3895f4, 0F3f39261b, 0F3f39b5b3, 0F3f3a44bc, 0F3f3ad338, 0F3f3b6127, 0F3f3bee89, 0F3f3c7b5e, 0F3f3d07a7, 0F3f3d9365, 0F3f3e1e99, 0F3f3ea941, 0F3f3f3360, 0F3f3fbcf5, 0F3f404602, 0F3f40ce86, 0F3f415682, 0F3f41ddf6, 0F3f4264e4, 0F3f42eb4b, 0F3f43712c, 0F3f43f687, 0F3f447b5e, 0F3f44ffb0, 0F3f45837e, 0F3f4606c9, 0F3f468990, 0F3f470bd5, 0F3f478d98, 0F3f480eda, 0F3f488f9b, 0F3f490fdb};

readonly_f32 &__math32_CBRT_TBL[258] = {0F3f800000, 0F00000000, 0F3f804000, 0F3a28e585, 0F3f80a000, 0F399c910f, 0F3f80e000, 0F3a703484, 0F3f814000, 0F3a0eb4bc, 0F3f81a000, 0F392750df, 0F3f81e000, 0F3a419dc7, 0F3f824000, 0F39ac3801, 0F3f828000, 0F3a675948, 0F3f82e000, 0F39eabf9a, 0F3f834000, 0F356629d6, 0F3f838000, 0F3a07f04c, 0F3f83e000, 0F3848dac3, 0F3f842000, 0F3a0e1b17, 0F3f848000, 0F384a1cc7, 0F3f84c000, 0F3a082ade, 0F3f852000, 0F363f31e5, 0F3f856000, 0F39eccf0d, 0F3f85a000, 0F3a692c6f, 0F3f860000, 0F39b22cb1, 0F3f864000, 0F3a462d87, 0F3f86a000, 0F3941e864, 0F3f86e000, 0F3a180409, 0F3f872000, 0F3a7cd32d, 0F3f878000, 0F39bdde6c, 0F3f87c000, 0F3a3e5fb4, 0F3f882000, 0F38d960b3, 0F3f886000, 0F39eab752, 0F3f88a000, 0F3a4cf599, 0F3f890000, 0F390803d1, 0F3f894000, 0F39e90955, 0F3f898000, 0F3a44878c, 0F3f89e000, 0F38908271, 0F3f8a2000, 0F39ba4b0f, 0F3f8a6000, 0F3a25cdb3, 0F3f8aa000, 0F3a6c0f33, 0F3f8b0000, 0F393fc12e, 0F3f8b4000, 0F39e2ee51, 0F3f8b8000, 0F3a30a9dd, 0F3f8bc000, 0F3a6d8e61, 0F3f8c2000, 0F3920aa58, 0F3f8c6000, 0F39c1088a, 0F3f8ca000, 0F3a16a120, 0F3f8ce000, 0F3a4a86c1, 0F3f8d2000, 0F3a7c3aae, 0F3f8d8000, 0F392f0952, 0F3f8dc000, 0F39b2461c, 0F3f8e0000, 0F3a04621f, 0F3f8e4000, 0F3a2d84b8, 0F3f8e8000, 0F3a548ff4, 0F3f8ec000, 0F3a7988db, 0F3f8f2000, 0F38e3a30c, 0F3f8f6000, 0F39755daa, 0F3f8fa000, 0F39b86d8a, 0F3f8fe000, 0F39f22e5e, 0F3f902000, 0F3a13fd53, 0F3f906000, 0F3a2cedcc, 0F3f90a000, 0F3a43ed23, 0F3f90e000, 0F3a58ffd0, 0F3f912000, 0F3a6c2a3c, 0F3f916000, 0F3a7d70bf, 0F3f91c000, 0F384d7a06, 0F3f920000, 0F38d318cf, 0F3f924000, 0F39185d53, 0F3f928000, 0F393fe1b1, 0F3f92c000, 0F396029b1, 0F3f930000, 0F3979454c, 0F3f934000, 0F3985a221, 0F3f938000, 0F398b1b0d, 0F3f93c000, 0F398d1515, 0F3f940000, 0F398b97c7, 0F3f944000, 0F3986aa98, 0F3f948000, 0F397ca9c7, 0F3f94c000, 0F39653bd8, 0F3f950000, 0F394719b5, 0F3f954000, 0F39225182, 0F3f958000, 0F38ede264, 0F3f95c000, 0F388a0d15, 0F3f960000, 0F3749f226, 0F3f962000, 0F3a737219, 0F3f966000, 0F3a6223e3, 0F3f96a000, 0F3a4f406c, 0F3f96e000, 0F3a3acaee, 0F3f972000, 0F3a24c698, 0F3f976000, 0F3a0d368f, 0F3f97a000, 0F39e83bdd, 0F3f97e000, 0F39b2ff8f, 0F3f982000, 0F39757c89, 0F3f986000, 0F38fdf7dc, 0F3f98a000, 0F3622482d, 0F3f98c000, 0F3a600bf3, 0F3f990000, 0F3a3dfedf, 0F3f994000, 0F3a1a7de3, 0F3f998000, 0F39eb17a4, 0F3f99c000, 0F399e56e3, 0F3f9a0000, 0F391d7e03, 0F3f9a2000, 0F3a7e2ab7, 0F3f9a6000, 0F3a538fc2, 0F3f9aa000, 0F3a279148, 0F3f9ae000, 0F39f463ce, 0F3f9b2000, 0F3996e86c, 0F3f9b6000, 0F38dad617, 0F3f9b8000, 0F3a69e815, 0F3f9bc000, 0F3a371eac, 0F3f9c0000, 0F3a030100, 0F3f9c4000, 0F399b2304, 0F3f9c8000, 0F38b694db, 0F3f9ca000, 0F3a5ec6af, 0F3f9ce000, 0F3a257018, 0F3f9d2000, 0F39d5a259, 0F3f9d6000, 0F393bb0e7, 0F3f9d8000, 0F3a71c388, 0F3f9dc000, 0F3a335958, 0F3f9e0000, 0F39e75fcb, 0F3f9e4000, 0F394b2590, 0F3f9e6000, 0F3a70a802, 0F3f9ea000, 0F3a2d4de7, 0F3f9ee000, 0F39d17a6c, 0F3f9f2000, 0F390be02b, 0F3f9f4000, 0F3a5c007c, 0F3f9f8000, 0F3a13d899, 0F3f9fc000, 0F399504dc, 0F3fa00000, 0F00000000, 0F3fa02000, 0F3a34534e, 0F3fa06000, 0F39cefca8, 0F3fa0a000, 0F38cc1828, 0F3fa0c000, 0F3a4a6352, 0F3fa10000, 0F39f4424a, 0F3fa14000, 0F3922f98d};

readonly_u8 &__math64_PIBITS[158] = {-32, -15, 27, -63, 12, 88, 33, 116, 53, 126, -60, 126, -19, -81, -87, 75, 74, 41, -34, -25, 28, -12, -20, -59, -105, -81, 31, -21, -98, -44, -75, -88, 127, 121, -102, -3, 24, 61, -35, 38, 44, -97, 60, -5, -39, -76, 125, -76, 41, 104, 45, 70, -68, -68, 63, 96, 22, 120, -1, 95, -30, 127, -20, -96, -28, -9, 46, 126, 17, 114, -46, -25, 76, 13, -26, 88, 71, -26, 4, -7, 125, -47, -102, -64, 113, -90, 19, 18, -19, -70, -44, -41, 8, -94, -5, -100, -90, -60, 114, -84, 119, -8, 115, 72, 70, 39, -88, -69, 36, 25, -128, 75, 55, 9, -23, -72, -111, -36, -122, 21, -17, 122, -81, -114, 69, -7, 7, 65, 14, -15, 100, 86, -118, 109, 3, 119, -45, -44, 71, 95, -99, -16, -89, 84, 16, 57, -71, 13, -26, -117, 2, 0, 0, 0, 0, 0, 0, 0};

readonly_f64 &__math64_TWO_TO_JBY64_EP[128] = {0D3ff0000000000000, 0D0000000000000000, 0D3ff02c9a30000000, 0D3e6cef00c1dcdef9, 0D3ff059b0d0000000, 0D3e48ac2ba1d73e2a, 0D3ff0874510000000, 0D3e60eb37901186be, 0D3ff0b55860000000, 0D3e69f3121ec53172, 0D3ff0e3ec30000000, 0D3e469e8d10103a17, 0D3ff11301d0000000, 0D3df25b50a4ebbf1a, 0D3ff1429aa0000000, 0D3e6d525bbf668203, 0D3ff172b830000000, 0D3e68faa2f5b9bef9, 0D3ff1a35be0000000, 0D3e66df96ea796d31, 0D3ff1d48730000000, 0D3e368b9aa7805b80, 0D3ff2063b80000000, 0D3e60c519ac771dd6, 0D3ff2387a60000000, 0D3e6ceac470cd83f5, 0D3ff26b4560000000, 0D3e5789f37495e99c, 0D3ff29e9df0000000, 0D3e547f7b84b09745, 0D3ff2d285a0000000, 0D3e5b900c2d002475, 0D3ff306fe00000000, 0D3e64636e2a5bd1ab, 0D3ff33c08b0000000, 0D3e4320b7fa64e430, 0D3ff371a730000000, 0D3e5ceaa72a9c5154, 0D3ff3a7db30000000, 0D3e53967fdba86f24, 0D3ff3dea640000000, 0D3e682468446b6824, 0D3ff4160a20000000, 0D3e3f72e29f84325b, 0D3ff44e0860000000, 0D3e18624b40c4dbd0, 0D3ff486a2b0000000, 0D3e5704f3404f068e, 0D3ff4bfdad0000000, 0D3e54d8a89c750e5e, 0D3ff4f9b270000000, 0D3e5a74b29ab4cf62, 0D3ff5342b50000000, 0D3e5a753e077c2a0f, 0D3ff56f4730000000, 0D3e5ad49f699bb2c0, 0D3ff5ab07d0000000, 0D3e6a90a852b19260, 0D3ff5e76f10000000, 0D3e56b48521ba6f93, 0D3ff6247eb0000000, 0D3e0d2ac258f87d03, 0D3ff6623880000000, 0D3e42a91124893ecf, 0D3ff6a09e60000000, 0D3e59fcef32422cbe, 0D3ff6dfb230000000, 0D3e68ca345de441c5, 0D3ff71f75e0000000, 0D3e61d8bee7ba46e1, 0D3ff75feb50000000, 0D3e59099f22fdba6a, 0D3ff7a11470000000, 0D3e4f580c36bea881, 0D3ff7e2f330000000, 0D3e5b3d398841740a, 0D3ff8258990000000, 0D3e62999c25159f11, 0D3ff868d990000000, 0D3e668925d901c83b, 0D3ff8ace540000000, 0D3e415506dadd3e2a, 0D3ff8f1ae90000000, 0D3e622aee6c57304e, 0D3ff93737b0000000, 0D3e29b8bc9e8a0387, 0D3ff97d8290000000, 0D3e6fbc9c9f173d24, 0D3ff9c49180000000, 0D3e451f8480e3e235, 0D3ffa0c6670000000, 0D3e66bbcac96535b5, 0D3ffa5503b0000000, 0D3e41f12ae45a1224, 0D3ffa9e6b50000000, 0D3e55e7f6fd0fac90, 0D3ffae89f90000000, 0D3e62b5a75abd0e69, 0D3ffb33a2b0000000, 0D3e609e2bf5ed7fa1, 0D3ffb7f76f0000000, 0D3e47daf237553d84, 0D3ffbcc1e90000000, 0D3e12f074891ee83d, 0D3ffc199bd0000000, 0D3e6b0aa538444196, 0D3ffc67f120000000, 0D3e6cafa29694426f, 0D3ffcb720d0000000, 0D3e69df20d22a0797, 0D3ffd072d40000000, 0D3e640f12f71a1e45, 0D3ffd5818d0000000, 0D3e69f7490e4bb40b, 0D3ffda9e600000000, 0D3e4ed9942b84600d, 0D3ffdfc9730000000, 0D3e4bdcdaf5cb4656, 0D3ffe502ee0000000, 0D3e5e2cffd89cf44c, 0D3ffea4afa0000000, 0D3e452486cc2c7b9d, 0D3ffefa1be0000000, 0D3e6cc2b44eee3fa4, 0D3fff507650000000, 0D3e66dc8a80ce9f09, 0D3fffa7c180000000, 0D3e39e90d82e90a7e};

readonly_f64 &__math64_CBRT_TBL_INV[257] = {0D4000000000000000, 0D3fffe01fe01fe020, 0D3fffc07f01fc07f0, 0D3fffa11caa01fa12, 0D3fff81f81f81f820, 0D3fff6310aca0dbb5, 0D3fff44659e4a4271, 0D3fff25f644230ab5, 0D3fff07c1f07c1f08, 0D3ffee9c7f8458e02, 0D3ffecc07b301ecc0, 0D3ffeae807aba01eb, 0D3ffe9131abf0b767, 0D3ffe741aa59750e4, 0D3ffe573ac901e574, 0D3ffe3a9179dc1a73, 0D3ffe1e1e1e1e1e1e, 0D3ffe01e01e01e01e, 0D3ffde5d6e3f8868a, 0D3ffdca01dca01dca, 0D3ffdae6076b981db, 0D3ffd92f2231e7f8a, 0D3ffd77b654b82c34, 0D3ffd5cac807572b2, 0D3ffd41d41d41d41d, 0D3ffd272ca3fc5b1a, 0D3ffd0cb58f6ec074, 0D3ffcf26e5c44bfc6, 0D3ffcd85689039b0b, 0D3ffcbe6d9601cbe7, 0D3ffca4b3055ee191, 0D3ffc8b265afb8a42, 0D3ffc71c71c71c71c, 0D3ffc5894d10d4986, 0D3ffc3f8f01c3f8f0, 0D3ffc26b5392ea01c, 0D3ffc0e070381c0e0, 0D3ffbf583ee868d8b, 0D3ffbdd2b899406f7, 0D3ffbc4fd65883e7b, 0D3ffbacf914c1bad0, 0D3ffb951e2b18ff23, 0D3ffb7d6c3dda338b, 0D3ffb65e2e3beee05, 0D3ffb4e81b4e81b4f, 0D3ffb37484ad806ce, 0D3ffb2036406c80d9, 0D3ffb094b31d922a4, 0D3ffaf286bca1af28, 0D3ffadbe87f94905e, 0D3ffac5701ac5701b, 0D3ffaaf1d2f87ebfd, 0D3ffa98ef606a63be, 0D3ffa82e65130e159, 0D3ffa6d01a6d01a6d, 0D3ffa574107688a4a, 0D3ffa41a41a41a41a, 0D3ffa2c2a87c51ca0, 0D3ffa16d3f97a4b02, 0D3ffa01a01a01a01a, 0D3ff9ec8e951033d9, 0D3ff9d79f176b682d, 0D3ff9c2d14ee4a102, 0D3ff9ae24ea5510da, 0D3ff999999999999a, 0D3ff9852f0d8ec0ff, 0D3ff970e4f80cb872, 0D3ff95cbb0be377ae, 0D3ff948b0fcd6e9e0, 0D3ff934c67f9b2ce6, 0D3ff920fb49d0e229, 0D3ff90d4f120190d5, 0D3ff8f9c18f9c18fa, 0D3ff8e6527af1373f, 0D3ff8d3018d3018d3, 0D3ff8bfce8062ff3a, 0D3ff8acb90f6bf3aa, 0D3ff899c0f601899c, 0D3ff886e5f0abb04a, 0D3ff87427bcc092b9, 0D3ff8618618618618, 0D3ff84f00c2780614, 0D3ff83c977ab2bedd, 0D3ff82a4a0182a4a0, 0D3ff8181818181818, 0D3ff8060180601806, 0D3ff7f405fd017f40, 0D3ff7e225515a4f1d, 0D3ff7d05f417d05f4, 0D3ff7beb3922e017c, 0D3ff7ad2208e0ecc3, 0D3ff79baa6bb6398b, 0D3ff78a4c8178a4c8, 0D3ff77908119ac60d, 0D3ff767dce434a9b1, 0D3ff756cac201756d, 0D3ff745d1745d1746, 0D3ff734f0c541fe8d, 0D3ff724287f46debc, 0D3ff713786d9c7c09, 0D3ff702e05c0b8170, 0D3ff6f26016f26017, 0D3ff6e1f76b4337c7, 0D3ff6d1a62681c861, 0D3ff6c16c16c16c17, 0D3ff6b1490aa31a3d, 0D3ff6a13cd1537290, 0D3ff691473a88d0c0, 0D3ff6816816816817, 0D3ff6719f3601671a, 0D3ff661ec6a5122f9, 0D3ff6524f853b4aa3, 0D3ff642c8590b2164, 0D3ff63356b88ac0de, 0D3ff623fa77016240, 0D3ff614b36831ae94, 0D3ff6058160581606, 0D3ff5f66434292dfc, 0D3ff5e75bb8d015e7, 0D3ff5d867c3ece2a5, 0D3ff5c9882b931057, 0D3ff5babcc647fa91, 0D3ff5ac056b015ac0, 0D3ff59d61f123ccaa, 0D3ff58ed2308158ed, 0D3ff5805601580560, 0D3ff571ed3c506b3a, 0D3ff56397ba7c52e2, 0D3ff5555555555555, 0D3ff54725e6bb82fe, 0D3ff5390948f40feb, 0D3ff52aff56a8054b, 0D3ff51d07eae2f815, 0D3ff50f22e111c4c5, 0D3ff5015015015015, 0D3ff4f38f62dd4c9b, 0D3ff4e5e0a72f0539, 0D3ff4d843bedc2c4c, 0D3ff4cab88725af6e, 0D3ff4bd3edda68fe1, 0D3ff4afd6a052bf5b, 0D3ff4a27fad76014a, 0D3ff49539e3b2d067, 0D3ff4880522014880, 0D3ff47ae147ae147b, 0D3ff46dce34596066, 0D3ff460cbc7f5cf9a, 0D3ff453d9e2c776ca, 0D3ff446f86562d9fb, 0D3ff43a2730abee4d, 0D3ff42d6625d51f87, 0D3ff420b5265e5951, 0D3ff4141414141414, 0D3ff40782d10e6566, 0D3ff3fb013fb013fb, 0D3ff3ee8f42a5af07, 0D3ff3e22cbce4a902, 0D3ff3d5d991aa75c6, 0D3ff3c995a47babe7, 0D3ff3bd60d9232955, 0D3ff3b13b13b13b14, 0D3ff3a524387ac822, 0D3ff3991c2c187f63, 0D3ff38d22d366088e, 0D3ff3813813813814, 0D3ff3755bd1c945ee, 0D3ff3698df3de0748, 0D3ff35dce5f9f2af8, 0D3ff3521cfb2b78c1, 0D3ff34679ace01346, 0D3ff33ae45b57bcb2, 0D3ff32f5ced6a1dfa, 0D3ff323e34a2b10bf, 0D3ff3187758e9ebb6, 0D3ff30d190130d190, 0D3ff301c82ac40260, 0D3ff2f684bda12f68, 0D3ff2eb4ea1fed14b, 0D3ff2e025c04b8097, 0D3ff2d50a012d50a0, 0D3ff2c9fb4d812ca0, 0D3ff2bef98e5a3711, 0D3ff2b404ad012b40, 0D3ff2a91c92f3c105, 0D3ff29e4129e4129e, 0D3ff293725bb804a5, 0D3ff288b01288b013, 0D3ff27dfa38a1ce4d, 0D3ff27350b8812735, 0D3ff268b37cd60127, 0D3ff25e22708092f1, 0D3ff2539d7e9177b2, 0D3ff2492492492492, 0D3ff23eb79717605b, 0D3ff23456789abcdf, 0D3ff22a0122a0122a, 0D3ff21fb78121fb78, 0D3ff21579804855e6, 0D3ff20b470c67c0d9, 0D3ff2012012012012, 0D3ff1f7047dc11f70, 0D3ff1ecf43c7fb84c, 0D3ff1e2ef3b3fb874, 0D3ff1d8f5672e4abd, 0D3ff1cf06ada2811d, 0D3ff1c522fc1ce059, 0D3ff1bb4a4046ed29, 0D3ff1b17c67f2bae3, 0D3ff1a7b9611a7b96, 0D3ff19e0119e0119e, 0D3ff19453808ca29c, 0D3ff18ab083902bdb, 0D3ff1811811811812, 0D3ff1778a191bd684, 0D3ff16e0689427379, 0D3ff1648d50fc3201, 0D3ff15b1e5f75270d, 0D3ff151b9a3fdd5c9, 0D3ff1485f0e0acd3b, 0D3ff13f0e8d344724, 0D3ff135c81135c811, 0D3ff12c8b89edc0ac, 0D3ff12358e75d3033, 0D3ff11a3019a74826, 0D3ff1111111111111, 0D3ff107fbbe011080, 0D3ff0fef010fef011, 0D3ff0f5edfab325a2, 0D3ff0ecf56be69c90, 0D3ff0e40655826011, 0D3ff0db20a88f4696, 0D3ff0d24456359e3a, 0D3ff0c9714fbcda3b, 0D3ff0c0a7868b4171, 0D3ff0b7e6ec259dc8, 0D3ff0af2f722eecb5, 0D3ff0a6810a6810a7, 0D3ff09ddba6af8360, 0D3ff0953f39010954, 0D3ff08cabb37565e2, 0D3ff0842108421084, 0D3ff07b9f29b8eae2, 0D3ff073260a47f7c6, 0D3ff06ab59c7912fb, 0D3ff0624dd2f1a9fc, 0D3ff059eea0727586, 0D3ff05197f7d73404, 0D3ff04949cc1664c5, 0D3ff0410410410410, 0D3ff038c6b78247fc, 0D3ff03091b51f5e1a, 0D3ff02864fc7729e9, 0D3ff0204081020408, 0D3ff0182436517a37, 0D3ff0101010101010, 0D3ff0080402010080, 0D3ff0000000000000};

readonly_f64 &__math64_CBRT_TBL[514] = {0D3ff0000000000000, 0D0000000000000000, 0D3ff0055380000000, 0D3e6e6a24c81e4294, 0D3ff00aa390000000, 0D3e58548511e3a785, 0D3ff00ff010000000, 0D3e64eb9336ec07f6, 0D3ff0153920000000, 0D3e40ea64b8b750e1, 0D3ff01a7eb0000000, 0D3e461637cff8a53c, 0D3ff01fc0d0000000, 0D3e40733bf7bd1943, 0D3ff024ff80000000, 0D3e5666911345cced, 0D3ff02a3ad0000000, 0D3e477b7a3f592f14, 0D3ff02f72b0000000, 0D3e6f18d3dd1a5402, 0D3ff034a750000000, 0D3e2be2f5a58ee9a4, 0D3ff039d880000000, 0D3e68901f8f085fa7, 0D3ff03f0670000000, 0D3e5c68b8cd5b5d69, 0D3ff0443110000000, 0D3e5a6b0e8624be42, 0D3ff0495870000000, 0D3dbc4b22b06f68e7, 0D3ff04e7c80000000, 0D3e60f3f0afcabe9b, 0D3ff0539d60000000, 0D3e548495bca4e1b7, 0D3ff058bb00000000, 0D3e66107f1abdfdc3, 0D3ff05dd570000000, 0D3e6e67261878288a, 0D3ff062ecc0000000, 0D3e5a6bc155286f1e, 0D3ff06800e0000000, 0D3e58a759c64a85f2, 0D3ff06d11e0000000, 0D3e45fce70a4a8d09, 0D3ff0721fc0000000, 0D3e32f9cbf373fe1d, 0D3ff0772a80000000, 0D3e590564ce4ac359, 0D3ff07c3230000000, 0D3e5ac29ce761b02f, 0D3ff08136d0000000, 0D3e5cb752f497381c, 0D3ff0863860000000, 0D3e68bb9e1cfb35e0, 0D3ff08b36f0000000, 0D3e65b4917099de90, 0D3ff0903280000000, 0D3e5cc77ac9c65ef2, 0D3ff0952b10000000, 0D3e57a0f3e7be3dba, 0D3ff09a20a0000000, 0D3e66ec851ee0c16f, 0D3ff09f1340000000, 0D3e689449bf2946da, 0D3ff0a402f0000000, 0D3e698f25301ba223, 0D3ff0a8efc0000000, 0D3e347d5ec651f549, 0D3ff0add990000000, 0D3e6c33ec9a86007a, 0D3ff0b2c090000000, 0D3e5e0b6653e92649, 0D3ff0b7a4b0000000, 0D3e3bd64ac09d755f, 0D3ff0bc85f0000000, 0D3e2f537506f78167, 0D3ff0c16450000000, 0D3e62c382d1b3735e, 0D3ff0c63fe0000000, 0D3e6e20ed659f99e1, 0D3ff0cb18b0000000, 0D3e586b633a9c182a, 0D3ff0cfeeb0000000, 0D3e445cfd5a65e777, 0D3ff0d4c1e0000000, 0D3e60c8770f58bca4, 0D3ff0d99250000000, 0D3e6739e44b0933c5, 0D3ff0de6010000000, 0D3e027dc3d9ce7bd8, 0D3ff0e32b00000000, 0D3e63c53c7c5a7b64, 0D3ff0e7f340000000, 0D3e69669683830cec, 0D3ff0ecb8d0000000, 0D3e68d772c39bdcc4, 0D3ff0f17bb0000000, 0D3e69b0008bcf6d7b, 0D3ff0f63bf0000000, 0D3e3bbb305825ce4f, 0D3ff0faf970000000, 0D3e6da3f4af13a406, 0D3ff0ffb460000000, 0D3e5f36b96f74ce86, 0D3ff1046cb0000000, 0D3e165c002303f790, 0D3ff1092250000000, 0D3e682f84095ba7d5, 0D3ff10dd560000000, 0D3e6d46433541b2c6, 0D3ff11285e0000000, 0D3e671c3d56e93a89, 0D3ff11733d0000000, 0D3e598dcef4e40012, 0D3ff11bdf30000000, 0D3e4530ebef17fe03, 0D3ff1208800000000, 0D3e4e8b8fa3715066, 0D3ff1252e40000000, 0D3e6ab26eb3b211dc, 0D3ff129d210000000, 0D3e454dd4dc906307, 0D3ff12e7350000000, 0D3e5c9f962387984e, 0D3ff1331210000000, 0D3e6c62a959afec09, 0D3ff137ae60000000, 0D3e6638d9ac6a866a, 0D3ff13c4840000000, 0D3e338704eca8a22d, 0D3ff140dfa0000000, 0D3e4e6c9e1db14f8f, 0D3ff1457490000000, 0D3e58744b7f9c9eaa, 0D3ff14a0710000000, 0D3e66c2893486373b, 0D3ff14e9730000000, 0D3e5b36bce31699b7, 0D3ff15324e0000000, 0D3e671e3813d200c7, 0D3ff157b030000000, 0D3e699755ab40aa88, 0D3ff15c3920000000, 0D3e6b45ca0e4bcfc0, 0D3ff160bfc0000000, 0D3e32dd090d869c5d, 0D3ff16543f0000000, 0D3e64fe0516b917da, 0D3ff169c5d0000000, 0D3e694563226317a2, 0D3ff16e4560000000, 0D3e653d8fafc2c851, 0D3ff172c2a0000000, 0D3e5dcbd41fbd41a3, 0D3ff1773d90000000, 0D3e5862ff5285f59c, 0D3ff17bb630000000, 0D3e63072ea97a1e1c, 0D3ff1802c90000000, 0D3e52839075184805, 0D3ff184a0a0000000, 0D3e64b0323e9eff42, 0D3ff1891270000000, 0D3e6b158893c45484, 0D3ff18d8210000000, 0D3e3149ef0fc35826, 0D3ff191ef60000000, 0D3e5f2e77ea96acaa, 0D3ff1965a80000000, 0D3e5200074c471a95, 0D3ff19ac360000000, 0D3e63f8cc517f6f04, 0D3ff19f2a10000000, 0D3e660ba2e311bb55, 0D3ff1a38e90000000, 0D3e64b788730bbec3, 0D3ff1a7f0e0000000, 0D3e657090795ee20c, 0D3ff1ac5100000000, 0D3e6d9ffe983670b1, 0D3ff1b0af00000000, 0D3e62a463ff61bfda, 0D3ff1b50ad0000000, 0D3e69d1bc6a5e65cf, 0D3ff1b96480000000, 0D3e68718abaa9e922, 0D3ff1bdbc10000000, 0D3e63c2f52ffa342e, 0D3ff1c21180000000, 0D3e60fae13ff42c80, 0D3ff1c664d0000000, 0D3e65440f0ef00d57, 0D3ff1cab610000000, 0D3e46fcd22d4e3c1e, 0D3ff1cf0530000000, 0D3e4e0c60b409e863, 0D3ff1d35230000000, 0D3e6f9cab5a5f0333, 0D3ff1d79d30000000, 0D3e630f24744c333d, 0D3ff1dbe620000000, 0D3e4b50622a76b2fe, 0D3ff1e02cf0000000, 0D3e6fdb94ba595375, 0D3ff1e471d0000000, 0D3e3861b9b945a171, 0D3ff1e8b490000000, 0D3e654348015188c4, 0D3ff1ecf550000000, 0D3e6b54d149865523, 0D3ff1f13410000000, 0D3e6a0bb783d9de33, 0D3ff1f570d0000000, 0D3e6629d12b1a2157, 0D3ff1f9ab90000000, 0D3e6467fe35d179df, 0D3ff1fde450000000, 0D3e69763f3e26c8f7, 0D3ff2021b20000000, 0D3e53f798bb9f7679, 0D3ff2064ff0000000, 0D3e552e577e855898, 0D3ff20a82c0000000, 0D3e6fde47e5502c3a, 0D3ff20eb3b0000000, 0D3e5cbd0b548d96a0, 0D3ff212e2a0000000, 0D3e6a9cd9f7be8de8, 0D3ff2170fb0000000, 0D3e522bbe704886de, 0D3ff21b3ac0000000, 0D3e6e3dea8317f020, 0D3ff21f63f0000000, 0D3e6e812085ac8855, 0D3ff2238b40000000, 0D3e5c87144f24cb07, 0D3ff227b0a0000000, 0D3e61e128ee311fa2, 0D3ff22bd420000000, 0D3e5b5c163d61a2d3, 0D3ff22ff5c0000000, 0D3e47d97e7fb90633, 0D3ff2341570000000, 0D3e6efe899d50f6a7, 0D3ff2383350000000, 0D3e6d0333eb75de5a, 0D3ff23c4f60000000, 0D3e40e590be73a573, 0D3ff2406980000000, 0D3e68ce8dcac3cdd2, 0D3ff24481d0000000, 0D3e6ee8a48954064b, 0D3ff2489850000000, 0D3e6aa62f18461e09, 0D3ff24cad00000000, 0D3e601e5940986a15, 0D3ff250bfe0000000, 0D3e3b082f4f9b8d4c, 0D3ff254d0e0000000, 0D3e6876e0e5527f5a, 0D3ff258e020000000, 0D3e63617080831e6b, 0D3ff25ced90000000, 0D3e681b26e34aa4a2, 0D3ff260f940000000, 0D3e552ee66dfab0c1, 0D3ff2650320000000, 0D3e5d85a5329e8819, 0D3ff2690b40000000, 0D3e5105c1b646b5d1, 0D3ff26d1190000000, 0D3e6bb6690c1a379c, 0D3ff2711630000000, 0D3e586aeba73ce3a9, 0D3ff2751900000000, 0D3e6dd16198294dd4, 0D3ff2791a20000000, 0D3e6454e675775e83, 0D3ff27d1980000000, 0D3e63842e026197ea, 0D3ff2811720000000, 0D3e6f1ce0e70c44d2, 0D3ff2851310000000, 0D3e6ad636441a5627, 0D3ff2890d50000000, 0D3e54c205d7212abb, 0D3ff28d05d0000000, 0D3e6167c86c116419, 0D3ff290fca0000000, 0D3e638ec3ef16e294, 0D3ff294f1c0000000, 0D3e6473fceace9321, 0D3ff298e530000000, 0D3e67af53a836dba7, 0D3ff29cd700000000, 0D3e1a51f3c383b652, 0D3ff2a0c710000000, 0D3e63696da190822d, 0D3ff2a4b580000000, 0D3e62f9adec77074b, 0D3ff2a8a250000000, 0D3e38190fd5bee55f, 0D3ff2ac8d70000000, 0D3e4bfee8fac68e55, 0D3ff2b076f0000000, 0D3e331c9d6bc5f68a, 0D3ff2b45ec0000000, 0D3e689d0523737edf, 0D3ff2b84500000000, 0D3e5a295943bf47bb, 0D3ff2bc29a0000000, 0D3e396be32e5b3207, 0D3ff2c00c90000000, 0D3e6e44c7d909fa0e, 0D3ff2c3ee00000000, 0D3e2b2505da94d9ea, 0D3ff2c7cdc0000000, 0D3e60c851f46c9c98, 0D3ff2cbabf0000000, 0D3e5da71f7d9aa3b7, 0D3ff2cf8880000000, 0D3e6f1b605d019ef1, 0D3ff2d36390000000, 0D3e4386e8a2189563, 0D3ff2d73d00000000, 0D3e3b19fa5d306ba7, 0D3ff2db14d0000000, 0D3e6dd749b67aef76, 0D3ff2deeb20000000, 0D3e676ff6f1dc04b0, 0D3ff2e2bfe0000000, 0D3e635a33d0b232a6, 0D3ff2e69310000000, 0D3e64bdc80024a4e1, 0D3ff2ea64b0000000, 0D3e6ebd61770fd723, 0D3ff2ee34d0000000, 0D3e64769fc537264d, 0D3ff2f20360000000, 0D3e69021f429f3b98, 0D3ff2f5d070000000, 0D3e5ee7083efbd606, 0D3ff2f99bf0000000, 0D3e6ad985552a6b1a, 0D3ff2fd65f0000000, 0D3e6e3df778772160, 0D3ff3012e70000000, 0D3e6ca5d76ddc9b34, 0D3ff304f570000000, 0D3e691154ffdbaf74, 0D3ff308baf0000000, 0D3e667bdd57fb306a, 0D3ff30c7ef0000000, 0D3e67dc255ac40886, 0D3ff3104180000000, 0D3df219f38e8afafe, 0D3ff3140280000000, 0D3e62416bf9669a04, 0D3ff317c210000000, 0D3e611c96b2b3987f, 0D3ff31b8020000000, 0D3e6f99ed447e1177, 0D3ff31f3cd0000000, 0D3e13245826328a11, 0D3ff322f7f0000000, 0D3e66f56dd1e645f8, 0D3ff326b1b0000000, 0D3e46164946945535, 0D3ff32a69f0000000, 0D3e5e37d59d190028, 0D3ff32e20c0000000, 0D3e668671f12bf828, 0D3ff331d620000000, 0D3e6e8ecbca6aabbd, 0D3ff3358a20000000, 0D3e53f49e109a5912, 0D3ff3393ca0000000, 0D3e6b8a0e11ec3043, 0D3ff33cedc0000000, 0D3e65fae00aed691a, 0D3ff3409d70000000, 0D3e6c0569bece3e4a, 0D3ff3444bc0000000, 0D3e605e26744efbfe, 0D3ff347f8a0000000, 0D3e65b570a94be5c5, 0D3ff34ba420000000, 0D3e5d6f156ea0e063, 0D3ff34f4e30000000, 0D3e6e0ca7612fc484, 0D3ff352f6f0000000, 0D3e4963c927b25258, 0D3ff3569e40000000, 0D3e547930aa725a5c, 0D3ff35a4430000000, 0D3e58a79fe3af43b3, 0D3ff35de8c0000000, 0D3e5e6dc29c41bdaf, 0D3ff3618bf0000000, 0D3e657a2e76f863a5, 0D3ff3652dd0000000, 0D3e2ae3b61716354d, 0D3ff368ce40000000, 0D3e665fb5df6906b1, 0D3ff36c6d60000000, 0D3e66177d7f588f7b, 0D3ff3700b30000000, 0D3e3ad55abd091b67, 0D3ff373a7a0000000, 0D3e155337b2422d76, 0D3ff37742b0000000, 0D3e6084ebe86972d5, 0D3ff37adc70000000, 0D3e656395808e1ea3, 0D3ff37e74e0000000, 0D3e61bce21b40fba7, 0D3ff3820c00000000, 0D3e5006f94605b515, 0D3ff385a1c0000000, 0D3e6aa676aceb1f7d, 0D3ff3893640000000, 0D3e58229f76554ce6, 0D3ff38cc960000000, 0D3e6eabfc6cf57330, 0D3ff3905b40000000, 0D3e64daed9c0ce8bc, 0D3ff393ebd0000000, 0D3e60ff1768237141, 0D3ff3977b10000000, 0D3e6575f83051b085, 0D3ff39b0910000000, 0D3e42667deb523e29, 0D3ff39e95c0000000, 0D3e1816996954f4fd, 0D3ff3a22120000000, 0D3e587cfccf4d9cd4, 0D3ff3a5ab40000000, 0D3e52c5d018198353, 0D3ff3a93410000000, 0D3e6a7a898dcc34aa, 0D3ff3acbbb0000000, 0D3e2cead6dadc36d1, 0D3ff3b04200000000, 0D3e2a55759c498bdf, 0D3ff3b3c700000000, 0D3e6c414a9ef6de04, 0D3ff3b74ad0000000, 0D3e63e2108a6e58fa, 0D3ff3bacd60000000, 0D3e5587fd7643d77c, 0D3ff3be4eb0000000, 0D3e3901eb1d3ff3df, 0D3ff3c1ceb0000000, 0D3e6f2ccd7c812fc6, 0D3ff3c54d90000000, 0D3e21c8ee70a01049, 0D3ff3c8cb20000000, 0D3e563e8d02831eec, 0D3ff3cc4770000000, 0D3e6f61a42a92c7ff, 0D3ff3cfc2a0000000, 0D3dda917399c84d24, 0D3ff3d33c80000000, 0D3e5e9197c8eec2f0, 0D3ff3d6b530000000, 0D3e5e6f842f5a1378, 0D3ff3da2cb0000000, 0D3e2fac242a90a0fc, 0D3ff3dda2f0000000, 0D3e535ed726610227, 0D3ff3e11800000000, 0D3e50e0d64804b15b, 0D3ff3e48be0000000, 0D3e0560675daba814, 0D3ff3e7fe80000000, 0D3e637388c8768032, 0D3ff3eb7000000000, 0D3e3ee3c89f9e01f5, 0D3ff3eee040000000, 0D3e639f6f0d09747c, 0D3ff3f24f60000000, 0D3e4322c327abb8f0, 0D3ff3f5bd40000000, 0D3e6961b347c8ac80, 0D3ff3f92a00000000, 0D3e63711fbbd0f118, 0D3ff3fc9590000000, 0D3e64fad8d7718ffb, 0D3ff3fffff0000000, 0D3e6fffffffffffff, 0D3ff4036930000000, 0D3e667efa79ec35b4, 0D3ff406d140000000, 0D3e6a737687a254a8, 0D3ff40a3830000000, 0D3e5bace0f87d924d, 0D3ff40d9df0000000, 0D3e629e37c237e392, 0D3ff4110290000000, 0D3e557ce7ac3f3012, 0D3ff4146600000000, 0D3e682829359f8fbd, 0D3ff417c850000000, 0D3e6cc9be42d14676, 0D3ff41b2980000000, 0D3e6a8f001c137d0b, 0D3ff41e8990000000, 0D3e636127687dda05, 0D3ff421e880000000, 0D3e524dba322646f0, 0D3ff4254640000000, 0D3e6dc43f1ed210b4, 0D3ff428a2f0000000, 0D3e631ae515c447bb};

readonly_f64 &__math64_CBRT_TBL_REM[10] = {0D3fe428a2f0000000, 0D3e531ae515c447bb, 0D3fe965fea0000000, 0D3e44f5b8f20ac166, 0D3ff0000000000000, 0D0000000000000000, 0D3ff428a2f0000000, 0D3e631ae515c447bb, 0D3ff965fea0000000, 0D3e54f5b8f20ac166};

readonly_f64 &__math64_LN_TBL[130] = {0D0000000000000000, 0D0000000000000000, 0D3f8fc0a800000000, 0D3e361f807c79f3db, 0D3f9f829800000000, 0D3e6873c1980267c8, 0D3fa7745800000000, 0D3e5ec65b9f88c69e, 0D3faf0a3000000000, 0D3e58022c54cc2f99, 0D3fb341d700000000, 0D3e62c37a3a125330, 0D3fb6f0d200000000, 0D3e615cad69737c93, 0D3fba926d00000000, 0D3e4d256ab1b285e9, 0D3fbe270700000000, 0D3e5b8abcb97a7aa2, 0D3fc0d77e00000000, 0D3e6f34239659a5dc, 0D3fc2955280000000, 0D3e6e07fd48d30177, 0D3fc44d2b00000000, 0D3e6b32df4799f4f6, 0D3fc5ff3000000000, 0D3e6c29e4f4f21cf8, 0D3fc7ab8900000000, 0D3e1086c848df1b59, 0D3fc9525a80000000, 0D3e4cf456b4764130, 0D3fcaf3c900000000, 0D3e63a02ffcb63398, 0D3fcc8ff780000000, 0D3e61e6a6886b0976, 0D3fce270700000000, 0D3e6b8abcb97a7aa2, 0D3fcfb91800000000, 0D3e6b578f8aa35552, 0D3fd0a324c0000000, 0D3e6139c871afb9fc, 0D3fd1675c80000000, 0D3e65d5d30701ce64, 0D3fd22941c0000000, 0D3e6de7bcb2d12142, 0D3fd2e8e280000000, 0D3e6d708e984e1664, 0D3fd3a64c40000000, 0D3e556945e9c72f36, 0D3fd4618bc0000000, 0D3e20e2f613e85bda, 0D3fd51aad80000000, 0D3e3cb7e0b42724f6, 0D3fd5d1bd80000000, 0D3e6fac04e52846c7, 0D3fd686c800000000, 0D3e5e9b14aec442be, 0D3fd739d7c0000000, 0D3e6b5de8034e7126, 0D3fd7eaf800000000, 0D3e6dc157e1b259d3, 0D3fd89a3380000000, 0D3e3b05096ad69c62, 0D3fd9479400000000, 0D3e5c2116faba4cdd, 0D3fd9f323c0000000, 0D3e665fcc25f95b47, 0D3fda9cec80000000, 0D3e5a9a08498d4850, 0D3fdb44f740000000, 0D3e6de647b1465f77, 0D3fdbeb4d80000000, 0D3e5da71b7bf7861d, 0D3fdc8ff7c0000000, 0D3e3e6a6886b09760, 0D3fdd32fe40000000, 0D3e6f0075eab0ef64, 0D3fddd46a00000000, 0D3e33071282fb989b, 0D3fde744240000000, 0D3e60eb43c3f1bed2, 0D3fdf128f40000000, 0D3e5faf06ecb35c84, 0D3fdfaf5880000000, 0D3e4ef1e63db35f68, 0D3fe02552a0000000, 0D3e469743fb1a71a5, 0D3fe0723e40000000, 0D3e6c1cdf404e5796, 0D3fe0be72e0000000, 0D3e4094aa0ada625e, 0D3fe109f380000000, 0D3e6e2d4c96fde3ec, 0D3fe154c3c0000000, 0D3e62f4d5e9a98f34, 0D3fe19ee6a0000000, 0D3e6467c96ecc5cbe, 0D3fe1e85f40000000, 0D3e6e7040d03dec5a, 0D3fe23130c0000000, 0D3e67bebf4282de36, 0D3fe2795e00000000, 0D3e6289b11aeb783f, 0D3fe2c0e9e0000000, 0D3e5a891d1772f538, 0D3fe307d720000000, 0D3e634f10be1fb591, 0D3fe34e2880000000, 0D3e6d9ce1d316eb93, 0D3fe393e0c0000000, 0D3e63562a19a9c442, 0D3fe3d90260000000, 0D3e54e2adf548084c, 0D3fe41d8fe0000000, 0D3e508ce55cc8c97a, 0D3fe4618bc0000000, 0D3e30e2f613e85bda, 0D3fe4a4f840000000, 0D3e6db03ebb0227bf, 0D3fe4e7d800000000, 0D3e61b75bb09cb098, 0D3fe52a2d20000000, 0D3e496f16abb9df22, 0D3fe56bf9c0000000, 0D3e65b3f399411c62, 0D3fe5ad4040000000, 0D3e586b3e59f65355, 0D3fe5ee02a0000000, 0D3e52482ceae1ac12, 0D3fe62e42e0000000, 0D3e6efa39ef35793c};

readonly_f64 &__math64_POWLOG_TBL[516] = {0D0000000000000000, 0D0000000000000000, 0D3f6ff00aa0000000, 0D3db5885e0250435a, 0D3f7fe02a60000000, 0D3de620cf11f86ed2, 0D3f87dc4750000000, 0D3dff0214edba4a25, 0D3f8fc0a8b0000000, 0D3dbf807c79f3db4e, 0D3f93cea440000000, 0D3dea352ba779a52b, 0D3f97b91b00000000, 0D3dff56c46aa49fd5, 0D3f9b9fc020000000, 0D3dfebe465fef5196, 0D3f9f829b00000000, 0D3e0cf0660099f1f8, 0D3fa1b0d980000000, 0D3e1247b2ff85945d, 0D3fa39e87b0000000, 0D3e13fd7abf5202b6, 0D3fa58a5ba0000000, 0D3e1f91c9a918d51e, 0D3fa77458f0000000, 0D3e08cb73f118d3ca, 0D3fa95c8300000000, 0D3e1d91c7d6fad074, 0D3fab42dd70000000, 0D3de1971bec28d14c, 0D3fad276b80000000, 0D3e15b616a423c78a, 0D3faf0a30c0000000, 0D3da162a6617cc971, 0D3fb0759830000000, 0D3e166391c4c06d29, 0D3fb16536e0000000, 0D3e2d46f5c1d0c4b8, 0D3fb253f620000000, 0D3e2e14282df1f6d3, 0D3fb341d790000000, 0D3e186f47424a660d, 0D3fb42edcb0000000, 0D3e2d4c8de077753e, 0D3fb51b0730000000, 0D3e2e0c307ed24f1c, 0D3fb60658a0000000, 0D3e226ea18763bdd3, 0D3fb6f0d280000000, 0D3e25cad69737c933, 0D3fb7da7660000000, 0D3e2af62599088901, 0D3fb8c345d0000000, 0D3e18c66c83d6b2d0, 0D3fb9ab4240000000, 0D3e1880ceb36fb30f, 0D3fba926d30000000, 0D3e2495aac6ca17a4, 0D3fbb78c820000000, 0D3e2761db4210878c, 0D3fbc5e5480000000, 0D3e2eb78e862bac2f, 0D3fbd4313d0000000, 0D3e19b2cd75790dd9, 0D3fbe270760000000, 0D3e2c55e5cbd3d50f, 0D3fbf0a30c0000000, 0D3db162a6617cc971, 0D3fbfec9130000000, 0D3dfdbeabaaa2e519, 0D3fc0671510000000, 0D3e1652cb7150c647, 0D3fc0d77e70000000, 0D3e39a11cb2cd2ee2, 0D3fc1478580000000, 0D3e219d0ab1a28813, 0D3fc1b72ad0000000, 0D3e24bd9e80a41811, 0D3fc2266f10000000, 0D3e3214b596faa3df, 0D3fc29552f0000000, 0D3e303fea46980bb8, 0D3fc303d710000000, 0D3e31c8ffa5fd28c7, 0D3fc371fc20000000, 0D3dce8f743bcd96c5, 0D3fc3dfc2b0000000, 0D3dfd98c5395315c6, 0D3fc44d2b60000000, 0D3e3996fa3ccfa7b2, 0D3fc4ba36f0000000, 0D3e1cd2af2ad13037, 0D3fc526e5e0000000, 0D3e1d0da1bd17200e, 0D3fc59338d0000000, 0D3e3330410ba68b75, 0D3fc5ff3070000000, 0D3df4f27a790e7c41, 0D3fc66acd40000000, 0D3e13956a86f6ff1b, 0D3fc6d60fe0000000, 0D3e2c6748723551d9, 0D3fc740f8f0000000, 0D3e2500de9326cdfc, 0D3fc7ab8900000000, 0D3e1086c848df1b59, 0D3fc815c0a0000000, 0D3e04357ead6836ff, 0D3fc87fa060000000, 0D3e24832442408024, 0D3fc8e928d0000000, 0D3e3d10da8154b13d, 0D3fc9525a90000000, 0D3e39e8ad68ec8260, 0D3fc9bb3620000000, 0D3e3cfbf706abaf18, 0D3fca23bc10000000, 0D3e3fc56ac6326e23, 0D3fca8becf0000000, 0D3e39105e3185cf21, 0D3fcaf3c940000000, 0D3e3d017fe5b19cc0, 0D3fcb5b5190000000, 0D3e3d1f6b48dd13fe, 0D3fcbc28670000000, 0D3e20b63358a7e73a, 0D3fcc296850000000, 0D3e263063028c211c, 0D3fcc8ff7c0000000, 0D3e2e6a6886b09760, 0D3fccf63540000000, 0D3e3c138bb891cd03, 0D3fcd5c2160000000, 0D3e369f7722b7221a, 0D3fcdc1bca0000000, 0D3df57d8fac1a628c, 0D3fce270760000000, 0D3e3c55e5cbd3d50f, 0D3fce8c0250000000, 0D3e1552d2ff48fe2e, 0D3fcef0adc0000000, 0D3e37b8b26ca431bc, 0D3fcf550a50000000, 0D3e292decdc1c5f6d, 0D3fcfb91860000000, 0D3e3abc7c551aaa8c, 0D3fd00e6c40000000, 0D3e36b540731a354b, 0D3fd0402590000000, 0D3e32d341036b89ef, 0D3fd071b850000000, 0D3e4f9ab21a3a2e0f, 0D3fd0a324e0000000, 0D3e239c871afb9fbd, 0D3fd0d46b50000000, 0D3e3e6add2c81f640, 0D3fd1058bf0000000, 0D3e435c95aa313f41, 0D3fd1368700000000, 0D3e249d4582f6cc53, 0D3fd1675ca0000000, 0D3e47574c1c07398f, 0D3fd1980d20000000, 0D3e4ba846dece9e8d, 0D3fd1c898c0000000, 0D3e16999fafbc68e7, 0D3fd1f8ff90000000, 0D3e4c9145e51b0103, 0D3fd22941f0000000, 0D3e479ef2cb44850a, 0D3fd2596010000000, 0D3e0beec73de11275, 0D3fd2895a10000000, 0D3e2ef4351af5a498, 0D3fd2b93030000000, 0D3e45713a493b4a50, 0D3fd2e8e2b0000000, 0D3e45c23a61385992, 0D3fd31871c0000000, 0D3e42a88309f57299, 0D3fd347dd90000000, 0D3e4530faa9ac8ace, 0D3fd3772660000000, 0D3e25fec2d792a758, 0D3fd3a64c50000000, 0D3e35a517a71cbcd7, 0D3fd3d54fa0000000, 0D3e3707dc3e1cd9a3, 0D3fd4043080000000, 0D3e3a1a9f8ef43049, 0D3fd432ef20000000, 0D3e4409d0276b3674, 0D3fd4618bc0000000, 0D3e20e2f613e85bd9, 0D3fd4900680000000, 0D3df0027433001e5f, 0D3fd4be5f90000000, 0D3e35dde2836d3265, 0D3fd4ec9730000000, 0D3e2300134d7aaf04, 0D3fd51aad80000000, 0D3e3cb7e0b42724f5, 0D3fd548a2c0000000, 0D3e2d6e93167e6308, 0D3fd5767710000000, 0D3e3d1569b1526adb, 0D3fd5a42ab0000000, 0D3e0e99fc338a1a41, 0D3fd5d1bdb0000000, 0D3e4eb01394a11b1c, 0D3fd5ff3070000000, 0D3e04f27a790e7c41, 0D3fd62c82f0000000, 0D3e25ce3ca97b7af9, 0D3fd659b570000000, 0D3e281f0f940ed857, 0D3fd686c810000000, 0D3e4d36295d88857c, 0D3fd6b3bb20000000, 0D3e21aca1ec4af526, 0D3fd6e08ea0000000, 0D3e445743c7182726, 0D3fd70d42e0000000, 0D3e23c491aead337e, 0D3fd739d7f0000000, 0D3e3aef401a738931, 0D3fd7664e10000000, 0D3e21cede76092a29, 0D3fd792a550000000, 0D3e4fba8f44f82bb4, 0D3fd7bede00000000, 0D3e446f5f7f3c3e1a, 0D3fd7eaf830000000, 0D3e47055f86c9674b, 0D3fd816f410000000, 0D3e4b41a92b6b6e1a, 0D3fd842d1d0000000, 0D3e443d162e927628, 0D3fd86e9190000000, 0D3e4466174013f9b1, 0D3fd89a3380000000, 0D3e3b05096ad69c62, 0D3fd8c5b7c0000000, 0D3e40b169150faa58, 0D3fd8f11e80000000, 0D3e3cd98b1df85da7, 0D3fd91c67e0000000, 0D3e468b507b0f8fa8, 0D3fd9479410000000, 0D3e48422df57499ba, 0D3fd972a340000000, 0D3e11351586970274, 0D3fd99d9580000000, 0D3e117e08acba92ee, 0D3fd9c86b00000000, 0D3e26e04314dd0229, 0D3fd9f323e0000000, 0D3e497f3097e56d1a, 0D3fda1dc060000000, 0D3e3356e655901286, 0D3fda484090000000, 0D3e0cb761457f94d6, 0D3fda72a490000000, 0D3e39af67a85a9dac, 0D3fda9cec90000000, 0D3e453410931a909f, 0D3fdac718c0000000, 0D3e22c587206058f5, 0D3fdaf12930000000, 0D3e223bc358899c22, 0D3fdb1b1e00000000, 0D3e4d7bf8b6d223cb, 0D3fdb44f770000000, 0D3e47991ec5197ddb, 0D3fdb6eb590000000, 0D3e4a79e6bb3a9219, 0D3fdb985890000000, 0D3e3a4c43ed663ec5, 0D3fdbc1e080000000, 0D3e461b5a1484f438, 0D3fdbeb4d90000000, 0D3e4b4e36f7ef0c3a, 0D3fdc149ff0000000, 0D3e115f026acd0d1b, 0D3fdc3dd7a0000000, 0D3e3f36b535cecf05, 0D3fdc66f4e0000000, 0D3e2ffb7fbf3eb5c6, 0D3fdc8ff7c0000000, 0D3e3e6a6886b09760, 0D3fdcb8e070000000, 0D3e3135eb27f5bbc3, 0D3fdce1af00000000, 0D3e470be7d6f6fa57, 0D3fdd0a63a0000000, 0D3e4ce43cc84ab338, 0D3fdd32fe70000000, 0D3e4c01d7aac3bd91, 0D3fdd5b7f90000000, 0D3e45c58d07961060, 0D3fdd83e720000000, 0D3e3628bcf941456e, 0D3fddac3530000000, 0D3e4c58b2a8461cd2, 0D3fddd46a00000000, 0D3e33071282fb989a, 0D3fddfc8590000000, 0D3e420dab6a80f09c, 0D3fde248810000000, 0D3e44f8d84c397b1e, 0D3fde4c71a0000000, 0D3e40d0ee08599e48, 0D3fde744260000000, 0D3e1d68787e37da36, 0D3fde9bfa60000000, 0D3e366187d591bafc, 0D3fdec399d0000000, 0D3e22346600bae772, 0D3fdeeb20c0000000, 0D3e390377d0d61b8e, 0D3fdf128f50000000, 0D3e4f5e0dd966b907, 0D3fdf39e5b0000000, 0D3e49023cb79a00e2, 0D3fdf6123f0000000, 0D3e44e05158c28ad8, 0D3fdf884a30000000, 0D3e3bfa7b08b18ae4, 0D3fdfaf5880000000, 0D3e4ef1e63db35f67, 0D3fdfd64f20000000, 0D3e0ec2ae39493d4f, 0D3fdffd2e00000000, 0D3e40afe930ab2fa0, 0D3fe011fab0000000, 0D3e225ff8a1810dd4, 0D3fe02552a0000000, 0D3e469743fb1a71a5, 0D3fe0389ee0000000, 0D3e5f9cc676785571, 0D3fe04bdf90000000, 0D3e5b524da4cbf982, 0D3fe05f14b0000000, 0D3e5a4c8b381535b8, 0D3fe0723e50000000, 0D3e5839be809caf2c, 0D3fe0855c80000000, 0D3e50968a1cb82c13, 0D3fe0986f40000000, 0D3e5eae6a41723fb5, 0D3fe0ab76b0000000, 0D3e5d9c29a380a4db, 0D3fe0be72e0000000, 0D3e4094aa0ada625e, 0D3fe0d163c0000000, 0D3e5973ad6fc108ca, 0D3fe0e44980000000, 0D3e4747322fdbab97, 0D3fe0f72410000000, 0D3e593692fa9d4221, 0D3fe109f390000000, 0D3e5c5a992dfbc7d9, 0D3fe11cb810000000, 0D3e4e1f33e102387a, 0D3fe12f7190000000, 0D3e464fbef14c048c, 0D3fe1422020000000, 0D3e4490f513ca5e3b, 0D3fe154c3d0000000, 0D3e37a6af4d4c799d, 0D3fe1675ca0000000, 0D3e57574c1c07398f, 0D3fe179eab0000000, 0D3e57b133417f8c1c, 0D3fe18c6e00000000, 0D3e5feb9e0c176514, 0D3fe19ee6b0000000, 0D3e419f25bb3172f7, 0D3fe1b154b0000000, 0D3e45f68a7bbfb852, 0D3fe1c3b810000000, 0D3e5ee278497929f1, 0D3fe1d610f0000000, 0D3e5ccee006109d58, 0D3fe1e85f50000000, 0D3e5ce081a07bd8b3, 0D3fe1faa340000000, 0D3e570e12981817b8, 0D3fe20cdcd0000000, 0D3e292ab6d93503d0, 0D3fe21f0bf0000000, 0D3e58cb7dd7c3b61e, 0D3fe23130d0000000, 0D3e4efafd0a0b78da, 0D3fe2434b60000000, 0D3e5e907267c4288e, 0D3fe2555bc0000000, 0D3e5d31ef96780875, 0D3fe2676200000000, 0D3e23430dfcd2ad50, 0D3fe2795e10000000, 0D3e344d88d75bc1f9, 0D3fe28b5000000000, 0D3e5bec0f055e04fc, 0D3fe29d37f0000000, 0D3e5d85611590b9ad, 0D3fe2af15f0000000, 0D3df320568e583229, 0D3fe2c0e9e0000000, 0D3e5a891d1772f538, 0D3fe2d2b400000000, 0D3e22edc9dabba74d, 0D3fe2e47430000000, 0D3e4b9009a1015086, 0D3fe2f62a90000000, 0D3e52a12a8c5b1a19, 0D3fe307d730000000, 0D3e3a7885f0fdac85, 0D3fe3197a00000000, 0D3e5f4ffcd43ac691, 0D3fe32b1330000000, 0D3e52243ae2640aad, 0D3fe33ca2b0000000, 0D3e546513299035d3, 0D3fe34e2890000000, 0D3e5b39c3a62dd725, 0D3fe35fa4e0000000, 0D3e5ba6dd40049f51, 0D3fe37117b0000000, 0D3e451d1ed7177409, 0D3fe38280f0000000, 0D3e5cb0f2fd7f5216, 0D3fe393e0d0000000, 0D3e3ab150cd4e2213, 0D3fe3a53730000000, 0D3e5cfd7bf3193844, 0D3fe3b68440000000, 0D3e53fff8455f1dbd, 0D3fe3c7c7f0000000, 0D3e5fee640b905fc9, 0D3fe3d90260000000, 0D3e54e2adf548084c, 0D3fe3ea3390000000, 0D3e3b597adc1ecdd2, 0D3fe3fb5b80000000, 0D3e4345bd096d3a75, 0D3fe40c7a40000000, 0D3e5101b9d2453c8b, 0D3fe41d8fe0000000, 0D3e508ce55cc8c979, 0D3fe42e9c60000000, 0D3e5bbf017e595f71, 0D3fe43f9fe0000000, 0D3e37ce733bd393dc, 0D3fe4509a50000000, 0D3e233bb0a503f8a1, 0D3fe4618bc0000000, 0D3e30e2f613e85bd9, 0D3fe4727430000000, 0D3e5e67555a635b3c, 0D3fe48353d0000000, 0D3e2ea88df73d5e8b, 0D3fe4942a80000000, 0D3e3d17e03bda18a8, 0D3fe4a4f850000000, 0D3e5b607d76044f7e, 0D3fe4b5bd60000000, 0D3e52adc4e71bc2fc, 0D3fe4c679a0000000, 0D3e5f99dc7362d1d9, 0D3fe4d72d30000000, 0D3e5473fa008e6a6a, 0D3fe4e7d810000000, 0D3e2b75bb09cb0985, 0D3fe4f87a30000000, 0D3e5ea04dd10b9aba, 0D3fe50913c0000000, 0D3e5802d0d6979674, 0D3fe519a4c0000000, 0D3e174688ccd99094, 0D3fe52a2d20000000, 0D3e496f16abb9df22, 0D3fe53aad00000000, 0D3e46e66df2aa374f, 0D3fe54b2460000000, 0D3e4e66525ea4550a, 0D3fe55b9350000000, 0D3e42d02f34f20cbd, 0D3fe56bf9d0000000, 0D3e46cfce65047188, 0D3fe57c57f0000000, 0D3e39b78c842d58b8, 0D3fe58cadb0000000, 0D3e4735e624c24bc9, 0D3fe59cfb20000000, 0D3e47eba1f7dd1adf, 0D3fe5ad4040000000, 0D3e586b3e59f65355, 0D3fe5bd7d30000000, 0D3e1ce38e637f1b4d, 0D3fe5cdb1d0000000, 0D3e58d82ec919edc7, 0D3fe5ddde50000000, 0D3e4c52648ddcfa37, 0D3fe5ee02a0000000, 0D3e52482ceae1ac12, 0D3fe5fe1ed0000000, 0D3e55a312311aba4f, 0D3fe60e32f0000000, 0D3e411e236329f225, 0D3fe61e3ef0000000, 0D3e5b48c8cd2f246c, 0D3fe62e42e0000000, 0D3e6efa39ef35793c, 0D0000000000000000, 0D0000000000000000};

readonly_f64 &__math64_LOG_F_INV_TBL[516] = {0D4000000000000000, 0D0000000000000000, 0D3fffe00000000000, 0D3effe01fe01fe020, 0D3fffc00000000000, 0D3f1fc07f01fc07f0, 0D3fffa00000000000, 0D3f31caa01fa11caa, 0D3fff800000000000, 0D3f3f81f81f81f820, 0D3fff600000000000, 0D3f48856506ddaba6, 0D3fff400000000000, 0D3f5196792909c560, 0D3fff200000000000, 0D3f57d9108c2ad433, 0D3fff000000000000, 0D3f5f07c1f07c1f08, 0D3ffee00000000000, 0D3f638ff08b1c03dd, 0D3ffec00000000000, 0D3f680f6603d980f6, 0D3ffea00000000000, 0D3f6d00f57403d5d0, 0D3ffe900000000000, 0D3f331abf0b7672a0, 0D3ffe700000000000, 0D3f506a965d43919b, 0D3ffe500000000000, 0D3f5ceb240795ceb2, 0D3ffe300000000000, 0D3f6522f3b834e67f, 0D3ffe100000000000, 0D3f6c3c3c3c3c3c3c, 0D3ffe000000000000, 0D3f3e01e01e01e01e, 0D3ffde00000000000, 0D3f575b8fe21a291c, 0D3ffdc00000000000, 0D3f6403b9403b9404, 0D3ffda00000000000, 0D3f6cc0ed7303b5cc, 0D3ffd900000000000, 0D3f479118f3fc4da2, 0D3ffd700000000000, 0D3f5ed952e0b0ce46, 0D3ffd500000000000, 0D3f695900eae56404, 0D3ffd400000000000, 0D3f3d41d41d41d41d, 0D3ffd200000000000, 0D3f5cb28ff16c69ae, 0D3ffd000000000000, 0D3f696b1edd80e866, 0D3ffcf00000000000, 0D3f4372e225fe30d9, 0D3ffcd00000000000, 0D3f60ad12073615a2, 0D3ffcb00000000000, 0D3f6cdb2c0397cdb3, 0D3ffca00000000000, 0D3f52cc157b864407, 0D3ffc800000000000, 0D3f664cb5f7148404, 0D3ffc700000000000, 0D3f3c71c71c71c71c, 0D3ffc500000000000, 0D3f6129a21a930b84, 0D3ffc300000000000, 0D3f6f1e0387f1e038, 0D3ffc200000000000, 0D3f5ad4e4ba80709b, 0D3ffc000000000000, 0D3f6c0e070381c0e0, 0D3ffbf00000000000, 0D3f560fba1a362bb0, 0D3ffbd00000000000, 0D3f6a5713280dee96, 0D3ffbc00000000000, 0D3f53f59620f9ece9, 0D3ffba00000000000, 0D3f69f22983759f23, 0D3ffb900000000000, 0D3f5478ac63fc8d5c, 0D3ffb700000000000, 0D3f6ad87bb4671656, 0D3ffb600000000000, 0D3f578b8efbb8148c, 0D3ffb400000000000, 0D3f6d0369d0369d03, 0D3ffb300000000000, 0D3f5d212b601b3748, 0D3ffb200000000000, 0D3f0b2036406c80d9, 0D3ffb000000000000, 0D3f629663b24547d1, 0D3ffaf00000000000, 0D3f4435e50d79435e, 0D3ffad00000000000, 0D3f67d0ff2920bc03, 0D3ffac00000000000, 0D3f55c06b15c06b16, 0D3ffaa00000000000, 0D3f6e3a5f0fd7f954, 0D3ffa900000000000, 0D3f61dec0d4c77b03, 0D3ffa800000000000, 0D3f473289870ac52e, 0D3ffa600000000000, 0D3f6a034da034da03, 0D3ffa500000000000, 0D3f5d041da2292856, 0D3ffa400000000000, 0D3f3a41a41a41a41a, 0D3ffa200000000000, 0D3f68550f8a39409d, 0D3ffa100000000000, 0D3f5b4fe5e92c0686, 0D3ffa000000000000, 0D3f3a01a01a01a01a, 0D3ff9e00000000000, 0D3f691d2a2067b23a, 0D3ff9d00000000000, 0D3f5e7c5dada0b4e5, 0D3ff9c00000000000, 0D3f468a7725080ce1, 0D3ff9a00000000000, 0D3f6c49d4aa21b490, 0D3ff9900000000000, 0D3f63333333333333, 0D3ff9800000000000, 0D3f54bc363b03fccf, 0D3ff9700000000000, 0D3f2c9f01970e4f81, 0D3ff9500000000000, 0D3f697617c6ef5b25, 0D3ff9400000000000, 0D3f6161f9add3c0ca, 0D3ff9300000000000, 0D3f5319fe6cb39806, 0D3ff9200000000000, 0D3f2f693a1c451ab3, 0D3ff9000000000000, 0D3f6a9e240321a9e2, 0D3ff8f00000000000, 0D3f63831f3831f383, 0D3ff8e00000000000, 0D3f5949ebc4dcfc1c, 0D3ff8d00000000000, 0D3f480c6980c6980c, 0D3ff8b00000000000, 0D3f6f9d00c5fe7403, 0D3ff8a00000000000, 0D3f69721ed7e75347, 0D3ff8900000000000, 0D3f6381ec0313381f, 0D3ff8800000000000, 0D3f5b97c2aec12653, 0D3ff8700000000000, 0D3f509ef3024ae3ba, 0D3ff8600000000000, 0D3f38618618618618, 0D3ff8400000000000, 0D3f6e0184f00c2780, 0D3ff8300000000000, 0D3f692ef5657dba52, 0D3ff8200000000000, 0D3f64940305494030, 0D3ff8100000000000, 0D3f60303030303030, 0D3ff8000000000000, 0D3f58060180601806, 0D3ff7f00000000000, 0D3f5017f405fd017f, 0D3ff7e00000000000, 0D3f412a8ad278e8dd, 0D3ff7d00000000000, 0D3f17d05f417d05f4, 0D3ff7b00000000000, 0D3f6d67245c02f7d6, 0D3ff7a00000000000, 0D3f6a4411c1d986a9, 0D3ff7900000000000, 0D3f6754d76c7316df, 0D3ff7800000000000, 0D3f649902f149902f, 0D3ff7700000000000, 0D3f621023358c1a68, 0D3ff7600000000000, 0D3f5f7390d2a6c406, 0D3ff7500000000000, 0D3f5b2b0805d5b2b1, 0D3ff7400000000000, 0D3f5745d1745d1746, 0D3ff7300000000000, 0D3f53c31507fa32c4, 0D3ff7200000000000, 0D3f50a1fd1b7af017, 0D3ff7100000000000, 0D3f4bc36ce3e0453a, 0D3ff7000000000000, 0D3f4702e05c0b8170, 0D3ff6f00000000000, 0D3f4300b79300b793, 0D3ff6e00000000000, 0D3f3f76b4337c6cb1, 0D3ff6d00000000000, 0D3f3a62681c860fb0, 0D3ff6c00000000000, 0D3f36c16c16c16c17, 0D3ff6b00000000000, 0D3f3490aa31a3cfc7, 0D3ff6a00000000000, 0D3f33cd153729043e, 0D3ff6900000000000, 0D3f3473a88d0bfd2e, 0D3ff6800000000000, 0D3f36816816816817, 0D3ff6700000000000, 0D3f39f36016719f36, 0D3ff6600000000000, 0D3f3ec6a5122f9016, 0D3ff6500000000000, 0D3f427c29da5519cf, 0D3ff6400000000000, 0D3f4642c8590b2164, 0D3ff6300000000000, 0D3f4ab5c45606f00b, 0D3ff6200000000000, 0D3f4fd3b80b11fd3c, 0D3ff6100000000000, 0D3f52cda0c6ba4eaa, 0D3ff6000000000000, 0D3f56058160581606, 0D3ff5f00000000000, 0D3f5990d0a4b7ef87, 0D3ff5e00000000000, 0D3f5d6ee340579d6f, 0D3ff5d00000000000, 0D3f60cf87d9c54a69, 0D3ff5c00000000000, 0D3f6310572620ae4c, 0D3ff5b00000000000, 0D3f65798c8ff522a2, 0D3ff5a00000000000, 0D3f680ad602b580ad, 0D3ff5900000000000, 0D3f6ac3e24799546f, 0D3ff5800000000000, 0D3f6da46102b1da46, 0D3ff5800000000000, 0D3f15805601580560, 0D3ff5700000000000, 0D3f3ed3c506b39a23, 0D3ff5600000000000, 0D3f4cbdd3e2970f60, 0D3ff5500000000000, 0D3f55555555555555, 0D3ff5400000000000, 0D3f5c979aee0bf805, 0D3ff5300000000000, 0D3f621291e81fd58e, 0D3ff5200000000000, 0D3f65fead500a9580, 0D3ff5100000000000, 0D3f6a0fd5c5f02a3a, 0D3ff5000000000000, 0D3f6e45c223898adc, 0D3ff5000000000000, 0D3f35015015015015, 0D3ff4f00000000000, 0D3f4c7b16ea64d422, 0D3ff4e00000000000, 0D3f57829cbc14e5e1, 0D3ff4d00000000000, 0D3f60877db8589720, 0D3ff4c00000000000, 0D3f65710e4b5edcea, 0D3ff4b00000000000, 0D3f6a7dbb4d1fc1c8, 0D3ff4a00000000000, 0D3f6fad40a57eb503, 0D3ff4a00000000000, 0D3f43fd6bb00a5140, 0D3ff4900000000000, 0D3f54e78ecb419ba9, 0D3ff4800000000000, 0D3f600a44029100a4, 0D3ff4700000000000, 0D3f65c28f5c28f5c3, 0D3ff4600000000000, 0D3f6b9c68b2c0cc4a, 0D3ff4600000000000, 0D3f2978feb9f34381, 0D3ff4500000000000, 0D3f4ecf163bb6500a, 0D3ff4400000000000, 0D3f5be1958b67ebb9, 0D3ff4300000000000, 0D3f644e6157dc9a3b, 0D3ff4200000000000, 0D3f6acc4baa3f0ddf, 0D3ff4200000000000, 0D3f26a4cbcb2a247b, 0D3ff4100000000000, 0D3f50505050505050, 0D3ff4000000000000, 0D3f5e0b4439959819, 0D3ff3f00000000000, 0D3f66027f6027f602, 0D3ff3e00000000000, 0D3f6d1e854b5e0db4, 0D3ff3e00000000000, 0D3f4165e7254813e2, 0D3ff3d00000000000, 0D3f576646a9d716ef, 0D3ff3c00000000000, 0D3f632b48f757ce88, 0D3ff3b00000000000, 0D3f6ac1b24652a906, 0D3ff3b00000000000, 0D3f33b13b13b13b14, 0D3ff3a00000000000, 0D3f5490e1eb208984, 0D3ff3900000000000, 0D3f62385830fec66e, 0D3ff3800000000000, 0D3f6a45a6cc111b7e, 0D3ff3800000000000, 0D3f33813813813814, 0D3ff3700000000000, 0D3f556f472517b708, 0D3ff3600000000000, 0D3f631be7bc0e8f2a, 0D3ff3500000000000, 0D3f6b9cbf3e55f044, 0D3ff3500000000000, 0D3f40e7d95bc609a9, 0D3ff3400000000000, 0D3f59e6b3804d19e7, 0D3ff3300000000000, 0D3f65c8b6af7963c2, 0D3ff3200000000000, 0D3f6eb9dad43bf402, 0D3ff3200000000000, 0D3f4f1a515885fb37, 0D3ff3100000000000, 0D3f60eeb1d3d76c02, 0D3ff3000000000000, 0D3f6a320261a32026, 0D3ff3000000000000, 0D3f3c82ac40260390, 0D3ff2f00000000000, 0D3f5a12f684bda12f, 0D3ff2e00000000000, 0D3f669d43fda2962c, 0D3ff2e00000000000, 0D3f02e025c04b8097, 0D3ff2d00000000000, 0D3f542804b542804b, 0D3ff2c00000000000, 0D3f63f69b02593f6a, 0D3ff2b00000000000, 0D3f6df31cb46e21fa, 0D3ff2b00000000000, 0D3f5012b404ad012b, 0D3ff2a00000000000, 0D3f623925e7820a7f, 0D3ff2900000000000, 0D3f6c8253c8253c82, 0D3ff2900000000000, 0D3f4b92ddc02526e5, 0D3ff2800000000000, 0D3f61602511602511, 0D3ff2700000000000, 0D3f6bf471439c9adf, 0D3ff2700000000000, 0D3f4a85c40939a85c, 0D3ff2600000000000, 0D3f6166f9ac024d16, 0D3ff2500000000000, 0D3f6c44e10125e227, 0D3ff2500000000000, 0D3f4cebf48bbd90e5, 0D3ff2400000000000, 0D3f62492492492492, 0D3ff2300000000000, 0D3f6d6f2e2ec0b673, 0D3ff2300000000000, 0D3f5159e26af37c05, 0D3ff2200000000000, 0D3f64024540245402, 0D3ff2100000000000, 0D3f6f6f0243f6f024, 0D3ff2100000000000, 0D3f55e60121579805, 0D3ff2000000000000, 0D3f668e18cf81b10f, 0D3ff2000000000000, 0D3f32012012012012, 0D3ff1f00000000000, 0D3f5c11f7047dc11f, 0D3ff1e00000000000, 0D3f69e878ff70985e, 0D3ff1e00000000000, 0D3f4779d9fdc3a219, 0D3ff1d00000000000, 0D3f61eace5c957907, 0D3ff1c00000000000, 0D3f6e0d5b450239e1, 0D3ff1c00000000000, 0D3f548bf073816367, 0D3ff1b00000000000, 0D3f6694808dda5202, 0D3ff1b00000000000, 0D3f37c67f2bae2b21, 0D3ff1a00000000000, 0D3f5ee58469ee5847, 0D3ff1900000000000, 0D3f6c0233c0233c02, 0D3ff1900000000000, 0D3f514e02328a7012, 0D3ff1800000000000, 0D3f6561072057b573, 0D3ff1800000000000, 0D3f31811811811812, 0D3ff1700000000000, 0D3f5e28646f5a1060, 0D3ff1600000000000, 0D3f6c0d1284e6f1d7, 0D3ff1600000000000, 0D3f523543f0c80459, 0D3ff1500000000000, 0D3f663cbeea4e1a09, 0D3ff1500000000000, 0D3f3b9a3fdd5c8cb8, 0D3ff1400000000000, 0D3f60be1c159a76d2, 0D3ff1300000000000, 0D3f6e1d1a688e4838, 0D3ff1300000000000, 0D3f572044d72044d7, 0D3ff1200000000000, 0D3f691713db81577b, 0D3ff1200000000000, 0D3f4ac73ae9819b50, 0D3ff1100000000000, 0D3f6460334e904cf6, 0D3ff1100000000000, 0D3f31111111111111, 0D3ff1000000000000, 0D3f5feef80441fef0, 0D3ff0f00000000000, 0D3f6de021fde021fe, 0D3ff0f00000000000, 0D3f57b7eacc9686a0, 0D3ff0e00000000000, 0D3f69ead7cd391fbc, 0D3ff0e00000000000, 0D3f50195609804390, 0D3ff0d00000000000, 0D3f6641511e8d2b32, 0D3ff0d00000000000, 0D3f4222b1acf1ce96, 0D3ff0c00000000000, 0D3f62e29f79b47582, 0D3ff0c00000000000, 0D3f24f0d1682e11cd, 0D3ff0b00000000000, 0D3f5f9bb096771e4d, 0D3ff0a00000000000, 0D3f6e5ee45dd96ae2, 0D3ff0a00000000000, 0D3f5a0429a0429a04, 0D3ff0900000000000, 0D3f6bb74d5f06c021, 0D3ff0900000000000, 0D3f54fce404254fce, 0D3ff0800000000000, 0D3f695766eacbc402, 0D3ff0800000000000, 0D3f50842108421084, 0D3ff0700000000000, 0D3f673e5371d5c338, 0D3ff0700000000000, 0D3f4930523fbe3368, 0D3ff0600000000000, 0D3f656b38f225f6c4, 0D3ff0600000000000, 0D3f426e978d4fdf3b, 0D3ff0500000000000, 0D3f63dd40e4eb0cc6, 0D3ff0500000000000, 0D3f397f7d73404146, 0D3ff0400000000000, 0D3f6293982cc98af1, 0D3ff0400000000000, 0D3f30410410410410, 0D3ff0300000000000, 0D3f618d6f048ff7e4, 0D3ff0300000000000, 0D3f2236a3ebc349de, 0D3ff0200000000000, 0D3f60c9f8ee53d18c, 0D3ff0200000000000, 0D3f10204081020408, 0D3ff0100000000000, 0D3f60486ca2f46ea6, 0D3ff0100000000000, 0D3ef0101010101010, 0D3ff0000000000000, 0D3f60080402010080, 0D3ff0000000000000, 0D0000000000000000, 0D0000000000000000, 0D0000000000000000};

readonly_f64 &__math64_SINH_TBL[74] = {0D0000000000000000, 0D0000000000000000, 0D3ff2cd9fc0000000, 0D3e513ae6096a0092, 0D400d03cf60000000, 0D3e5db70cfb79a640, 0D40240926e0000000, 0D3e8c2526b66dc067, 0D403b4a3800000000, 0D3e8b81b18647f380, 0D40528d0160000000, 0D3ebbc1cdd1e1eb08, 0D406936d228000000, 0D3ecd9f201534fb09, 0D4081228768000000, 0D3edd1c064a4e9954, 0D409749ea50000000, 0D3ed4eca65d06ea74, 0D40afa71570000000, 0D3f00c259bcc0ecc5, 0D40c5829dc8000000, 0D3f2b5a6647cf9016, 0D40dd3c4488000000, 0D3f09691adefb0870, 0D40f3de1650000000, 0D3f53410fc29cde38, 0D410b00b590000000, 0D3f46a31a50b6fb3c, 0D412259ac48000000, 0D3f57defc71805c40, 0D4138f0cca8000000, 0D3f9eb49fd80e0bab, 0D4150f2ebd0000000, 0D3f84fffc7bcd5920, 0D4167093488000000, 0D3fc03a93b6c63435, 0D417f4f2208000000, 0D3fb1940bb255fd1c, 0D419546d8f8000000, 0D3fded26e14260b50, 0D41aceb0888000000, 0D3ffb47401fc9f2a2, 0D41c3a6e1f8000000, 0D40267bb3f55634f1, 0D41dab5adb8000000, 0D401c435ff8194ddc, 0D41f226af30000000, 0D404d8fee052ba63a, 0D4208ab7fb0000000, 0D40651d7edccde3f6, 0D4220c3d390000000, 0D40704b1644557d1a, 0D4236c93268000000, 0D4076a6b5ca0a9dc4, 0D424ef822f0000000, 0D40afd9cc72249aba, 0D42650bba30000000, 0D40ce58de693edab5, 0D427c9aae40000000, 0D40d8c70158ac6363, 0D4293704708000000, 0D40e7614764f43e20, 0D42aa6b7658000000, 0D4106337db36fc718, 0D42c1f43fc8000000, 0D41212d98b1f611e2, 0D42d866f348000000, 0D412392bc108b37cc, 0D42f0953e28000000, 0D415ce87bdc3473dc, 0D430689e220000000, 0D414bc8d5ae99ad14, 0D431ea215a0000000, 0D415d20d76744835c};

readonly_f64 &__math64_COSH_TBL[74] = {0D3ff0000000000000, 0D0000000000000000, 0D3ff8b07550000000, 0D3e3d9f5504c2bd28, 0D400e18fa08000000, 0D3e67cb66f0a4c9fd, 0D402422a490000000, 0D3e8f58617928e588, 0D403b4ee858000000, 0D3e6bc7d000c38d48, 0D40528d6fc8000000, 0D3eaf7f9d4e329998, 0D406936e678000000, 0D3ec6e6e464885269, 0D4081228948000000, 0D3ecba3a8b946c154, 0D409749eaa8000000, 0D3ed3f4e76110d5a4, 0D40afa71580000000, 0D3f017622515a3e2b, 0D40c5829dd0000000, 0D3ee4dc4b528af3d0, 0D40dd3c4488000000, 0D3f11156278615e10, 0D40f3de1650000000, 0D3f535ad50ed821f5, 0D410b00b590000000, 0D3f46b61055f2935c, 0D412259ac48000000, 0D3f57e2794a601240, 0D4138f0cca8000000, 0D3f9eb4b45f6aadd3, 0D4150f2ebd0000000, 0D3f85000b967b3698, 0D4167093488000000, 0D3fc03a940fadc092, 0D417f4f2208000000, 0D3fb1940bf3bf874c, 0D419546d8f8000000, 0D3fded26e1a2a2110, 0D41aceb0888000000, 0D3ffb4740205796d6, 0D41c3a6e1f8000000, 0D40267bb3f55cb85d, 0D41dab5adb8000000, 0D401c435ff81e18ac, 0D41f226af30000000, 0D404d8fee052bdea4, 0D4208ab7fb0000000, 0D40651d7edccde926, 0D4220c3d390000000, 0D40704b1644557e0e, 0D4236c93268000000, 0D4076a6b5ca0a9e1c, 0D424ef822f0000000, 0D40afd9cc72249abe, 0D42650bba30000000, 0D40ce58de693edab5, 0D427c9aae40000000, 0D40d8c70158ac6364, 0D4293704708000000, 0D40e7614764f43e20, 0D42aa6b7658000000, 0D4106337db36fc718, 0D42c1f43fc8000000, 0D41212d98b1f611e2, 0D42d866f348000000, 0D412392bc108b37cc, 0D42f0953e28000000, 0D415ce87bdc3473dc, 0D430689e220000000, 0D414bc8d5ae99ad14, 0D431ea215a0000000, 0D415d20d76744835c};

readonly_f64 &__math64_ATAN_JBY256_TBL[482] = {0D3faff55b00000000, 0D3e56e59fbd38db2c, 0D3fb0f99e00000000, 0D3e64e3aa54dedf96, 0D3fb1f86d00000000, 0D3e67e105ab1bda88, 0D3fb2f71900000000, 0D3e48c5254d013fd0, 0D3fb3f59f00000000, 0D3e2cf8ab3ad62670, 0D3fb4f3fd00000000, 0D3e59dca4bec80468, 0D3fb5f23200000000, 0D3e53f4b5ec98a8da, 0D3fb6f03b00000000, 0D3e6b9d49619d81fe, 0D3fb7ee1800000000, 0D3e43017887460934, 0D3fb8ebc500000000, 0D3e511e3eca0b9944, 0D3fb9e94100000000, 0D3e54f3f73c5a332e, 0D3fbae68a00000000, 0D3e5c71c8ae0e00a6, 0D3fbbe39e00000000, 0D3e67cde0f86fbdc7, 0D3fbce07c00000000, 0D3e570f328c889c72, 0D3fbddd2100000000, 0D3e5c07ae9b994efe, 0D3fbed98c00000000, 0D3e40c8021d7b1698, 0D3fbfd5ba00000000, 0D3e635585edb8cb22, 0D3fc068d500000000, 0D3e70842567b30e96, 0D3fc0e6ad00000000, 0D3e799e811031472e, 0D3fc1646500000000, 0D3e6041821416bcee, 0D3fc1e1fa00000000, 0D3e7f6086e4dc96f4, 0D3fc25f6e00000000, 0D3e471a535c5f1b58, 0D3fc2dcbd00000000, 0D3e765f743fe63ca1, 0D3fc359e800000000, 0D3e7dbd733472d014, 0D3fc3d6ee00000000, 0D3e7d18cc4d8b0d1d, 0D3fc453ce00000000, 0D3e78c12553c8fb29, 0D3fc4d08700000000, 0D3e753b49e2e8f991, 0D3fc54d1800000000, 0D3e77422ae148c141, 0D3fc5c98100000000, 0D3e4e3ec269df56a8, 0D3fc645bf00000000, 0D3e7ff6754e7e0ac9, 0D3fc6c1d400000000, 0D3e7131267b1b5aad, 0D3fc73dbd00000000, 0D3e7d14fa403a94bc, 0D3fc7b97b00000000, 0D3e62f396c089a3d8, 0D3fc8350b00000000, 0D3e7c731d78fa95bb, 0D3fc8b06e00000000, 0D3e7c50f385177399, 0D3fc92ba300000000, 0D3e6f41409c6f2c20, 0D3fc9a6a800000000, 0D3e7d2d90c4c39ec0, 0D3fca217e00000000, 0D3e680420696f2106, 0D3fca9c2300000000, 0D3e4b40327943a2e8, 0D3fcb169600000000, 0D3e65d35e02f3d2a2, 0D3fcb90d700000000, 0D3e64a498288117b0, 0D3fcc0ae500000000, 0D3e635da119afb324, 0D3fcc84bf00000000, 0D3e714e85cdb9a908, 0D3fccfe6500000000, 0D3e638754e5547b9a, 0D3fcd77d500000000, 0D3e7be40ae6ce3246, 0D3fcdf11000000000, 0D3e70c993b3bea7e7, 0D3fce6a1400000000, 0D3e71d2dd89ac3359, 0D3fcee2e100000000, 0D3e61476603332c46, 0D3fcf5b7500000000, 0D3e7f25901bac55b7, 0D3fcfd3d100000000, 0D3e7f881b7c826e28, 0D3fd025fa00000000, 0D3e7441996d698d20, 0D3fd061ee00000000, 0D3e8407ac521ea089, 0D3fd09dc500000000, 0D3e82fb0c6c4b1723, 0D3fd0d97e00000000, 0D3e8ca135966a3e18, 0D3fd1151a00000000, 0D3e6b1218e4d646e4, 0D3fd1509700000000, 0D3e6d4e72a350d288, 0D3fd18bf500000000, 0D3e84617e2f04c329, 0D3fd1c73500000000, 0D3e6096ec41e82650, 0D3fd2025500000000, 0D3e79f91f25773e6e, 0D3fd23d5600000000, 0D3e659c0820f1d674, 0D3fd2783700000000, 0D3e602bf7a2df1064, 0D3fd2b2f700000000, 0D3e8fb36bfc40508f, 0D3fd2ed9800000000, 0D3e7ea08f3f8dc892, 0D3fd3281800000000, 0D3e73ed6254656a0e, 0D3fd3627700000000, 0D3e6b83f5e5e69c58, 0D3fd39cb400000000, 0D3e8d6ec2af768592, 0D3fd3d6d100000000, 0D3e6493889a226f94, 0D3fd410cb00000000, 0D3e85ad8fa65279ba, 0D3fd44aa400000000, 0D3e6b615784d45434, 0D3fd4845a00000000, 0D3e809a184368f145, 0D3fd4bdee00000000, 0D3e761a2439b0d91c, 0D3fd4f75f00000000, 0D3e7ce1a65e39a978, 0D3fd530ad00000000, 0D3e832a39a93b6a66, 0D3fd569d800000000, 0D3e81c3699af804e7, 0D3fd5a2e000000000, 0D3e575e0f4e44ede8, 0D3fd5dbc300000000, 0D3e8f77ced1a7a83b, 0D3fd6148400000000, 0D3e284e7f0cb1b500, 0D3fd64d1f00000000, 0D3e8ec6b838b02dfe, 0D3fd6859700000000, 0D3e83ebf4dfbeda87, 0D3fd6bdea00000000, 0D3e89397aed9cb475, 0D3fd6f61900000000, 0D3e707937bc239c54, 0D3fd72e2200000000, 0D3e8aa754553131b6, 0D3fd7660700000000, 0D3e74a05d407c45dc, 0D3fd79dc600000000, 0D3e8132231a206dd0, 0D3fd7d56000000000, 0D3e72d8ecfdd69c88, 0D3fd80cd400000000, 0D3e7a852c74218606, 0D3fd8442200000000, 0D3e871bf2baeebb50, 0D3fd87b4b00000000, 0D3e483d7db7491820, 0D3fd8b24d00000000, 0D3e6ca50d92b6da14, 0D3fd8e92900000000, 0D3e56f5cde8530298, 0D3fd91fde00000000, 0D3e7f343198910740, 0D3fd9566d00000000, 0D3e70e8d241ccd80a, 0D3fd98cd500000000, 0D3e71535ac619e6c8, 0D3fd9c31600000000, 0D3e77316041c36cd2, 0D3fd9f93000000000, 0D3e7985a000637d8e, 0D3fda2f2300000000, 0D3e6f2f29858c0a68, 0D3fda64ee00000000, 0D3e8879847f96d909, 0D3fda9a9200000000, 0D3e8ab3d319e12e42, 0D3fdad00f00000000, 0D3e75088162dfc4c2, 0D3fdb056400000000, 0D3e605749a1cd9d8c, 0D3fdb3a9100000000, 0D3e5da65c6c6b8618, 0D3fdb6f9600000000, 0D3e6739bf7df1ad64, 0D3fdba47300000000, 0D3e6bc31252aa3340, 0D3fdbd92800000000, 0D3e5e528191ad3aa8, 0D3fdc0db400000000, 0D3e8929d93df19f18, 0D3fdc421900000000, 0D3e5ff11eb693a080, 0D3fdc765500000000, 0D3e455ae3f145a3a0, 0D3fdcaa6800000000, 0D3e7cbcd8c6c0ca82, 0D3fdcde5300000000, 0D3e70cb04d425d304, 0D3fdd121500000000, 0D3e79adfcab5be678, 0D3fdd45ae00000000, 0D3e893d90c5662508, 0D3fdd791f00000000, 0D3e768489bd35ff40, 0D3fddac6700000000, 0D3e3586ed3da2b7e0, 0D3fdddf8500000000, 0D3e87604d2e850eee, 0D3fde127b00000000, 0D3e7ac1d12bfb53d8, 0D3fde454800000000, 0D3e39b3d468274740, 0D3fde77eb00000000, 0D3e7fc5d68d10e53c, 0D3fdeaa6500000000, 0D3e88f9e51884becb, 0D3fdedcb600000000, 0D3e8a87f0869c06d1, 0D3fdf0ede00000000, 0D3e831e7279f685fa, 0D3fdf40dd00000000, 0D3e46a8282f9719b0, 0D3fdf72b200000000, 0D3e60d2724a8a44e0, 0D3fdfa45d00000000, 0D3e8a60524b11ad4e, 0D3fdfd5e000000000, 0D3e575fdf832750f0, 0D3fe0039c00000000, 0D3e8cf06902e4cd36, 0D3fe01c3400000000, 0D3e6e82422d4f6d10, 0D3fe034b700000000, 0D3e524a091063e6c0, 0D3fe04d2500000000, 0D3e78a1a172dc6f38, 0D3fe0657e00000000, 0D3e929b6619f8a92d, 0D3fe07dc300000000, 0D3e79274d9c1b70c8, 0D3fe095f300000000, 0D3e50c34b1fbb7930, 0D3fe0ae0e00000000, 0D3e6639866c20eb50, 0D3fe0c61400000000, 0D3e86d6d0f6832e9e, 0D3fe0de0500000000, 0D3e9af54def99f25e, 0D3fe0f5e200000000, 0D3e916cfc52a00262, 0D3fe10daa00000000, 0D3e8dcc1e83569c32, 0D3fe1255d00000000, 0D3e937f7a551ed425, 0D3fe13cfb00000000, 0D3e9f6360adc98887, 0D3fe1548500000000, 0D3e92c6ec8d35a2c1, 0D3fe16bfa00000000, 0D3e8bd44df84cb036, 0D3fe1835a00000000, 0D3e9117cf826e310e, 0D3fe19aa500000000, 0D3e9ca533f332cfc9, 0D3fe1b1dc00000000, 0D3e90f208509dbc2e, 0D3fe1c8fe00000000, 0D3e8cd07d93c945de, 0D3fe1e00b00000000, 0D3e957bdfd67e6d72, 0D3fe1f70400000000, 0D3e7aab89c516c658, 0D3fe20de800000000, 0D3e63e823b1a1b8a0, 0D3fe224b700000000, 0D3e8307464a9d6d3c, 0D3fe23b7100000000, 0D3e9c5993cd438843, 0D3fe2521700000000, 0D3e9ba2fca02ab554, 0D3fe268a900000000, 0D3e801a5b6983a268, 0D3fe27f2600000000, 0D3e6273d1b350efc8, 0D3fe2958e00000000, 0D3e864c238c37b0c6, 0D3fe2abe200000000, 0D3e6aded07370a300, 0D3fe2c22100000000, 0D3e878091197eb47e, 0D3fe2d84c00000000, 0D3e74b0f245e0dabc, 0D3fe2ee6200000000, 0D3e9080d9794e2eaf, 0D3fe3046400000000, 0D3e8d4ec242b60c76, 0D3fe31a5200000000, 0D3e4221d2f940caa0, 0D3fe3302b00000000, 0D3e7cdbc42b2bba5c, 0D3fe345f000000000, 0D3e6cce37bb440840, 0D3fe35ba000000000, 0D3e96c1d999cf1dd0, 0D3fe3713d00000000, 0D3e5bed8a07eb0870, 0D3fe386c500000000, 0D3e769ed88f490e3c, 0D3fe39c3900000000, 0D3e6cd41719b73ef0, 0D3fe3b19800000000, 0D3e9cbc4ac95b41b7, 0D3fe3c6e400000000, 0D3e9238f1b890f5d7, 0D3fe3dc1c00000000, 0D3e750c4282259cc4, 0D3fe3f13f00000000, 0D3e9713d2de87b3e2, 0D3fe4064f00000000, 0D3e81d5a7d2255276, 0D3fe41b4a00000000, 0D3e9c0dfd48227ac1, 0D3fe4303200000000, 0D3e91c964dab76753, 0D3fe4450600000000, 0D3e86de56d5704496, 0D3fe459c600000000, 0D3e84aeb71fd19968, 0D3fe46e7200000000, 0D3e8fbf91c57b1918, 0D3fe4830a00000000, 0D3e9d6bef7fbe5d9a, 0D3fe4978f00000000, 0D3e9464d3dc249066, 0D3fe4ac0000000000, 0D3e9638e2ec4d9073, 0D3fe4c05e00000000, 0D3e716f4a7247ea7c, 0D3fe4d4a800000000, 0D3e31a0a740f1d440, 0D3fe4e8de00000000, 0D3e86edbb0114a33c, 0D3fe4fd0100000000, 0D3e7dbee8bf1d513c, 0D3fe5111000000000, 0D3e95b8bdb0248f73, 0D3fe5250c00000000, 0D3e97de3d3f5eac64, 0D3fe538f500000000, 0D3e8ee24187ae448a, 0D3fe54cca00000000, 0D3e9e06c591ec5192, 0D3fe5608d00000000, 0D3e74e3861a332738, 0D3fe5743c00000000, 0D3e7a9599dcc2bfe4, 0D3fe587d800000000, 0D3e6f732fbad43468, 0D3fe59b6000000000, 0D3e9eb9f573b727d9, 0D3fe5aed600000000, 0D3e98b212a2eb9897, 0D3fe5c23900000000, 0D3e9384884c167215, 0D3fe5d58900000000, 0D3e90e2d363020051, 0D3fe5e8c600000000, 0D3e92820879fbd022, 0D3fe5fbf000000000, 0D3e9a1ab9893e4b30, 0D3fe60f0800000000, 0D3e82d1b817a24478, 0D3fe6220d00000000, 0D3e615d7b8ded4878, 0D3fe634ff00000000, 0D3e78968f9db3a5e4, 0D3fe647de00000000, 0D3e971c4171fe135f, 0D3fe65aab00000000, 0D3e96d80f605d0d8c, 0D3fe66d6600000000, 0D3e7c91f043691590, 0D3fe6800e00000000, 0D3e839f8a15fce2b2, 0D3fe692a400000000, 0D3e455beda9d94b80, 0D3fe6a52700000000, 0D3e8b12c15d60949a, 0D3fe6b79800000000, 0D3e924167b312bfe3, 0D3fe6c9f700000000, 0D3e90ab8633070277, 0D3fe6dc4400000000, 0D3e854554ebbc80ee, 0D3fe6ee7f00000000, 0D3e60204aef5a4bb8, 0D3fe700a700000000, 0D3e98af08c679cf2c, 0D3fe712be00000000, 0D3e90852a330ae6c8, 0D3fe724c300000000, 0D3e86d3eb9ec32916, 0D3fe736b600000000, 0D3e8685cb7fcbbafe, 0D3fe7489700000000, 0D3e91f751c1e0bd95, 0D3fe75a6700000000, 0D3e5705b1b0f72560, 0D3fe76c2400000000, 0D3e9b98d8d808ca92, 0D3fe77dd100000000, 0D3e62ea22c75cc980, 0D3fe78f6b00000000, 0D3e97aba62bca0350, 0D3fe7a0f400000000, 0D3e9d73833442278c, 0D3fe7b26c00000000, 0D3e95a5ca1fb18bf9, 0D3fe7c3d300000000, 0D3e61a6092b6ecf28, 0D3fe7d52800000000, 0D3e744fd049aac104, 0D3fe7e66c00000000, 0D3e2c114fd8df5180, 0D3fe7f79e00000000, 0D3e95972f130feae5, 0D3fe808c000000000, 0D3e7ca034a55fe198, 0D3fe819d000000000, 0D3e96e2b149990227, 0D3fe82ad000000000, 0D3e7b00000294592c, 0D3fe83bbe00000000, 0D3e98b9bdc442620e, 0D3fe84c9c00000000, 0D3e8d94fdfabf3e4e, 0D3fe85d6900000000, 0D3e85db30b145ad9a, 0D3fe86e2500000000, 0D3e8e3e1eb95022b0, 0D3fe87ed000000000, 0D3e9d5b8b45442bd6, 0D3fe88f6b00000000, 0D3e97a046231ecd2e, 0D3fe89ff500000000, 0D3e9feafe3ef55232, 0D3fe8b06f00000000, 0D3e9839e7bfd78267, 0D3fe8c0d900000000, 0D3e645cf49d6fa900, 0D3fe8d13200000000, 0D3e4be3132b27f380, 0D3fe8e17a00000000, 0D3e9533980bb84f9f, 0D3fe8f1b300000000, 0D3e5889e2ce3ba390, 0D3fe901db00000000, 0D3e7f7778c3ad0cc8, 0D3fe911f300000000, 0D3e846660cec4eba2, 0D3fe921fb00000000, 0D3e85110b4611a626};

function &__amd_amp_Facos_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fasin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fatan_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fatan2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Fceil_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fcos_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fcosh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fexp2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ffabs_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ffloor_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ffrexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Ffmax_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Ffmin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Ffmod_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Fisfinite_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fisinf_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fisnan_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fldexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Flog_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Flog10_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Flog2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fmodf_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Fpow_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Fround_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Frsqrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fsignbit_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fsignbit_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Fsin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fsinh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fsqrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ftan_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ftanh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ftrunc_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Fsincos_f32() (arg_f32 %arg_val0, arg_u32 %arg_val1, arg_u32 %arg_val2);

function &__amd_amp_Pacos_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pacos_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pacosh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pacosh_f64(arg_f64 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pasin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pasin_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pasinh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pasinh_f64(arg_f64 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Patan_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Patan_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Patan2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Patan2_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Patanh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Patanh_f64(arg_f64 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pcbrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pcbrt_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pceil_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pceil_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pcopysign_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pcopysign_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pcos_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pcos_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pcosh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pcosh_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pcospi_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pcospi_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Perf_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Perf_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Perfc_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Perfc_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Perfcinv_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Perfcinv_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Perfinv_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Perfinv_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pexp_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pexp2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pexp2_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pexp10_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pexp10_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pexpm1_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pexpm1_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pfabs_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pfabs_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pfdim_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pfdim_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pfloor_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pfloor_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pfma_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1, arg_f32 %arg_val2);

function &__amd_amp_Pfma_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1, arg_f64 %arg_val2);

function &__amd_amp_Pfmax_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pfmax_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pfmin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pfmin_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pfmod_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pfmod_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pfpclassify_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pfpclassify_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pfrexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Pfrexp_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Phypot_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Phypot_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pilogb_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pilogb_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pisfinite_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pisfinite_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pisinf_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pisinf_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pisnan_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pisnan_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pisnormal_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pisnormal_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pldexp_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pldexp_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Plgamma_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plgamma_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Plog_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plog_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Plog10_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plog10_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Plog1p_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plog1p_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Plog2_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plog2_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Plogb_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Plogb_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pmodf_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Pmodf_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Pnan_f32(arg_f32 %ret_r0) (arg_u32 %arg_val0);

function &__amd_amp_Pnan_f64(arg_f64 %ret_r0) (arg_u32 %arg_val0);

function &__amd_amp_Pnearbyint_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pnearbyint_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pnextafter_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pnextafter_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Ppow_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Ppow_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Prcbrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Prcbrt_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Premainder_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Premainder_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Premquo_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1, arg_u32 %arg_val2);

function &__amd_amp_Premquo_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1, arg_u32 %arg_val2);

function &__amd_amp_Pround_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Pround_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Prsqrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Prsqrt_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Pscalb_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_f32 %arg_val1);

function &__amd_amp_Pscalb_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_f64 %arg_val1);

function &__amd_amp_Pscalbn_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Pscalbn_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0, arg_u32 %arg_val1);

function &__amd_amp_Psignbit_f32(arg_u32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Psignbit_f64(arg_u32 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Psin_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Psin_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Psincos_f32() (arg_f32 %arg_val0, arg_u32 %arg_val1, arg_u32 %arg_val2);

function &__amd_amp_Psincos_f64() (arg_f64 %arg_val0, arg_u32 %arg_val1, arg_u32 %arg_val2);

function &__amd_amp_Psinh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Psinh_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Psinpi_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Psinpi_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Psqrt_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Psqrt_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Ptan_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ptan_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Ptanh_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ptanh_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Ptanpi_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ptanpi_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Ptgamma_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ptgamma_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &__amd_amp_Ptrunc_f32(arg_f32 %ret_r0) (arg_f32 %arg_val0);

function &__amd_amp_Ptrunc_f64(arg_f64 %ret_r0) (arg_f64 %arg_val0);

function &abort() ();

function &__amd_amp_Facos_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Facos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	sub_f32	 $s3, 0F3f800000, $s3 ;
	mul_f32	 $s3, $s3, 0F3f000000 ;
	shr_u32	 $s5, $s2, 23 ;
	add_u32	 $s5, $s5, -127 ;
	cmp_gt_b1_s32	 $c0, $s5, -2 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	sqrt_f32	 $s4, $s3 ;
	mov_b32	$s6, $s4 ;
	and_b32	 $s6, $s6, -65536 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s6, $s7, $s3 ;
	add_f32	 $s8, $s4, $s6 ;
	div_f32	 $s7, $s7, $s8 ;
	mad_f32	 $s8, $s3, 0Fbb81ce6b, 0Fbc5b3fe1 ;
	mad_f32	 $s8, $s3, $s8, 0Fbd678bdd ;
	mad_f32	 $s8, $s3, $s8, 0F3e3c94dc ;
	mad_f32	 $s9, $s3, 0Fbf561f0d, 0F3f8d6fa5 ;
	div_f32	 $s8, $s8, $s9 ;
	mul_f32	 $s3, $s3, $s8 ;
	mad_f32	 $s7, $s4, $s3, $s7 ;
	add_f32	 $s6, $s6, $s7 ;
	add_f32	 $s6, $s6, $s6 ;
	mad_f32	 $s7, $s4, $s3, 0Fa48d3132 ;
	add_f32	 $s4, $s4, $s7 ;
	mad_f32	 $s4, $s4, 0Fc0000000, 0F40490fdb ;
	cmp_ne_b1_u32	 $c1, $s1, $s2 ;
	cmov_b32	 $s4, $c1, $s4, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s0, $s3, 0F248d3132 ;
	sub_f32	 $s0, $s0, $s3 ;
	sub_f32	 $s0, 0F3fc90fdb, $s0 ;
	cmov_b32	 $s0, $c0, $s4, $s0 ;
	cmp_gt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s0 ;
	cmp_eq_b1_u32	 $c0, $s1, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F00000000, $s0 ;
	cmp_eq_b1_u32	 $c0, $s1, -1082130432 ;
	cmov_b32	 $s0, $c0, 0F40490fdb, $s0 ;
	cmp_lt_b1_s32	 $c0, $s5, -26 ;
	cmov_b32	 $s0, $c0, 0F3fc90fdb, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fasin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fasin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	sub_f32	 $s5, 0F3f800000, $s3 ;
	mul_f32	 $s5, $s5, 0F3f000000 ;
	shr_u32	 $s6, $s2, 23 ;
	add_u32	 $s6, $s6, -127 ;
	cmp_gt_b1_s32	 $c0, $s6, -2 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	sqrt_f32	 $s5, $s4 ;
	mov_b32	$s7, $s5 ;
	and_b32	 $s7, $s7, -65536 ;
	neg_f32	 $s8, $s7 ;
	mad_f32	 $s8, $s8, $s7, $s4 ;
	add_f32	 $s9, $s5, $s7 ;
	div_f32	 $s8, $s8, $s9 ;
	mad_f32	 $s8, $s8, 0Fc0000000, 0F33a22168 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s9, $s4, 0Fbb81ce6b, 0Fbc5b3fe1 ;
	mad_f32	 $s9, $s4, $s9, 0Fbd678bdd ;
	mad_f32	 $s9, $s4, $s9, 0F3e3c94dc ;
	mad_f32	 $s10, $s4, 0Fbf561f0d, 0F3f8d6fa5 ;
	div_f32	 $s9, $s9, $s10 ;
	mul_f32	 $s4, $s4, $s9 ;
	add_f32	 $s5, $s5, $s5 ;
	mad_f32	 $s5, $s5, $s4, $s8 ;
	mad_f32	 $s7, $s7, 0Fc0000000, 0F3f490fda ;
	sub_f32	 $s5, $s5, $s7 ;
	sub_f32	 $s5, 0F3f490fda, $s5 ;
	mad_f32	 $s3, $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c0, $s5, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	cmp_gt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s3, $c0, 0F7fc00000, $s3 ;
	or_b32	 $s1, $s1, 1070141403 ;
	cmp_eq_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmp_lt_b1_s32	 $c0, $s6, -14 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fatan_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fatan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mad_f32	 $s4, $s3, 0F3fc00000, 0F3f800000 ;
	add_f32	 $s5, $s3, 0Fbfc00000 ;
	div_f32	 $s4, $s5, $s4 ;
	cmp_lt_b1_u32	 $c0, $s2, 1075576832 ;
	frcp_f32	 $s5, $s3 ;
	neg_f32	 $s5, $s5 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	add_f32	 $s5, $s3, 0F3f800000 ;
	add_f32	 $s6, $s3, 0Fbf800000 ;
	div_f32	 $s5, $s6, $s5 ;
	cmp_lt_b1_u32	 $c1, $s2, 1066926080 ;
	cmov_b32	 $s4, $c1, $s5, $s4 ;
	add_f32	 $s5, $s3, 0F40000000 ;
	mad_f32	 $s6, $s3, 0F40000000, 0Fbf800000 ;
	div_f32	 $s5, $s6, $s5 ;
	cmp_lt_b1_u32	 $c2, $s2, 1060110336 ;
	cmov_b32	 $s4, $c2, $s5, $s4 ;
	cmp_lt_b1_u32	 $c3, $s2, 1054867456 ;
	cmov_b32	 $s3, $c3, $s3, $s4 ;
	mul_f32	 $s4, $s3, $s3 ;
	mad_f32	 $s5, $s4, 0F3e993f1f, 0F3f8e2c3d ;
	mad_f32	 $s5, $s4, $s5, 0F3f63bbe5 ;
	mad_f32	 $s6, $s4, 0F3b9a3b54, 0F3e44f0ba ;
	mad_f32	 $s6, $s4, $s6, 0F3e97d299 ;
	div_f32	 $s5, $s6, $s5 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s3, $s4, $s3 ;
	cmov_b32	 $s4, $c0, 0F3f7b985f, 0F3fc90fdb ;
	cmov_b32	 $s4, $c1, 0F3f490fdb, $s4 ;
	cmov_b32	 $s4, $c2, 0F3eed6338, $s4 ;
	cmov_b32	 $s4, $c3, 0F00000000, $s4 ;
	sub_f32	 $s3, $s4, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s1, $s1, 1070141403 ;
	cmp_lt_b1_u32	 $c0, $s2, 2139095041 ;
	cmov_b32	 $s1, $c0, $s1, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1283457024 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	cmp_lt_b1_u32	 $c0, $s2, 905969664 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fatan2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Fatan2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	ld_arg_f32	$s4, [%arg_val1] ;
	add_ftz_f32	$s4, $s4, 0F00000000 ;
	mov_b32	$s5, $s4 ;
	and_b32	 $s6, $s5, 2147483647 ;
	mov_b32	$s7, $s6 ;
	max_f32	 $s8, $s7, $s3 ;
	min_f32	 $s9, $s7, $s3 ;
	div_f32	 $s8, $s9, $s8 ;
	mad_f32	 $s9, $s8, 0F43800000, 0F3f000000 ;
	cvt_zeroi_s32_f32	$s9, $s9 ;
	cvt_near_f32_s32	$s10, $s9 ;
	mad_f32	 $s11, $s8, $s10, 0F43800000 ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s10, $s8, 0F43800000, $s10 ;
	div_f32	 $s10, $s10, $s11 ;
	mul_f32	 $s11, $s10, $s10 ;
	mul_f32	 $s11, $s10, $s11 ;
	mad_f32	 $s10, $s11, 0Fbeaaaaab, $s10 ;
	add_u32	 $s9, $s9, -16 ;
	max_s32	 $s9, $s9, 0 ;
	min_s32	 $s9, $s9, 240 ;
	shl_u32	 $s9, $s9, 2 ;
	//ldas_global_u32	$s11, [&__math32_ATAN2_TABLE_JBY256] ;
	add_u32	 $s9, $s11, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	add_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s10, $s8, $s8 ;
	mul_f32	 $s11, $s8, $s10 ;
	mad_f32	 $s12, $s10, 0Fbe124924, 0F3e4ccccd ;
	neg_f32	 $s12, $s12 ;
	mad_f32	 $s10, $s10, $s12, 0F3eaaaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s10, $s11, $s10, $s8 ;
	cmp_gt_b1_f32	 $c0, $s8, 0F3d800000 ;
	cmov_b32	 $s8, $c0, $s9, $s10 ;
	sub_f32	 $s9, 0F3fc90fdb, $s8 ;
	cmp_lt_b1_f32	 $c0, $s7, $s3 ;
	cmov_b32	 $s3, $c0, $s9, $s8 ;
	sub_f32	 $s7, 0F40490fdb, $s3 ;
	cmp_ne_b1_u32	 $c0, $s5, $s6 ;
	cmov_b32	 $s3, $c0, $s7, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s5, $s1, 1078530011 ;
	cmov_b32	 $s5, $c0, $s5, $s0 ;
	cmp_eq_b1_f32	 $c1, $s0, 0F00000000 ;
	cmov_b32	 $s3, $c1, $s5, $s3 ;
	cmov_b32	 $s5, $c0, 1075235812, 1061752795 ;
	or_b32	 $s1, $s1, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 2139095040 ;
	cmp_eq_b1_u32	 $c1, $s2, 2139095040 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095040 ;
	cmov_b32	 $s1, $c0, $s4, $s1 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fceil_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fceil_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_upi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fcos_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fcos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, 2147483647 ;
	mov_b32	$s2, $s1 ;
	cmp_geu_b1_f32	 $c0, $s2, 0F4b000000 ;
	cbr	$c0, @BB5_2 ;
// BB#1:
	mad_f32	 $s0, $s2, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s0, $s0 ;
	mul_f32	 $s3, $s0, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s0, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s5 ;
	sub_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	add_f32	 $s2, $s5, $s2 ;
	mul_f32	 $s3, $s0, 0F33a22168 ;
	sub_f32	 $s4, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s0, 0F33a22168, $s3 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s4, $s2 ;
	mul_f32	 $s3, $s0, 0F27c234c4 ;
	sub_f32	 $s4, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s4, $s2 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s0, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s0, $s0 ;
	brn	@BB5_3 ;
@BB5_2:
	and_b32	 $s0, $s0, 8388607 ;
	or_b32	 $s0, $s0, 8388608 ;
	mul_hi_u32	 $s2, $s0, -28220501 ;
	mad_u32	 $s3, $s0, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s0, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s0, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s0, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s0, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s0, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s0, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s0, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s0, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s0, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s0, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s0, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s1, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s9, $c4, $s13, $s2 ;
	shl_u32	 $s2, $s9, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s2, $s10 ;
	shr_s32	 $s13, $s2, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s0, $s0, -28220501 ;
	cmov_b32	 $s0, $c0, $s0, $s3 ;
	cmov_b32	 $s0, $c1, $s0, $s4 ;
	cmov_b32	 $s0, $c2, $s0, $s5 ;
	cmov_b32	 $s0, $c3, $s0, $s6 ;
	shr_u32	 $s3, $s0, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s0, $s0, 30 ;
	or_b32	 $s0, $s4, $s0 ;
	xor_b32	 $s0, $s13, $s0 ;
	shr_u32	 $s0, $s0, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s0, $s5, $s0 ;
	shr_u32	 $s5, $s0, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s0, $s0, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s0, $s4, $s0 ;
	shr_u32	 $s0, $s0, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s2, $s2, -2147483648 ;
	or_b32	 $s4, $s4, $s2 ;
	or_b32	 $s0, $s4, $s0 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s2, $s4, $s2 ;
	or_b32	 $s2, $s2, $s3 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	fma_f32	 $s2, $s2, 0F33a22168, $s4 ;
	fma_f32	 $s0, $s0, 0F3fc90fda, $s2 ;
	add_f32	 $s2, $s3, $s0 ;
	sub_f32	 $s3, $s2, $s3 ;
	sub_f32	 $s3, $s0, $s3 ;
	shr_u32	 $s0, $s9, 30 ;
	extract_u32	 $s4, $s9, 29, 1 ;
	add_u32	 $s0, $s4, $s0 ;
@BB5_3:                                 // %__cos_f32.exit
	neg_f32	 $s4, $s2 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s2, $s2 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s2 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s2 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s2, $s2, $s3 ;
	neg_f32	 $s2, $s2 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_u32	 $c0, $s0, 1 ;
	cvt_u32_b1	$s0, $c0 ;
	shl_u32	 $s0, $s0, 31 ;
	xor_b32	 $s0, $s2, $s0 ;
	cmp_gt_b1_u32	 $c0, $s1, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fcosh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fcosh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	add_f32	 $s2, $s1, 0Fbf317280 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F00000000 ;
	cmov_b32	 $s3, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s3, $s2, 0F3fb8aa3b, $s3 ;
	cvt_zeroi_s32_f32	$s3, $s3 ;
	cvt_near_f32_s32	$s4, $s3 ;
	mad_f32	 $s5, $s4, 0Fbf317180, $s2 ;
	mul_f32	 $s4, $s4, 0Fb717f7d1 ;
	add_f32	 $s6, $s5, $s4 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s8, $s7, $s8, 0F388ab355 ;
	mad_f32	 $s8, $s7, $s8, 0Fbb360b61 ;
	mad_f32	 $s8, $s7, $s8, 0F3e2aaaab ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s7, $s7, $s8, $s6 ;
	mul_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s7, 0F40000000, $s7 ;
	div_f32	 $s6, $s6, $s7 ;
	neg_f32	 $s4, $s4 ;
	sub_f32	 $s4, $s4, $s6 ;
	sub_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	shl_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s4, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0Fc2aeac4f ;
	cmov_b32	 $s3, $c0, 0F00000000, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F42b17218 ;
	cmov_b32	 $s3, $c0, $s3, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s2, $s2 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	mad_f32	 $s2, 0F36d01087, $s2, $s2 ;
	cvt_zeroi_s32_f32	$s3, $s1 ;
	cmp_gt_b1_u32	 $c0, $s3, 36 ;
	cmov_b32	 $s3, $c0, 0, $s3 ;
	cvt_near_f32_s32	$s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	mul_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s4, $s5 ;
	mad_f32	 $s7, $s5, 0F2b5a092d, 0F2f308e59 ;
	mad_f32	 $s7, $s5, $s7, 0F32d73230 ;
	mad_f32	 $s7, $s5, $s7, 0F3638ef1d ;
	mad_f32	 $s7, $s5, $s7, 0F39500d01 ;
	mad_f32	 $s7, $s5, $s7, 0F3c088889 ;
	mad_f32	 $s7, $s5, $s7, 0F3e2aaaab ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2d4cc25c, 0F310f72b2 ;
	mad_f32	 $s6, $s5, $s6, 0F3493f283 ;
	mad_f32	 $s6, $s5, $s6, 0F37d00d01 ;
	mad_f32	 $s6, $s5, $s6, 0F3ab60b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mad_f32	 $s6, $s5, $s6, 0F3f000000 ;
	mad_f32	 $s5, $s6, $s5, 0F3f800000 ;
	shl_u32	 $s3, $s3, 3 ;
	//ldas_global_u32	$s6, [&__math32_SINHCOSH_TBL] ;
	add_u32	 $s3, $s6, $s3 ;
	ld_readonly_f32	$s6, [$s3 + 4] ;
	mul_f32	 $s5, $s6, $s5 ;
	ld_readonly_f32	$s3, [$s3] ;
	mad_f32	 $s3, $s3, $s4, $s5 ;
	cmp_ltu_b1_f32	 $c0, $s1, 0F41051592 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cmp_ltu_b1_f32	 $c0, $s1, 0F42b2d4fd ;
	cmov_b32	 $s1, $c0, $s2, 0F7f800000 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095040 ;
	cmov_b32	 $s1, $c0, 0F7fc00000, $s1 ;
	cmp_lt_b1_u32	 $c0, $s0, 947912704 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cmp_lt_b1_f32	 $c0, $s0, 0F00000000 ;
	cmov_b32	 $s1, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s1, $s0, 0F3fb8aa3b, $s1 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	cvt_near_f32_s32	$s2, $s1 ;
	mad_f32	 $s3, $s2, 0Fbf317180, $s0 ;
	mul_f32	 $s2, $s2, 0Fb717f7d1 ;
	add_f32	 $s4, $s3, $s2 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s6, $s5, $s6, 0F388ab355 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3e2aaaab ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s5, $s5, $s6, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s5, 0F40000000, $s5 ;
	div_f32	 $s4, $s4, $s5 ;
	neg_f32	 $s2, $s2 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s2, 0F3f800000, $s2 ;
	shl_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2aeac4f ;
	cmov_b32	 $s1, $c0, 0F00000000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F42b17218 ;
	cmov_b32	 $s1, $c0, $s1, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fexp2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fexp2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_neari_f32_f32	 $s1, $s0 ;
	sub_f32	 $s2, $s0, $s1 ;
	mul_f32	 $s3, $s2, 0F3717f7d1 ;
	mul_f32	 $s2, $s2, 0F3f317180 ;
	add_f32	 $s4, $s2, $s3 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s6, $s5, $s6, 0F388ab355 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3e2aaaab ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s5, $s5, $s6, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s5, 0F40000000, $s5 ;
	div_f32	 $s4, $s4, $s5 ;
	neg_f32	 $s3, $s3 ;
	sub_f32	 $s3, $s3, $s4 ;
	sub_f32	 $s2, $s3, $s2 ;
	sub_f32	 $s2, 0F3f800000, $s2 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	shl_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2fc0000 ;
	cmov_b32	 $s1, $c0, 0F00000000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F43000000 ;
	cmov_b32	 $s1, $c0, $s1, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffabs_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ffabs_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	abs_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffloor_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ffloor_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_downi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffrexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Ffrexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s2, 8388608 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -152, -126 ;
	or_b32	 $s4, $s2, 226492416 ;
	add_f32	 $s4, $s4, 0F8d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	shr_s32	 $s4, $s2, 23 ;
	add_u32	 $s3, $s4, $s3 ;
	cmp_ne_b1_u32	 $c0, $s3, 129 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s3, $c0, $s3, 0 ;
	ld_arg_u32	$s4, [%arg_val1] ;
	st_global_u32	$s3, [$s4] ;
	and_b32	 $s2, $s2, 8388607 ;
	and_b32	 $s1, $s1, -2147483648 ;
	or_b32	 $s1, $s1, $s2 ;
	or_b32	 $s1, $s1, 1056964608 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffmax_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Ffmax_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	max_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffmin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Ffmin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	min_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ffmod_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Ffmod_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	and_b32	 $s1, $s0, 2147483647 ;
	shr_u32	 $s2, $s1, 23 ;
	ld_arg_f32	$s3, [%arg_val0] ;
	add_ftz_f32	$s3, $s3, 0F00000000 ;
	and_b32	 $s4, $s3, 2147483647 ;
	shr_u32	 $s5, $s4, 23 ;
	sub_u32	 $s6, $s5, $s2 ;
	cmp_le_b1_s32	 $c0, $s6, 3 ;
	and_b32	 $s7, $s0, 8388607 ;
	or_b32	 $s7, $s7, 1065353216 ;
	and_b32	 $s8, $s3, 8388607 ;
	or_b32	 $s8, $s8, 1065353216 ;
	cbr	$c0, @BB14_2 ;
@BB14_1:                                // %.preheader1
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -4 ;
	cmp_gt_b1_s32	 $c0, $s6, 3 ;
	cbr	$c0, @BB14_1 ;
@BB14_2:                                // %.loopexit
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	cmp_le_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB14_4 ;
@BB14_3:                                // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_u32	 $s6, $s6, -1 ;
	cmp_gt_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB14_3 ;
@BB14_4:                                // %__fmod_f32.exit
	mov_b32	$s6, $s4 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cmov_b32	 $s2, $c0, $s6, $s8 ;
	and_b32	 $s0, $s0, 2139095040 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s0 ;
	mul_f32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s4, $s1 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	xor_b32	 $s2, $s4, $s3 ;
	xor_b32	 $s0, $s2, $s0 ;
	cmp_lt_b1_u32	 $c0, $s4, 2139095040 ;
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_lt_b1_u32	 $c1, $s1, 2139095041 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fisfinite_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fisfinite_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 504 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fisinf_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fisinf_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fisnan_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fisnan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fldexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Fldexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	cvt_zeroi_s32_f32	$s0, $s0 ;
	ld_arg_f32	$s1, [%arg_val0] ;
	extract_u32	 $s2, $s1, 23, 8 ;
	add_u32	 $s3, $s2, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s4, $s2 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 255 ;
	cmp_ne_b1_u32	 $c0, $s0, 255 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmp_ne_b1_u32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	and_b32	 $s3, $s1, 8388607 ;
	cmov_b32	 $s4, $c0, $s3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 255 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	shl_u32	 $s0, $s0, 23 ;
	cmov_b32	 $s0, $c0, 2139095040, $s0 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	and_b32	 $s1, $s1, -2147483648 ;
	or_b32	 $s0, $s0, $s1 ;
	or_b32	 $s0, $s0, $s3 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Flog_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Flog_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s3, $s2, 0F3805fdf4, $s4 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	add_f32	 $s4, $s4, $s3 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Flog10_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Flog10_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mul_f32	 $s3, $s2, 0F39826a13 ;
	mad_f32	 $s3, $s4, 0Fbede5bd9, $s3 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOG10_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3e9a0000, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s5, $s5, -65536 ;
	sub_f32	 $s6, $s3, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, 0F3a37b152 ;
	mad_f32	 $s6, $s5, 0F3a37b152, $s6 ;
	mad_f32	 $s4, $s4, 0F3ede0000, $s6 ;
	mad_f32	 $s4, $s5, 0F3ede0000, $s4 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Flog2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Flog2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOG2_TBL] ;
	add_u32	 $s5, $s6, $s5 ;
	ld_readonly_f32	$s6, [$s5 + 4] ;
	mad_f32	 $s4, $s4, 0Fbfb8aa3b, $s6 ;
	ld_readonly_f32	$s5, [$s5] ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	add_f32	 $s2, $s5, $s2 ;
	add_f32	 $s2, $s2, $s4 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s5, $s5, -65536 ;
	sub_f32	 $s6, $s3, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, 0F3baa3b29 ;
	mad_f32	 $s6, $s5, 0F3baa3b29, $s6 ;
	mad_f32	 $s4, $s4, 0F3fb80000, $s6 ;
	mad_f32	 $s4, $s5, 0F3fb80000, $s4 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fmodf_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Fmodf_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	sub_u32	 $s2, 150, $s2 ;
	shl_u32	 $s2, -1, $s2 ;
	and_b32	 $s2, $s2, $s1 ;
	and_b32	 $s3, $s1, -2147483648 ;
	extract_u32	 $s4, $s1, 23, 8 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s5, $s4, 31 ;
	cvt_b1_u32	$c0, $s5 ;
	cmov_b32	 $s5, $c0, $s3, $s2 ;
	cmp_gt_b1_s32	 $c1, $s4, 22 ;
	cmov_b32	 $s4, $c1, $s1, $s5 ;
	ld_arg_u32	$s5, [%arg_val1] ;
	st_global_u32	$s4, [$s5] ;
	sub_f32	 $s0, $s0, $s2 ;
	or_b32	 $s0, $s0, $s3 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	cmov_b32	 $s0, $c1, $s3, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fpow_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Fpow_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, 2147483647 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOG_INV_TBL_EP] ;
	add_u32	 $s6, $s6, $s5 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	mul_f32	 $s7, $s4, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s4, $s7 ;
	mad_f32	 $s8, $s6, 0F3e800000, 0F3eaaaaab ;
	mad_f32	 $s8, $s6, $s8, 0F3f000000 ;
	mul_f32	 $s9, $s6, $s6 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s4, $s4, $s6 ;
	add_f32	 $s4, $s4, $s7 ;
	add_f32	 $s4, $s8, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_s32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s3, $s2, 0F3805fdf4, $s4 ;
	//ldas_global_u32	$s4, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s4, $s5 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	mov_b32	$s5, $s1 ;
	sub_f32	 $s5, 0F3f800000, $s5 ;
	mul_f32	 $s7, $s5, $s5 ;
	mul_f32	 $s8, $s7, $s5 ;
	mad_f32	 $s9, $s5, 0F3e124925, 0F3e2aaaab ;
	mad_f32	 $s9, $s5, $s9, 0F3e4ccccd ;
	mad_f32	 $s9, $s5, $s9, 0F3e800000 ;
	mad_f32	 $s9, $s5, $s9, 0F3eaaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	neg_f32	 $s9, $s8 ;
	abs_f32	 $s10, $s5 ;
	cmp_lt_b1_f32	 $c0, $s10, 0F3d800000 ;
	cmov_b32	 $s9, $c0, $s9, $s3 ;
	sub_f32	 $s3, $s3, $s6 ;
	mul_f32	 $s7, $s7, 0Fbf000000 ;
	sub_f32	 $s8, $s7, $s8 ;
	cmov_b32	 $s10, $c0, $s8, $s3 ;
	neg_f32	 $s6, $s6 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	sub_f32	 $s6, $s10, $s6 ;
	sub_f32	 $s6, $s9, $s6 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s4 ;
	add_f32	 $s3, $s2, $s3 ;
	sub_f32	 $s4, $s8, $s5 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	neg_f32	 $s4, $s5 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s2, $s10 ;
	add_f32	 $s2, $s6, $s2 ;
	mov_b32	$s4, $s3 ;
	and_b32	 $s4, $s4, -4096 ;
	sub_f32	 $s3, $s3, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	ld_arg_f32	$s3, [%arg_val1] ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s6, $s5, -4096 ;
	sub_f32	 $s3, $s3, $s6 ;
	mul_f32	 $s7, $s3, $s2 ;
	mad_f32	 $s3, $s4, $s3, $s7 ;
	mad_f32	 $s2, $s2, $s6, $s3 ;
	mad_f32	 $s3, $s6, $s4, $s2 ;
	neg_f32	 $s7, $s3 ;
	mad_f32	 $s4, $s6, $s4, $s7 ;
	add_f32	 $s2, $s4, $s2 ;
	mul_f32	 $s4, $s3, 0F42b8aa3b ;
	cvt_zeroi_s32_f32	$s4, $s4 ;
	cvt_near_f32_s32	$s6, $s4 ;
	mad_f32	 $s7, $s6, 0Fbc310000, $s3 ;
	mad_f32	 $s6, $s6, 0Fb7e42fef, $s7 ;
	add_f32	 $s6, $s6, $s2 ;
	mad_f32	 $s7, $s6, 0F3d2aaaab, 0F3e2aaaab ;
	mad_f32	 $s7, $s7, $s6, 0F3f000000 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	and_b32	 $s7, $s4, 63 ;
	shl_u32	 $s7, $s7, 3 ;
	//ldas_global_u32	$s8, [&__math32_EXP_TBL_EP] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	mad_f32	 $s8, $s8, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s6, $s7, $s6, $s8 ;
	add_f32	 $s6, $s6, $s7 ;
	shr_s32	 $s7, $s4, 6 ;
	add_u32	 $s8, $s7, 21 ;
	shl_u32	 $s8, 1, $s8 ;
	mul_f32	 $s8, $s6, $s8 ;
	shl_u32	 $s4, $s4, 17 ;
	and_b32	 $s4, $s4, -8388608 ;
	add_u32	 $s4, $s6, $s4 ;
	cmp_lt_b1_s32	 $c0, $s7, -125 ;
	cmov_b32	 $s4, $c0, $s8, $s4 ;
	cmp_gt_b1_f32	 $c0, $s2, 0Fb482e308 ;
	cmp_eq_b1_f32	 $c1, $s3, 0F42b17218 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_gt_b1_f32	 $c1, $s3, 0F42b17218 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, 0F7f800000, $s4 ;
	cmp_lt_b1_f32	 $c0, $s3, 0Fc2ce8ed0 ;
	cmov_b32	 $s2, $c0, 0F00000000, $s2 ;
	and_b32	 $s3, $s5, 2147483647 ;
	shr_u32	 $s4, $s3, 23 ;
	sub_u32	 $s6, 150, $s4 ;
	shl_u32	 $s6, 1, $s6 ;
	and_b32	 $s7, $s6, $s5 ;
	cmp_eq_b1_u32	 $c0, $s7, 0 ;
	cmov_b32	 $s7, $c0, 2, 1 ;
	add_u32	 $s6, $s6, -1 ;
	and_b32	 $s6, $s6, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	cmov_b32	 $s6, $c0, $s7, 0 ;
	add_u32	 $s4, $s4, -126 ;
	cmp_lt_b1_s32	 $c0, $s4, 1 ;
	cmov_b32	 $s6, $c0, 0, $s6 ;
	cmp_gt_b1_s32	 $c0, $s4, 24 ;
	cmov_b32	 $s4, $c0, 2, $s6 ;
	cmp_eq_b1_u32	 $c0, $s4, 1 ;
	cmp_ne_b1_u32	 $c1, $s0, $s1 ;
	and_b1	 $c1, $c0, $c1 ;
	cmov_b32	 $s6, $c1, 0Fbf800000, 0F3f800000 ;
	mul_f32	 $s2, $s2, $s6 ;
	cmp_eq_b1_u32	 $c1, $s0, $s1 ;
	cvt_u32_b1	$s6, $c1 ;
	or_b32	 $s6, $s4, $s6 ;
	cmp_eq_b1_u32	 $c2, $s6, 0 ;
	cmov_b32	 $s2, $c2, 2143289344, $s2 ;
	cmp_eq_b1_u32	 $c2, $s5, -8388608 ;
	cmp_lt_b1_u32	 $c3, $s1, 1065353216 ;
	and_b1	 $c4, $c3, $c2 ;
	cmov_b32	 $s2, $c4, 2139095040, $s2 ;
	cmp_gt_b1_u32	 $c4, $s1, 1065353216 ;
	and_b1	 $c5, $c4, $c2 ;
	cmov_b32	 $s2, $c5, 0, $s2 ;
	cmp_eq_b1_u32	 $c5, $s5, 2139095040 ;
	and_b1	 $c3, $c3, $c5 ;
	cmov_b32	 $s2, $c3, 0, $s2 ;
	and_b1	 $c3, $c4, $c5 ;
	cmov_b32	 $s2, $c3, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c3, $s5, $s3 ;
	cvt_u32_b1	$s6, $c3 ;
	or_b32	 $s6, $s6, $s1 ;
	cmp_eq_b1_u32	 $c4, $s6, 0 ;
	and_b1	 $c5, $c4, $c0 ;
	cmov_b32	 $s6, $c1, 2139095040, -8388608 ;
	cmov_b32	 $s2, $c5, $s6, $s2 ;
	cmp_ne_b1_u32	 $c5, $s4, 1 ;
	and_b1	 $c4, $c4, $c5 ;
	cmov_b32	 $s2, $c4, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	and_b1	 $c6, $c4, $c3 ;
	and_b1	 $c7, $c6, $c0 ;
	cmov_b32	 $s4, $c1, 0, -2147483648 ;
	cmov_b32	 $s2, $c7, $s4, $s2 ;
	and_b1	 $c1, $c6, $c5 ;
	cmov_b32	 $s2, $c1, 0, $s2 ;
	and_b1	 $c1, $c4, $c2 ;
	cmov_b32	 $s2, $c1, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c1, $s0, -1082130432 ;
	cmp_eq_b1_u32	 $c2, $s3, 2139095040 ;
	and_b1	 $c1, $c1, $c2 ;
	cmov_b32	 $s2, $c1, 1065353216, $s2 ;
	cmp_ne_b1_u32	 $c1, $s5, $s3 ;
	cmp_eq_b1_u32	 $c2, $s0, -8388608 ;
	and_b1	 $c4, $c2, $c1 ;
	and_b1	 $c6, $c4, $c0 ;
	cmov_b32	 $s2, $c6, -2147483648, $s2 ;
	and_b1	 $c4, $c4, $c5 ;
	cmov_b32	 $s2, $c4, 0, $s2 ;
	and_b1	 $c2, $c2, $c3 ;
	and_b1	 $c0, $c2, $c0 ;
	cmov_b32	 $s2, $c0, -8388608, $s2 ;
	and_b1	 $c0, $c2, $c5 ;
	cmov_b32	 $s2, $c0, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c0, $s0, 2139095040 ;
	and_b1	 $c1, $c0, $c1 ;
	cmov_b32	 $s2, $c1, 0, $s2 ;
	and_b1	 $c0, $c0, $c3 ;
	cmov_b32	 $s2, $c0, 2139095040, $s2 ;
	cmp_gt_b1_u32	 $c0, $s1, 2139095040 ;
	cmov_b32	 $s1, $c0, $s0, $s2 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095040 ;
	cmov_b32	 $s1, $c0, $s5, $s1 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s1, $c0, 0F3f800000, $s1 ;
	cmp_eq_b1_u32	 $c0, $s0, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fround_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fround_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_zeroi_f32_f32	 $s1, $s0 ;
	sub_f32	 $s2, $s0, $s1 ;
	abs_f32	 $s2, $s2 ;
	cmp_ltu_b1_f32	 $c0, $s2, 0F3f000000 ;
	and_b32	 $s0, $s0, -2147483648 ;
	or_b32	 $s0, $s0, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F00000000, $s0 ;
	add_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Frsqrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Frsqrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	frsqrt_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsignbit_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fsignbit_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	shr_u32	 $s0, $s0, 31 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsignbit_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Fsignbit_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	shr_u64	 $d0, $d0, 63 ;
	cvt_u32_u64	$s0, $d0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[1];
@__amd_amp_Fsin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	cbr	$c0, @BB28_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB28_3 ;
@BB28_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB28_3:                                // %__sin_f32.exit
	neg_f32	 $s4, $s1 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s1, $s1 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s1 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s1 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s4 ;
	ld_spill_u32	$s3, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s3, $s0, $s3 ;
	and_b32	 $s2, $s2, 2 ;
	cmp_gt_b1_u32	 $c0, $s2, 1 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 31 ;
	xor_b32	 $s2, $s3, $s2 ;
	xor_b32	 $s1, $s2, $s1 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsinh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fsinh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	add_f32	 $s4, $s3, 0Fbf317280 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F00000000 ;
	cmov_b32	 $s5, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s4, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s4 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c0, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F42b17218 ;
	cmov_b32	 $s5, $c0, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s4, $s4 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	mad_f32	 $s4, 0F36d01087, $s4, $s4 ;
	cvt_zeroi_s32_f32	$s5, $s3 ;
	cmp_gt_b1_u32	 $c0, $s5, 36 ;
	cmov_b32	 $s5, $c0, 0, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	sub_f32	 $s6, $s3, $s6 ;
	mul_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s6, $s7 ;
	mad_f32	 $s9, $s7, 0F2b5a092d, 0F2f308e59 ;
	mad_f32	 $s9, $s7, $s9, 0F32d73230 ;
	mad_f32	 $s9, $s7, $s9, 0F3638ef1d ;
	mad_f32	 $s9, $s7, $s9, 0F39500d01 ;
	mad_f32	 $s9, $s7, $s9, 0F3c088889 ;
	mad_f32	 $s9, $s7, $s9, 0F3e2aaaab ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	mad_f32	 $s8, $s7, 0F2d4cc25c, 0F310f72b2 ;
	mad_f32	 $s8, $s7, $s8, 0F3493f283 ;
	mad_f32	 $s8, $s7, $s8, 0F37d00d01 ;
	mad_f32	 $s8, $s7, $s8, 0F3ab60b61 ;
	mad_f32	 $s8, $s7, $s8, 0F3d2aaaab ;
	mad_f32	 $s8, $s7, $s8, 0F3f000000 ;
	mad_f32	 $s7, $s8, $s7, 0F3f800000 ;
	shl_u32	 $s5, $s5, 3 ;
	//ldas_global_u32	$s8, [&__math32_SINHCOSH_TBL] ;
	add_u32	 $s5, $s8, $s5 ;
	ld_readonly_f32	$s8, [$s5] ;
	mul_f32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s5, [$s5 + 4] ;
	mad_f32	 $s5, $s5, $s6, $s7 ;
	cmp_ltu_b1_f32	 $c0, $s3, 0F41051592 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cmp_ltu_b1_f32	 $c0, $s3, 0F42b2d4fd ;
	cmov_b32	 $s3, $c0, $s4, 2139095040 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	add_u32	 $s2, $s2, -947912704 ;
	cmp_gt_b1_u32	 $c0, $s2, 1191182336 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsqrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Fsqrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	sqrt_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ftan_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[1];
@__amd_amp_Ftan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	cbr	$c0, @BB31_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB31_3 ;
@BB31_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB31_3:                                // %__tan_f32.exit
	add_f32	 $s1, $s1, $s3 ;
	mul_f32	 $s3, $s1, $s1 ;
	mul_f32	 $s4, $s1, $s3 ;
	mad_f32	 $s5, $s3, 0F3c971480, 0Fbf039337 ;
	mad_f32	 $s5, $s3, $s5, 0F3f93f425 ;
	mad_f32	 $s3, $s3, 0Fbc8cedd3, 0F3ec54587 ;
	div_f32	 $s3, $s3, $s5 ;
	mad_f32	 $s1, $s4, $s3, $s1 ;
	frcp_f32	 $s3, $s1 ;
	neg_f32	 $s3, $s3 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	ld_spill_u32	$s2, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s2, $s0, $s2 ;
	xor_b32	 $s1, $s2, $s1 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ftanh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ftanh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	add_f32	 $s4, $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F00000000 ;
	cmov_b32	 $s5, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s4, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s4 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c0, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F42b17218 ;
	cmov_b32	 $s5, $c0, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s4, $s4 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	add_f32	 $s4, $s4, 0F3f800000 ;
	div_f32	 $s4, 0F40000000, $s4 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3f666666 ;
	mul_f32	 $s5, $s3, $s3 ;
	mad_f32	 $s6, $s5, 0F3e95c65f, 0F3f38db60 ;
	mad_f32	 $s7, $s5, 0F3eaf769c, 0F3f588550 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F382089d8, 0Fbaa18e00 ;
	mad_f32	 $s7, $s5, $s7, 0Fbe7679b1 ;
	mad_f32	 $s8, $s5, 0F384d2b7d, 0Fbabfbc9e ;
	mad_f32	 $s8, $s5, $s8, 0Fbe9058e0 ;
	cmov_b32	 $s7, $c0, $s8, $s7 ;
	div_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s5, $s3, $s5 ;
	mad_f32	 $s5, $s6, $s5, $s3 ;
	cmp_gtu_b1_f32	 $c0, $s3, 0F3f800000 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	cmp_gt_b1_f32	 $c0, $s3, 0F41051592 ;
	cmov_b32	 $s3, $c0, 1065353216, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	add_u32	 $s2, $s2, -956301312 ;
	cmp_gt_b1_u32	 $c0, $s2, 1182793728 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ftrunc_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ftrunc_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_zeroi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Fsincos_f32() (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1, 
	arg_u32 %arg_val2)
{
	spill_u32 %stack[3];
@__amd_amp_Fsincos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	ld_arg_u32	$s2, [%arg_val2] ;
	st_spill_u32	$s2, [%stack][8] ; // 4-byte Folded Reload
	ld_arg_u32	$s2, [%arg_val1] ;
	st_spill_u32	$s2, [%stack][4] ; // 4-byte Folded Reload
	cbr	$c0, @BB34_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB34_3 ;
@BB34_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB34_3:                                // %__sincos_pf32.exit
	neg_f32	 $s4, $s1 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s1, $s1 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s1 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s1 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s1 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	and_b32	 $s2, $s2, 2 ;
	cmp_gt_b1_u32	 $c1, $s2, 1 ;
	cvt_u32_b1	$s2, $c1 ;
	shl_u32	 $s2, $s2, 31 ;
	xor_b32	 $s3, $s3, $s2 ;
	cmp_gt_b1_u32	 $c1, $s0, 2139095039 ;
	cmov_b32	 $s3, $c1, 0F7fc00000, $s3 ;
	ld_spill_u32	$s5, [%stack][8] ; // 4-byte Folded Reload
	st_global_f32	$s3, [$s5] ;
	cmov_b32	 $s1, $c0, $s1, $s4 ;
	ld_spill_u32	$s3, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s0, $s0, $s3 ;
	xor_b32	 $s0, $s0, $s2 ;
	xor_b32	 $s0, $s0, $s1 ;
	cmov_b32	 $s0, $c1, 0F7fc00000, $s0 ;
	ld_spill_u32	$s1, [%stack][4] ; // 4-byte Folded Reload
	st_global_f32	$s0, [$s1] ;
	ret ;
};

function &__amd_amp_Pacos_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pacos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	sub_f32	 $s3, 0F3f800000, $s3 ;
	mul_f32	 $s3, $s3, 0F3f000000 ;
	shr_u32	 $s5, $s2, 23 ;
	add_u32	 $s5, $s5, -127 ;
	cmp_gt_b1_s32	 $c0, $s5, -2 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	sqrt_f32	 $s4, $s3 ;
	mov_b32	$s6, $s4 ;
	and_b32	 $s6, $s6, -65536 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s6, $s7, $s3 ;
	add_f32	 $s8, $s4, $s6 ;
	div_f32	 $s7, $s7, $s8 ;
	mad_f32	 $s8, $s3, 0Fbb81ce6b, 0Fbc5b3fe1 ;
	mad_f32	 $s8, $s3, $s8, 0Fbd678bdd ;
	mad_f32	 $s8, $s3, $s8, 0F3e3c94dc ;
	mad_f32	 $s9, $s3, 0Fbf561f0d, 0F3f8d6fa5 ;
	div_f32	 $s8, $s8, $s9 ;
	mul_f32	 $s3, $s3, $s8 ;
	mad_f32	 $s7, $s4, $s3, $s7 ;
	add_f32	 $s6, $s6, $s7 ;
	add_f32	 $s6, $s6, $s6 ;
	mad_f32	 $s7, $s4, $s3, 0Fa48d3132 ;
	add_f32	 $s4, $s4, $s7 ;
	mad_f32	 $s4, $s4, 0Fc0000000, 0F40490fdb ;
	cmp_ne_b1_u32	 $c1, $s1, $s2 ;
	cmov_b32	 $s4, $c1, $s4, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s0, $s3, 0F248d3132 ;
	sub_f32	 $s0, $s0, $s3 ;
	sub_f32	 $s0, 0F3fc90fdb, $s0 ;
	cmov_b32	 $s0, $c0, $s4, $s0 ;
	cmp_gt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s0 ;
	cmp_eq_b1_u32	 $c0, $s1, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F00000000, $s0 ;
	cmp_eq_b1_u32	 $c0, $s1, -1082130432 ;
	cmov_b32	 $s0, $c0, 0F40490fdb, $s0 ;
	cmp_lt_b1_s32	 $c0, $s5, -26 ;
	cmov_b32	 $s0, $c0, 0F3fc90fdb, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pacos_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pacos_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	mul_f64	 $d2, $d1, $d1 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d1 ;
	mul_f64	 $d3, $d3, 0D3fe0000000000000 ;
	shr_u64	 $d1, $d1, 32 ;
	cvt_u32_u64	$s0, $d1 ;
	shr_s32	 $s0, $s0, 20 ;
	add_u32	 $s0, $s0, -1023 ;
	cmp_gt_b1_s32	 $c0, $s0, -2 ;
	cmov_b64	 $d1, $c0, $d3, $d2 ;
	sqrt_f64	 $d2, $d1 ;
	mov_b64	$d3, $d2 ;
	and_b64	 $d3, $d3, -4294967296 ;
	neg_f64	 $d4, $d3 ;
	fma_f64	 $d4, $d4, $d3, $d1 ;
	add_f64	 $d5, $d2, $d3 ;
	div_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d5, $d1, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d ;
	fma_f64	 $d5, $d1, $d5, 0D40062021571dccfc ;
	fma_f64	 $d5, $d1, $d5, 0Dc00a4646f903cdea ;
	fma_f64	 $d5, $d1, $d5, 0D3ff5d6b12001f228 ;
	fma_f64	 $d6, $d1, 0D3f0951665d321061, 0D3f51e5f887a62135 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfac28d390c29690 ;
	fma_f64	 $d6, $d1, $d6, 0D3fd1a2bec1b7ef59 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfdc7b297e269eac ;
	fma_f64	 $d6, $d1, $d6, 0D3fcd1e4180029834 ;
	div_f64	 $d5, $d6, $d5 ;
	mul_f64	 $d1, $d1, $d5 ;
	fma_f64	 $d4, $d2, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d3, $d3, $d3 ;
	fma_f64	 $d4, $d2, $d1, 0Dbc91a62633145c07 ;
	add_f64	 $d2, $d2, $d4 ;
	fma_f64	 $d2, 0Dc000000000000000, $d2, 0D400921fb54442d18 ;
	mov_b64	$d4, $d0 ;
	shr_u64	 $d4, $d4, 32 ;
	cvt_u32_u64	$s1, $d4 ;
	cmp_gt_b1_s32	 $c1, $s1, -1 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	neg_f64	 $d3, $d0 ;
	fma_f64	 $d1, $d3, $d1, 0D3c91a62633145c07 ;
	sub_f64	 $d1, $d0, $d1 ;
	sub_f64	 $d1, 0D3ff921fb54442d18, $d1 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	cmp_lt_b1_s32	 $c0, $s0, -56 ;
	cmov_b64	 $d1, $c0, 0D3ff921fb54442d18, $d1 ;
	cmp_gt_b1_s32	 $c0, $s0, -1 ;
	cmov_b64	 $d1, $c0, 0D7ff8000000000000, $d1 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D3ff0000000000000 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d1 ;
	cmp_eq_b1_f64	 $c0, $d0, 0Dbff0000000000000 ;
	cmov_b64	 $d0, $c0, 0D400921fb54442d18, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pacosh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pacosh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	add_f32	 $s1, $s0, 0Fbf800000 ;
	mov_b32	$s2, $s0 ;
	cmp_gt_b1_u32	 $c0, $s2, 1073741824 ;
	cmov_b32	 $s3, $c0, $s0, $s1 ;
	add_f32	 $s4, $s1, $s1 ;
	mul_f32	 $s1, $s1, $s1 ;
	add_f32	 $s1, $s1, $s4 ;
	mul_f32	 $s4, $s0, $s0 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s1, $c0, $s4, $s1 ;
	sqrt_f32	 $s1, $s1 ;
	add_f32	 $s1, $s1, $s3 ;
	cmp_gt_b1_u32	 $c1, $s2, 1174405120 ;
	cmov_b32	 $s1, $c1, $s0, $s1 ;
	cmov_b32	 $s3, $c0, 0F3f800000, 0F00000000 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s3, $s1, 0F3f800000 ;
	and_b32	 $s4, $s3, 8323072 ;
	shl_u32	 $s5, $s3, 1 ;
	and_b32	 $s5, $s5, 65536 ;
	add_u32	 $s4, $s5, $s4 ;
	or_b32	 $s5, $s4, 1056964608 ;
	and_b32	 $s6, $s3, 8355840 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s5, $s6 ;
	and_b32	 $s7, $s3, -32768 ;
	sub_f32	 $s7, 0F3f800000, $s7 ;
	add_f32	 $s7, $s7, $s1 ;
	or_b32	 $s8, $s3, 8388607 ;
	xor_b32	 $s8, $s8, 2139095040 ;
	add_u32	 $s8, $s8, 2139095040 ;
	and_b32	 $s8, $s8, 2139095040 ;
	mul_f32	 $s7, $s7, $s8 ;
	mul_f32	 $s7, $s7, 0F3f000000 ;
	sub_f32	 $s6, $s6, $s7 ;
	and_b32	 $s7, $s3, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s5, $s5, $s7 ;
	extract_u32	 $s3, $s3, 23, 8 ;
	add_u32	 $s3, $s3, -127 ;
	cvt_near_f32_s32	$s3, $s3 ;
	cmp_gt_b1_f32	 $c0, $s3, 0F41c00000 ;
	cmov_b32	 $s5, $c0, $s5, $s6 ;
	shr_u32	 $s6, $s4, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s5, $s5, $s6 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s5, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s5, $s7, $s6, $s5 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s3, 0F3805fdf4, $s5 ;
	shr_u32	 $s4, $s4, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s6, $s4 ;
	ld_readonly_f32	$s6, [$s4 + 4] ;
	add_f32	 $s5, $s5, $s6 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s3, $s3, 0F3f317000, $s4 ;
	add_f32	 $s3, $s3, $s5 ;
	add_f32	 $s4, $s1, 0F40000000 ;
	div_f32	 $s4, $s1, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s5, $s6, $s5 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s4, $s1, $s5 ;
	add_f32	 $s4, $s4, $s1 ;
	mov_b32	$s5, $s1 ;
	and_b32	 $s5, $s5, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s5, 1031798784 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	cmp_gt_b1_u32	 $c0, $s5, 2139095039 ;
	cmov_b32	 $s3, $c0, $s1, $s3 ;
	cmp_lt_b1_f32	 $c0, $s1, 0Fbf800000 ;
	cmov_b32	 $s3, $c0, 0F7fc00000, $s3 ;
	cmp_eq_b1_f32	 $c0, $s1, 0Fbf800000 ;
	cmov_b32	 $s1, $c0, 0Fff800000, $s3 ;
	cmov_b32	 $s3, $c1, 0F3f317218, 0F00000000 ;
	add_f32	 $s1, $s1, $s3 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095039 ;
	cmov_b32	 $s1, $c0, $s0, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F3f800000 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pacosh_f64(arg_f64 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pacosh_f64_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	add_f32	 $s1, $s0, 0Fbf800000 ;
	mov_b32	$s2, $s0 ;
	cmp_gt_b1_u32	 $c0, $s2, 1073741824 ;
	cmov_b32	 $s3, $c0, $s0, $s1 ;
	add_f32	 $s4, $s1, $s1 ;
	mul_f32	 $s1, $s1, $s1 ;
	add_f32	 $s1, $s1, $s4 ;
	mul_f32	 $s4, $s0, $s0 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s1, $c0, $s4, $s1 ;
	sqrt_f32	 $s1, $s1 ;
	add_f32	 $s1, $s1, $s3 ;
	cmp_gt_b1_u32	 $c1, $s2, 1174405120 ;
	cmov_b32	 $s1, $c1, $s0, $s1 ;
	cmov_b32	 $s3, $c0, 0F3f800000, 0F00000000 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s3, $s1, 0F3f800000 ;
	and_b32	 $s4, $s3, 8323072 ;
	shl_u32	 $s5, $s3, 1 ;
	and_b32	 $s5, $s5, 65536 ;
	add_u32	 $s4, $s5, $s4 ;
	or_b32	 $s5, $s4, 1056964608 ;
	and_b32	 $s6, $s3, 8355840 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s5, $s6 ;
	and_b32	 $s7, $s3, -32768 ;
	sub_f32	 $s7, 0F3f800000, $s7 ;
	add_f32	 $s7, $s7, $s1 ;
	or_b32	 $s8, $s3, 8388607 ;
	xor_b32	 $s8, $s8, 2139095040 ;
	add_u32	 $s8, $s8, 2139095040 ;
	and_b32	 $s8, $s8, 2139095040 ;
	mul_f32	 $s7, $s7, $s8 ;
	mul_f32	 $s7, $s7, 0F3f000000 ;
	sub_f32	 $s6, $s6, $s7 ;
	and_b32	 $s7, $s3, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s5, $s5, $s7 ;
	extract_u32	 $s3, $s3, 23, 8 ;
	add_u32	 $s3, $s3, -127 ;
	cvt_near_f32_s32	$s3, $s3 ;
	cmp_gt_b1_f32	 $c0, $s3, 0F41c00000 ;
	cmov_b32	 $s5, $c0, $s5, $s6 ;
	shr_u32	 $s6, $s4, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s5, $s5, $s6 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s5, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s5, $s7, $s6, $s5 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s3, 0F3805fdf4, $s5 ;
	shr_u32	 $s4, $s4, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s6, $s4 ;
	ld_readonly_f32	$s6, [$s4 + 4] ;
	add_f32	 $s5, $s5, $s6 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s3, $s3, 0F3f317000, $s4 ;
	add_f32	 $s3, $s3, $s5 ;
	add_f32	 $s4, $s1, 0F40000000 ;
	div_f32	 $s4, $s1, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s5, $s6, $s5 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s4, $s1, $s5 ;
	add_f32	 $s4, $s4, $s1 ;
	mov_b32	$s5, $s1 ;
	and_b32	 $s5, $s5, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s5, 1031798784 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	cmp_gt_b1_u32	 $c0, $s5, 2139095039 ;
	cmov_b32	 $s3, $c0, $s1, $s3 ;
	cmp_lt_b1_f32	 $c0, $s1, 0Fbf800000 ;
	cmov_b32	 $s3, $c0, 0F7fc00000, $s3 ;
	cmp_eq_b1_f32	 $c0, $s1, 0Fbf800000 ;
	cmov_b32	 $s1, $c0, 0Fff800000, $s3 ;
	cmov_b32	 $s3, $c1, 0F3f317218, 0F00000000 ;
	add_f32	 $s1, $s1, $s3 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095039 ;
	cmov_b32	 $s1, $c0, $s0, $s1 ;
	cvt_f64_f32	$d0, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F3f800000 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pasin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pasin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	sub_f32	 $s5, 0F3f800000, $s3 ;
	mul_f32	 $s5, $s5, 0F3f000000 ;
	shr_u32	 $s6, $s2, 23 ;
	add_u32	 $s6, $s6, -127 ;
	cmp_gt_b1_s32	 $c0, $s6, -2 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	sqrt_f32	 $s5, $s4 ;
	mov_b32	$s7, $s5 ;
	and_b32	 $s7, $s7, -65536 ;
	neg_f32	 $s8, $s7 ;
	mad_f32	 $s8, $s8, $s7, $s4 ;
	add_f32	 $s9, $s5, $s7 ;
	div_f32	 $s8, $s8, $s9 ;
	mad_f32	 $s8, $s8, 0Fc0000000, 0F33a22168 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s9, $s4, 0Fbb81ce6b, 0Fbc5b3fe1 ;
	mad_f32	 $s9, $s4, $s9, 0Fbd678bdd ;
	mad_f32	 $s9, $s4, $s9, 0F3e3c94dc ;
	mad_f32	 $s10, $s4, 0Fbf561f0d, 0F3f8d6fa5 ;
	div_f32	 $s9, $s9, $s10 ;
	mul_f32	 $s4, $s4, $s9 ;
	add_f32	 $s5, $s5, $s5 ;
	mad_f32	 $s5, $s5, $s4, $s8 ;
	mad_f32	 $s7, $s7, 0Fc0000000, 0F3f490fda ;
	sub_f32	 $s5, $s5, $s7 ;
	sub_f32	 $s5, 0F3f490fda, $s5 ;
	mad_f32	 $s3, $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c0, $s5, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	cmp_gt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s3, $c0, 0F7fc00000, $s3 ;
	or_b32	 $s1, $s1, 1070141403 ;
	cmp_eq_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmp_lt_b1_s32	 $c0, $s6, -14 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pasin_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pasin_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	mul_f64	 $d2, $d1, $d1 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d1 ;
	mul_f64	 $d3, $d3, 0D3fe0000000000000 ;
	mov_b64	$d4, $d1 ;
	shr_u64	 $d4, $d4, 32 ;
	cvt_u32_u64	$s0, $d4 ;
	shr_s32	 $s0, $s0, 20 ;
	add_u32	 $s0, $s0, -1023 ;
	cmp_gt_b1_s32	 $c0, $s0, -2 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d ;
	fma_f64	 $d3, $d2, $d3, 0D40062021571dccfc ;
	fma_f64	 $d3, $d2, $d3, 0Dc00a4646f903cdea ;
	fma_f64	 $d3, $d2, $d3, 0D3ff5d6b12001f228 ;
	fma_f64	 $d4, $d2, 0D3f0951665d321061, 0D3f51e5f887a62135 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfac28d390c29690 ;
	fma_f64	 $d4, $d2, $d4, 0D3fd1a2bec1b7ef59 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfdc7b297e269eac ;
	fma_f64	 $d4, $d2, $d4, 0D3fcd1e4180029834 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d3, $d2, $d3 ;
	sqrt_f64	 $d4, $d2 ;
	mov_b64	$d5, $d4 ;
	and_b64	 $d5, $d5, -4294967296 ;
	neg_f64	 $d6, $d5 ;
	fma_f64	 $d2, $d6, $d5, $d2 ;
	add_f64	 $d6, $d4, $d5 ;
	div_f64	 $d2, $d2, $d6 ;
	fma_f64	 $d2, 0Dc000000000000000, $d2, 0D3c91a62633145c07 ;
	neg_f64	 $d2, $d2 ;
	add_f64	 $d4, $d4, $d4 ;
	fma_f64	 $d2, $d4, $d3, $d2 ;
	fma_f64	 $d4, 0Dc000000000000000, $d5, 0D3fe921fb54442d18 ;
	sub_f64	 $d2, $d2, $d4 ;
	sub_f64	 $d2, 0D3fe921fb54442d18, $d2 ;
	fma_f64	 $d3, $d1, $d3, $d1 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cmp_lt_b1_s32	 $c0, $s0, -28 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	cmp_gt_b1_s32	 $c0, $s0, -1 ;
	cmov_b64	 $d2, $c0, 0D7ff8000000000000, $d2 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D3ff0000000000000 ;
	cmov_b64	 $d1, $c0, 0D3ff921fb54442d18, $d2 ;
	neg_f64	 $d2, $d1 ;
	shr_u64	 $d0, $d0, 32 ;
	cvt_u32_u64	$s0, $d0 ;
	cmp_gt_b1_s32	 $c0, $s0, -1 ;
	cmov_b64	 $d0, $c0, $d1, $d2 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pasinh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pasinh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	add_f32	 $s4, $s4, 0F3f800000 ;
	sqrt_f32	 $s4, $s4 ;
	add_f32	 $s4, $s4, $s3 ;
	cmp_gt_b1_u32	 $c0, $s2, 1174405120 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	mov_b32	$s4, $s3 ;
	shr_u32	 $s5, $s4, 23 ;
	cmp_eq_b1_u32	 $c1, $s5, 0 ;
	or_b32	 $s6, $s4, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c1, $s6, $s4 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s5, $s5, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s5, $c1, $s6, $s5 ;
	cvt_near_f32_s32	$s5, $s5 ;
	mad_f32	 $s6, $s5, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s5, $s5, 0F3f317000, $s7 ;
	add_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s3, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F3d800000 ;
	cmov_b32	 $s5, $c1, $s7, $s5 ;
	and_b32	 $s6, $s4, 2147483647 ;
	cmp_gt_b1_u32	 $c1, $s6, 2139095039 ;
	cmov_b32	 $s3, $c1, $s3, $s5 ;
	cmp_eq_b1_u32	 $c1, $s4, $s6 ;
	cmov_b32	 $s3, $c1, $s3, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b32	 $s3, $c1, 0Fff800000, $s3 ;
	cmov_b32	 $s4, $c0, 0F3f317218, 0F00000000 ;
	add_f32	 $s3, $s3, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	mul_f32	 $s3, $s0, $s0 ;
	mad_f32	 $s4, $s3, 0F3d80b442, 0F3fa14880 ;
	mad_f32	 $s4, $s3, $s4, 0F40d2a2b7 ;
	mad_f32	 $s4, $s3, $s4, 0F413fe860 ;
	mad_f32	 $s4, $s3, $s4, 0F40dd5e94 ;
	mad_f32	 $s5, $s3, 0Fb8f6e063, 0Fbd2a815d ;
	mad_f32	 $s5, $s3, $s5, 0Fbf019e32 ;
	mad_f32	 $s5, $s3, $s5, 0Fbfbd7755 ;
	mad_f32	 $s5, $s3, $s5, 0Fbf939462 ;
	div_f32	 $s4, $s5, $s4 ;
	mul_f32	 $s3, $s3, $s0 ;
	mad_f32	 $s3, $s3, $s4, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1073741825 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	add_u32	 $s2, $s2, -964689920 ;
	cmp_gt_b1_u32	 $c0, $s2, 1174405119 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pasinh_f64(arg_f64 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pasinh_f64_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	add_f32	 $s4, $s4, 0F3f800000 ;
	sqrt_f32	 $s4, $s4 ;
	add_f32	 $s4, $s4, $s3 ;
	cmp_gt_b1_u32	 $c0, $s2, 1174405120 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	mov_b32	$s4, $s3 ;
	shr_u32	 $s5, $s4, 23 ;
	cmp_eq_b1_u32	 $c1, $s5, 0 ;
	or_b32	 $s6, $s4, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c1, $s6, $s4 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s5, $s5, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s5, $c1, $s6, $s5 ;
	cvt_near_f32_s32	$s5, $s5 ;
	mad_f32	 $s6, $s5, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s5, $s5, 0F3f317000, $s7 ;
	add_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s3, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F3d800000 ;
	cmov_b32	 $s5, $c1, $s7, $s5 ;
	and_b32	 $s6, $s4, 2147483647 ;
	cmp_gt_b1_u32	 $c1, $s6, 2139095039 ;
	cmov_b32	 $s3, $c1, $s3, $s5 ;
	cmp_eq_b1_u32	 $c1, $s4, $s6 ;
	cmov_b32	 $s3, $c1, $s3, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b32	 $s3, $c1, 0Fff800000, $s3 ;
	cmov_b32	 $s4, $c0, 0F3f317218, 0F00000000 ;
	add_f32	 $s3, $s3, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	mul_f32	 $s3, $s0, $s0 ;
	mad_f32	 $s4, $s3, 0F3d80b442, 0F3fa14880 ;
	mad_f32	 $s4, $s3, $s4, 0F40d2a2b7 ;
	mad_f32	 $s4, $s3, $s4, 0F413fe860 ;
	mad_f32	 $s4, $s3, $s4, 0F40dd5e94 ;
	mad_f32	 $s5, $s3, 0Fb8f6e063, 0Fbd2a815d ;
	mad_f32	 $s5, $s3, $s5, 0Fbf019e32 ;
	mad_f32	 $s5, $s3, $s5, 0Fbfbd7755 ;
	mad_f32	 $s5, $s3, $s5, 0Fbf939462 ;
	div_f32	 $s4, $s5, $s4 ;
	mul_f32	 $s3, $s3, $s0 ;
	mad_f32	 $s3, $s3, $s4, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1073741825 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	add_u32	 $s2, $s2, -964689920 ;
	cmp_gt_b1_u32	 $c0, $s2, 1174405119 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	cvt_f64_f32	$d0, $s0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patan_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Patan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	mad_f32	 $s4, $s3, 0F3fc00000, 0F3f800000 ;
	add_f32	 $s5, $s3, 0Fbfc00000 ;
	div_f32	 $s4, $s5, $s4 ;
	cmp_lt_b1_u32	 $c0, $s2, 1075576832 ;
	frcp_f32	 $s5, $s3 ;
	neg_f32	 $s5, $s5 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	add_f32	 $s5, $s3, 0F3f800000 ;
	add_f32	 $s6, $s3, 0Fbf800000 ;
	div_f32	 $s5, $s6, $s5 ;
	cmp_lt_b1_u32	 $c1, $s2, 1066926080 ;
	cmov_b32	 $s4, $c1, $s5, $s4 ;
	add_f32	 $s5, $s3, 0F40000000 ;
	mad_f32	 $s6, $s3, 0F40000000, 0Fbf800000 ;
	div_f32	 $s5, $s6, $s5 ;
	cmp_lt_b1_u32	 $c2, $s2, 1060110336 ;
	cmov_b32	 $s4, $c2, $s5, $s4 ;
	cmp_lt_b1_u32	 $c3, $s2, 1054867456 ;
	cmov_b32	 $s3, $c3, $s3, $s4 ;
	mul_f32	 $s4, $s3, $s3 ;
	mad_f32	 $s5, $s4, 0F3e993f1f, 0F3f8e2c3d ;
	mad_f32	 $s5, $s4, $s5, 0F3f63bbe5 ;
	mad_f32	 $s6, $s4, 0F3b9a3b54, 0F3e44f0ba ;
	mad_f32	 $s6, $s4, $s6, 0F3e97d299 ;
	div_f32	 $s5, $s6, $s5 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s3, $s4, $s3 ;
	cmov_b32	 $s4, $c0, 0F3f7b985f, 0F3fc90fdb ;
	cmov_b32	 $s4, $c1, 0F3f490fdb, $s4 ;
	cmov_b32	 $s4, $c2, 0F3eed6338, $s4 ;
	cmov_b32	 $s4, $c3, 0F00000000, $s4 ;
	sub_f32	 $s3, $s4, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s1, $s1, 1070141403 ;
	cmp_lt_b1_u32	 $c0, $s2, 2139095041 ;
	cmov_b32	 $s1, $c0, $s1, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1283457024 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	cmp_lt_b1_u32	 $c0, $s2, 905969664 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patan_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Patan_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	cmp_le_b1_f64	 $c0, $d1, 0D4003800000000000 ;
	mul_f64	 $d2, $d1, 0D3ff8000000000000 ;
	add_f64	 $d2, $d2, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c0, $d2, $d1 ;
	add_f64	 $d3, $d1, 0D3ff0000000000000 ;
	cmp_le_b1_f64	 $c1, $d1, 0D3ff3000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	add_f64	 $d3, $d1, 0D4000000000000000 ;
	cmp_le_b1_f64	 $c2, $d1, 0D3fe6000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmp_le_b1_f64	 $c3, $d1, 0D3fdc000000000000 ;
	cmov_b64	 $d2, $c3, 0D3ff0000000000000, $d2 ;
	add_f64	 $d3, $d1, 0Dbff8000000000000 ;
	cmov_b64	 $d3, $c0, $d3, 0Dbff0000000000000 ;
	add_f64	 $d4, $d1, 0Dbff0000000000000 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	add_f64	 $d4, $d1, $d1 ;
	add_f64	 $d4, $d4, 0Dbff0000000000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	cmov_b64	 $d3, $c3, $d1, $d3 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	mul_f64	 $d4, $d2, $d3 ;
	fma_f64	 $d5, $d3, 0D3f22a75ce41b9f87, 0D3f9f2d2116f053f2 ;
	fma_f64	 $d5, $d3, $d5, 0D3fcc3de43db425c0 ;
	fma_f64	 $d5, $d3, $d5, 0D3fdca6be4c993b3c ;
	fma_f64	 $d5, $d3, $d5, 0D3fd12bcb0a9169f3 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d5, $d3, 0D3fa3f197f1e85ed9, 0D3fdb2cb05bf9beff ;
	fma_f64	 $d5, $d3, $d5, 0D3ff699c644c48d2e ;
	fma_f64	 $d5, $d3, $d5, 0D3ffd372a17cdf5a0 ;
	fma_f64	 $d3, $d3, $d5, 0D3fe9c1b08fda1eec ;
	div_f64	 $d3, $d4, $d3 ;
	cmov_b64	 $d4, $c0, 0D3c7007887af0cbbc, 0D3c91a62633145c06 ;
	cmov_b64	 $d4, $c1, 0D3c81a62633145c06, $d4 ;
	cmov_b64	 $d4, $c2, 0D3c7a2b7f222f65e0, $d4 ;
	cmov_b64	 $d4, $c3, 0D0000000000000000, $d4 ;
	sub_f64	 $d3, $d3, $d4 ;
	sub_f64	 $d2, $d3, $d2 ;
	cmov_b64	 $d3, $c0, 0D3fef730bd281f69b, 0D3ff921fb54442d18 ;
	cmov_b64	 $d3, $c1, 0D3fe921fb54442d18, $d3 ;
	cmov_b64	 $d3, $c2, 0D3fddac670561bb4f, $d3 ;
	cmov_b64	 $d3, $c3, 0D0000000000000000, $d3 ;
	sub_f64	 $d2, $d3, $d2 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d3, $c0, 0D3ff921fb54442d18, $d0 ;
	cmp_gtu_b1_f64	 $c0, $d1, 0D4370000000000000 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e50000000000000 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	neg_f64	 $d3, $d2 ;
	cmp_eq_b1_f64	 $c0, $d1, $d0 ;
	cmov_b64	 $d0, $c0, $d2, $d3 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patan2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Patan2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	ld_arg_f32	$s4, [%arg_val1] ;
	add_ftz_f32	$s4, $s4, 0F00000000 ;
	mov_b32	$s5, $s4 ;
	and_b32	 $s6, $s5, 2147483647 ;
	mov_b32	$s7, $s6 ;
	max_f32	 $s8, $s7, $s3 ;
	min_f32	 $s9, $s7, $s3 ;
	div_f32	 $s8, $s9, $s8 ;
	mad_f32	 $s9, $s8, 0F43800000, 0F3f000000 ;
	cvt_zeroi_s32_f32	$s9, $s9 ;
	cvt_near_f32_s32	$s10, $s9 ;
	mad_f32	 $s11, $s8, $s10, 0F43800000 ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s10, $s8, 0F43800000, $s10 ;
	div_f32	 $s10, $s10, $s11 ;
	mul_f32	 $s11, $s10, $s10 ;
	mul_f32	 $s11, $s10, $s11 ;
	mad_f32	 $s10, $s11, 0Fbeaaaaab, $s10 ;
	add_u32	 $s9, $s9, -16 ;
	max_s32	 $s9, $s9, 0 ;
	min_s32	 $s9, $s9, 240 ;
	shl_u32	 $s9, $s9, 2 ;
	//ldas_global_u32	$s11, [&__math32_ATAN2_TABLE_JBY256] ;
	add_u32	 $s9, $s11, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	add_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s10, $s8, $s8 ;
	mul_f32	 $s11, $s8, $s10 ;
	mad_f32	 $s12, $s10, 0Fbe124924, 0F3e4ccccd ;
	neg_f32	 $s12, $s12 ;
	mad_f32	 $s10, $s10, $s12, 0F3eaaaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s10, $s11, $s10, $s8 ;
	cmp_gt_b1_f32	 $c0, $s8, 0F3d800000 ;
	cmov_b32	 $s8, $c0, $s9, $s10 ;
	sub_f32	 $s9, 0F3fc90fdb, $s8 ;
	cmp_lt_b1_f32	 $c0, $s7, $s3 ;
	cmov_b32	 $s3, $c0, $s9, $s8 ;
	sub_f32	 $s7, 0F40490fdb, $s3 ;
	cmp_ne_b1_u32	 $c0, $s5, $s6 ;
	cmov_b32	 $s3, $c0, $s7, $s3 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s5, $s1, 1078530011 ;
	cmov_b32	 $s5, $c0, $s5, $s0 ;
	cmp_eq_b1_f32	 $c1, $s0, 0F00000000 ;
	cmov_b32	 $s3, $c1, $s5, $s3 ;
	cmov_b32	 $s5, $c0, 1075235812, 1061752795 ;
	or_b32	 $s1, $s1, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 2139095040 ;
	cmp_eq_b1_u32	 $c1, $s2, 2139095040 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095040 ;
	cmov_b32	 $s1, $c0, $s4, $s1 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patan2_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
	spill_u32 %stack[24];
@__amd_amp_Patan2_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d1, $d0 ;
	st_spill_u64	$d1, [%stack][80] ; // 8-byte Folded Reload
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s0, $s0, 2047 ;
	cmp_ne_b1_u32	 $c0, $s0, 0 ;
	add_u32	 $s1, $s0, 1024 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_ne_b1_u32	 $c1, $s1, 2047 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s1 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d4, $d1, -9223372036854775808 ;
	or_b64	 $d3, $d3, $d4 ;
	st_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	or_b64	 $d2, $d3, $d2 ;
	cmp_lt_b1_u32	 $c0, $s0, 1021 ;
	ld_arg_f64	$d4, [%arg_val1] ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d0, $d4 ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmp_lt_b1_u32	 $c1, $s1, 1021 ;
	and_b1	 $c0, $c1, $c0 ;
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	cmov_b64	 $d1, $c0, $d2, $d0 ;
	st_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	abs_f64	 $d2, $d1 ;
	st_spill_u64	$d2, [%stack][64] ; // 8-byte Folded Reload
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	add_u32	 $s2, $s1, 1024 ;
	max_s32	 $s2, $s2, 0 ;
	min_s32	 $s2, $s2, 2047 ;
	cmp_ne_b1_u32	 $c2, $s2, 2047 ;
	and_b1	 $c1, $c2, $c1 ;
	cmp_ne_b1_u32	 $c2, $s2, 0 ;
	and_b1	 $c1, $c1, $c2 ;
	ld_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c1, $d3, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cvt_u64_u32	$d4, $s2 ;
	cmov_b64	 $d4, $c1, 2047, $d4 ;
	extract_u64	 $d5, $d0, 52, 11 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d5, $d0, -9223372036854775808 ;
	or_b64	 $d4, $d4, $d5 ;
	st_spill_u64	$d4, [%stack][56] ; // 8-byte Folded Reload
	or_b64	 $d3, $d4, $d3 ;
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	st_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	abs_f64	 $d5, $d3 ;
	st_spill_u64	$d5, [%stack][72] ; // 8-byte Folded Reload
	min_f64	 $d6, $d5, $d2 ;
	st_spill_u64	$d6, [%stack][88] ; // 8-byte Folded Reload
	mov_b64	$d7, $d6 ;
	shr_u64	 $d0, $d7, 52 ;
	cvt_u32_u64	$s2, $d0 ;
	and_b32	 $s2, $s2, 2047 ;
	max_f64	 $d0, $d5, $d2 ;
	mov_b64	$d1, $d0 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s3, $d2 ;
	sub_u32	 $s4, 1023, $s3 ;
	add_u32	 $s5, $s4, $s2 ;
	sub_u32	 $s6, -2147483648, $s4 ;
	cmp_gt_b1_s32	 $c1, $s6, $s2 ;
	cmp_lt_b1_s32	 $c2, $s4, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s5, $c1, -2147483648, $s5 ;
	sub_u32	 $s7, 2147483647, $s4 ;
	cmp_lt_b1_s32	 $c1, $s7, $s2 ;
	cmp_gt_b1_s32	 $c3, $s4, 0 ;
	and_b1	 $c1, $c3, $c1 ;
	cmov_b32	 $s5, $c1, 2147483647, $s5 ;
	max_s32	 $s5, $s5, 0 ;
	min_s32	 $s5, $s5, 2047 ;
	cmp_ne_b1_u32	 $c1, $s5, 2047 ;
	cmp_ne_b1_u32	 $c4, $s2, 0 ;
	and_b1	 $c1, $c1, $c4 ;
	cmp_ne_b1_u32	 $c4, $s5, 0 ;
	and_b1	 $c1, $c1, $c4 ;
	and_b64	 $d2, $d7, 4503599627370495 ;
	cmov_b64	 $d3, $c1, $d2, 0 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmov_b64	 $d2, $c1, $d2, $d3 ;
	cvt_u64_u32	$d3, $s5 ;
	cmov_b64	 $d3, $c1, 2047, $d3 ;
	extract_u64	 $d4, $d7, 52, 11 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d4, $d7, -9223372036854775808 ;
	or_b64	 $d3, $d3, $d4 ;
	or_b64	 $d2, $d3, $d2 ;
	st_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	and_b32	 $s2, $s3, 2047 ;
	add_u32	 $s3, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s6, $s2 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s3, $c1, -2147483648, $s3 ;
	cmp_lt_b1_s32	 $c1, $s7, $s2 ;
	and_b1	 $c1, $c3, $c1 ;
	cmov_b32	 $s3, $c1, 2147483647, $s3 ;
	max_s32	 $s3, $s3, 0 ;
	min_s32	 $s3, $s3, 2047 ;
	cmp_eq_b1_u32	 $c1, $s3, 2047 ;
	cmp_eq_b1_u32	 $c2, $s3, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s2, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c1, $d3, 0 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cvt_u64_u32	$d4, $s3 ;
	cmov_b64	 $d4, $c1, 2047, $d4 ;
	extract_u64	 $d5, $d1, 52, 11 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d5, $d1, -9223372036854775808 ;
	or_b64	 $d4, $d4, $d5 ;
	or_b64	 $d3, $d4, $d3 ;
	and_b64	 $d4, $d3, -134217728 ;
	div_f64	 $d5, $d6, $d0 ;
	cmp_gt_b1_f64	 $c1, $d5, 0D3fb0000000000000 ;
	cmov_b64	 $d7, $c1, $d5, 0D3fb020c49ba5e354 ;
	fma_f64	 $d7, 0D4070000000000000, $d7, 0D3fe0000000000000 ;
	cvt_zeroi_s32_f64	$s2, $d7 ;
	cvt_near_f64_s32	$d7, $s2 ;
	mul_f64	 $d7, $d7, 0D3f70000000000000 ;
	neg_f64	 $d2, $d7 ;
	ld_spill_u64	$d6, [%stack][24] ; // 8-byte Folded Reload
	fma_f64	 $d6, $d2, $d4, $d6 ;
	sub_f64	 $d4, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d4, $d6 ;
	ld_spill_u64	$d6, [%stack][24] ; // 8-byte Folded Reload
	fma_f64	 $d3, $d7, $d6, $d3 ;
	div_f64	 $d2, $d2, $d3 ;
	mul_f64	 $d3, $d2, $d2 ;
	neg_f64	 $d4, $d3 ;
	fma_f64	 $d4, $d4, 0D3fc99992b9802d7d, 0D3fd5555555550877 ;
	mul_f64	 $d3, $d3, $d4 ;
	neg_f64	 $d4, $d2 ;
	fma_f64	 $d2, $d3, $d4, $d2 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_ATAN_JBY256_TBL] ;
	add_u32	 $s2, $s2, $s3 ;
	add_u32	 $s3, $s2, -248 ;
	ld_readonly_f64	$d3, [$s3] ;
	add_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d5 ;
	and_b64	 $d3, $d3, -4294967296 ;
	and_b64	 $d1, $d1, -4294967296 ;
	neg_f64	 $d4, $d1 ;
	ld_spill_u64	$d6, [%stack][88] ; // 8-byte Folded Reload
	fma_f64	 $d4, $d4, $d3, $d6 ;
	sub_f64	 $d1, $d0, $d1 ;
	neg_f64	 $d1, $d1 ;
	fma_f64	 $d1, $d1, $d3, $d4 ;
	sub_f64	 $d3, $d5, $d3 ;
	neg_f64	 $d4, $d0 ;
	fma_f64	 $d1, $d4, $d3, $d1 ;
	div_f64	 $d0, $d1, $d0 ;
	neg_f64	 $d1, $d5 ;
	mul_f64	 $d3, $d5, $d5 ;
	mul_f64	 $d1, $d3, $d1 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d4, $d3, 0D3fb70c3192d751c2, 0D3fbc718839b8c4eb ;
	fma_f64	 $d4, $d3, $d4, 0D3fc2492482bd6be1 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc99999999643a3 ;
	fma_f64	 $d3, $d3, $d4, 0D3fd5555555555538 ;
	fma_f64	 $d0, $d1, $d3, $d0 ;
	add_f64	 $d0, $d5, $d0 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D3e4d12ed0af1a27f ;
	cmov_b64	 $d0, $c2, $d5, $d0 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	sub_f64	 $d1, 0D3c91a62633145c07, $d0 ;
	ld_spill_u64	$d5, [%stack][72] ; // 8-byte Folded Reload
	ld_spill_u64	$d2, [%stack][64] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c2, $d5, $d2 ;
	cmov_b64	 $d0, $c2, $d1, $d0 ;
	sub_f64	 $d1, 0D3e6110b4611a6263, $d0 ;
	ld_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	shr_u64	 $d2, $d2, 63 ;
	cvt_u32_u64	$s3, $d2 ;
	cmp_eq_b1_u32	 $c3, $s3, 0 ;
	cmov_b64	 $d0, $c3, $d0, $d1 ;
	add_u32	 $s2, $s2, -256 ;
	ld_readonly_f64	$d1, [$s2] ;
	cmov_b64	 $d1, $c1, $d1, 0D0000000000000000 ;
	sub_f64	 $d2, 0D3ff921fb54442d18, $d1 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	sub_f64	 $d2, 0D400921fb50000000, $d1 ;
	cmov_b64	 $d1, $c3, $d1, $d2 ;
	add_f64	 $d0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][80] ; // 8-byte Folded Reload
	shr_u64	 $d2, $d2, 32 ;
	cvt_u32_u64	$s2, $d2 ;
	cmp_gt_b1_s32	 $c1, $s2, -1 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	cmov_b64	 $d1, $c1, 0D4002d97c7f3321d2, 0Dc002d97c7f3321d2 ;
	cmov_b64	 $d2, $c1, 0D3fe921fb54442d18, 0Dbfe921fb54442d18 ;
	cmov_b64	 $d1, $c3, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	class_f64	 $c2, $d2, 516 ;
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	class_f64	 $c4, $d4, 516 ;
	cvt_u32_b1	$s2, $c4 ;
	cvt_u32_b1	$s4, $c2 ;
	and_b32	 $s2, $s2, $s4 ;
	cvt_b1_u32	$c2, $s2 ;
	not_b1	 $c2, $c2 ;
	cmov_b64	 $d0, $c2, $d0, $d1 ;
	ld_spill_u64	$d4, [%stack][56] ; // 8-byte Folded Reload
	shr_u64	 $d1, $d4, 52 ;
	cvt_u32_u64	$s2, $d1 ;
	and_b32	 $s2, $s2, 2047 ;
	ld_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	shr_u64	 $d1, $d3, 52 ;
	cvt_u32_u64	$s4, $d1 ;
	and_b32	 $s4, $s4, 2047 ;
	sub_u32	 $s2, $s4, $s2 ;
	sub_u32	 $s0, $s0, $s1 ;
	cmov_b32	 $s0, $c0, $s2, $s0 ;
	cmp_lt_b1_s32	 $c0, $s0, -56 ;
	cmp_ne_b1_u32	 $c2, $s3, 0 ;
	and_b1	 $c0, $c0, $c2 ;
	cmov_b64	 $d1, $c1, 0D400921fb54442d18, 0Dc00921fb54442d18 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][48] ; // 8-byte Folded Reload
	div_f64	 $d3, $d3, $d4 ;
	cmp_lt_b1_s32	 $c0, $s0, -28 ;
	and_b1	 $c0, $c0, $c3 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_gt_b1_s32	 $c0, $s0, 56 ;
	cmov_b64	 $d3, $c1, 0D3ff921fb54442d18, 0Dbff921fb54442d18 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d4, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmov_b64	 $d1, $c3, $d2, $d1 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	class_f64	 $c0, $d2, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	class_f64	 $c0, $d4, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patanh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Patanh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	sub_f32	 $s4, 0F3f800000, $s3 ;
	add_f32	 $s3, $s3, $s3 ;
	div_f32	 $s3, $s3, $s4 ;
	add_f32	 $s4, $s3, 0F3f800000 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s7, $s4, 8355840 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s6, $s7 ;
	and_b32	 $s8, $s4, -32768 ;
	sub_f32	 $s8, 0F3f800000, $s8 ;
	add_f32	 $s8, $s8, $s3 ;
	or_b32	 $s9, $s4, 8388607 ;
	xor_b32	 $s9, $s9, 2139095040 ;
	add_u32	 $s9, $s9, 2139095040 ;
	and_b32	 $s9, $s9, 2139095040 ;
	mul_f32	 $s8, $s8, $s9 ;
	mul_f32	 $s8, $s8, 0F3f000000 ;
	sub_f32	 $s7, $s7, $s8 ;
	and_b32	 $s8, $s4, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s6, $s6, $s8 ;
	extract_u32	 $s4, $s4, 23, 8 ;
	add_u32	 $s4, $s4, -127 ;
	cvt_near_f32_s32	$s4, $s4 ;
	cmp_gt_b1_f32	 $c0, $s4, 0F41c00000 ;
	cmov_b32	 $s6, $c0, $s6, $s7 ;
	shr_u32	 $s7, $s5, 14 ;
	//ldas_global_u32	$s8, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s7, [$s7] ;
	mul_f32	 $s6, $s6, $s7 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s8, $s7, $s6 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s6 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s5, $s7, $s5 ;
	ld_readonly_f32	$s7, [$s5 + 4] ;
	add_f32	 $s6, $s6, $s7 ;
	ld_readonly_f32	$s5, [$s5] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s5, $s3, 0F40000000 ;
	div_f32	 $s5, $s3, $s5 ;
	add_f32	 $s6, $s5, $s5 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s7, $s8, $s7 ;
	mul_f32	 $s6, $s7, $s6 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s5, $s3, $s6 ;
	add_f32	 $s5, $s5, $s3 ;
	mov_b32	$s6, $s3 ;
	and_b32	 $s6, $s6, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s6, 1031798784 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095039 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	mul_f32	 $s4, $s4, 0F3f000000 ;
	cmp_lt_b1_f32	 $c0, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, 2143289344, $s4 ;
	cmp_eq_b1_f32	 $c0, $s3, 0Fbf800000 ;
	cmov_b32	 $s3, $c0, -8388608, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s1, $s1, 2139095040 ;
	cmp_eq_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s1, 0F7fc00000 ;
	cmp_lt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	mul_f32	 $s3, $s0, $s0 ;
	mad_f32	 $s4, 0F3ee7d7e1, $s3, 0Fbfc6e215 ;
	mad_f32	 $s4, $s4, $s3, 0F3f97807f ;
	mad_f32	 $s5, 0F3c18197e, $s3, 0Fbe8ff9e7 ;
	mad_f32	 $s5, $s5, $s3, 0F3eca00a9 ;
	div_f32	 $s4, $s5, $s4 ;
	mul_f32	 $s3, $s3, $s0 ;
	mad_f32	 $s3, $s3, $s4, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1056964608 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	cmp_lt_b1_u32	 $c0, $s2, 956301312 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Patanh_f64(arg_f64 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Patanh_f64_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	sub_f32	 $s4, 0F3f800000, $s3 ;
	add_f32	 $s3, $s3, $s3 ;
	div_f32	 $s3, $s3, $s4 ;
	add_f32	 $s4, $s3, 0F3f800000 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s7, $s4, 8355840 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s6, $s7 ;
	and_b32	 $s8, $s4, -32768 ;
	sub_f32	 $s8, 0F3f800000, $s8 ;
	add_f32	 $s8, $s8, $s3 ;
	or_b32	 $s9, $s4, 8388607 ;
	xor_b32	 $s9, $s9, 2139095040 ;
	add_u32	 $s9, $s9, 2139095040 ;
	and_b32	 $s9, $s9, 2139095040 ;
	mul_f32	 $s8, $s8, $s9 ;
	mul_f32	 $s8, $s8, 0F3f000000 ;
	sub_f32	 $s7, $s7, $s8 ;
	and_b32	 $s8, $s4, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s6, $s6, $s8 ;
	extract_u32	 $s4, $s4, 23, 8 ;
	add_u32	 $s4, $s4, -127 ;
	cvt_near_f32_s32	$s4, $s4 ;
	cmp_gt_b1_f32	 $c0, $s4, 0F41c00000 ;
	cmov_b32	 $s6, $c0, $s6, $s7 ;
	shr_u32	 $s7, $s5, 14 ;
	//ldas_global_u32	$s8, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s7, [$s7] ;
	mul_f32	 $s6, $s6, $s7 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s8, $s7, $s6 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s6 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s5, $s7, $s5 ;
	ld_readonly_f32	$s7, [$s5 + 4] ;
	add_f32	 $s6, $s6, $s7 ;
	ld_readonly_f32	$s5, [$s5] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s5, $s3, 0F40000000 ;
	div_f32	 $s5, $s3, $s5 ;
	add_f32	 $s6, $s5, $s5 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s7, $s8, $s7 ;
	mul_f32	 $s6, $s7, $s6 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s5, $s3, $s6 ;
	add_f32	 $s5, $s5, $s3 ;
	mov_b32	$s6, $s3 ;
	and_b32	 $s6, $s6, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s6, 1031798784 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095039 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	mul_f32	 $s4, $s4, 0F3f000000 ;
	cmp_lt_b1_f32	 $c0, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, 2143289344, $s4 ;
	cmp_eq_b1_f32	 $c0, $s3, 0Fbf800000 ;
	cmov_b32	 $s3, $c0, -8388608, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s3, $s3, $s1 ;
	or_b32	 $s1, $s1, 2139095040 ;
	cmp_eq_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s1, 0F7fc00000 ;
	cmp_lt_b1_u32	 $c0, $s2, 1065353216 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	mul_f32	 $s3, $s0, $s0 ;
	mad_f32	 $s4, 0F3ee7d7e1, $s3, 0Fbfc6e215 ;
	mad_f32	 $s4, $s4, $s3, 0F3f97807f ;
	mad_f32	 $s5, 0F3c18197e, $s3, 0Fbe8ff9e7 ;
	mad_f32	 $s5, $s5, $s3, 0F3eca00a9 ;
	div_f32	 $s4, $s5, $s4 ;
	mul_f32	 $s3, $s3, $s0 ;
	mad_f32	 $s3, $s3, $s4, $s0 ;
	cmp_lt_b1_u32	 $c0, $s2, 1056964608 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	cmp_lt_b1_u32	 $c0, $s2, 956301312 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	cvt_f64_f32	$d0, $s0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcbrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pcbrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	shr_u32	 $s3, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	or_b32	 $s4, $s2, 1065353216 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s5, $c0, $s4, $s2 ;
	and_b32	 $s6, $s5, 8323072 ;
	shl_u32	 $s7, $s5, 1 ;
	and_b32	 $s7, $s7, 65536 ;
	add_u32	 $s6, $s7, $s6 ;
	or_b32	 $s7, $s6, 1056964608 ;
	and_b32	 $s5, $s5, 8388607 ;
	or_b32	 $s5, $s5, 1056964608 ;
	sub_f32	 $s5, $s5, $s7 ;
	shr_u32	 $s7, $s6, 14 ;
	//ldas_global_u32	$s8, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s7, [$s7] ;
	mul_f32	 $s5, $s5, $s7 ;
	mul_f32	 $s7, $s5, 0F3eaaaaab ;
	mul_f32	 $s8, $s5, $s5 ;
	mad_f32	 $s5, $s5, 0F3d7cd6ea, 0Fbde38e39 ;
	mad_f32	 $s5, $s5, $s8, $s7 ;
	add_u32	 $s3, $s3, -127 ;
	shr_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, -253 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	cvt_s64_s32	$d0, $s3 ;
	mul_u64	 $d0, $d0, 1431655766 ;
	shr_u64	 $d1, $d0, 63 ;
	cvt_u32_u64	$s4, $d1 ;
	shr_u64	 $d0, $d0, 32 ;
	cvt_u32_u64	$s7, $d0 ;
	add_u32	 $s4, $s7, $s4 ;
	mad_u32	 $s3, $s4, -3, $s3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmp_eq_b1_u32	 $c1, $s3, -1 ;
	cmov_b32	 $s7, $c1, 0F3f4b2000, 0F3f214000 ;
	cmov_b32	 $s7, $c0, 0F3f800000, $s7 ;
	cmp_eq_b1_u32	 $c2, $s3, 1 ;
	cmov_b32	 $s7, $c2, 0F3fa14000, $s7 ;
	cmp_eq_b1_u32	 $c3, $s3, 2 ;
	cmov_b32	 $s3, $c3, 0F3fcb2000, $s7 ;
	cmov_b32	 $s7, $c1, 0F397f529f, 0F38a2f98d ;
	cmov_b32	 $s7, $c0, 0F00000000, $s7 ;
	cmov_b32	 $s7, $c2, 0F3922f98d, $s7 ;
	cmov_b32	 $s7, $c3, 0F39ff529f, $s7 ;
	shr_u32	 $s6, $s6, 13 ;
	//ldas_global_u32	$s8, [&__math32_CBRT_TBL] ;
	add_u32	 $s6, $s8, $s6 ;
	ld_readonly_f32	$s8, [$s6 + 4] ;
	mul_f32	 $s9, $s8, $s7 ;
	mad_f32	 $s8, $s8, $s3, $s9 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s7, $s6, $s7, $s8 ;
	mad_f32	 $s7, $s5, $s7, $s7 ;
	mul_f32	 $s3, $s6, $s3 ;
	mad_f32	 $s5, $s5, $s3, $s7 ;
	add_f32	 $s3, $s5, $s3 ;
	shl_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, 1065353216 ;
	mul_f32	 $s3, $s3, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	cmp_ne_b1_u32	 $c0, $s2, 0 ;
	cmp_lt_b1_u32	 $c1, $s2, 2139095040 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcbrt_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pcbrt_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	or_b64	 $d2, $d1, 4607182418800017408 ;
	add_f64	 $d2, $d2, 0Dbff0000000000000 ;
	shr_u64	 $d3, $d1, 32 ;
	cvt_u32_u64	$s0, $d3 ;
	shr_s32	 $s0, $s0, 20 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	and_b64	 $d1, $d1, 4503599627370495 ;
	shr_u64	 $d3, $d1, 43 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 1 ;
	shr_u64	 $d3, $d1, 44 ;
	cvt_u32_u64	$s2, $d3 ;
	or_b32	 $s2, $s2, 256 ;
	add_u32	 $s1, $s2, $s1 ;
	cvt_near_f64_s32	$d3, $s1 ;
	mul_f64	 $d3, $d3, 0Dbf60000000000000 ;
	or_b64	 $d1, $d1, 4602678819172646912 ;
	add_f64	 $d1, $d1, $d3 ;
	add_u32	 $s1, $s1, -256 ;
	shl_u32	 $s2, $s1, 3 ;
	//ldas_global_u32	$s3, [&__math64_CBRT_TBL_INV] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2] ;
	mul_f64	 $d1, $d1, $d3 ;
	fma_f64	 $d3, $d1, 0Dbf98090d6221a247, 0D3f9ee7113506ac13 ;
	fma_f64	 $d3, $d1, $d3, 0Dbfa511e8d2b3183b ;
	fma_f64	 $d3, $d1, $d3, 0D3faf9add3c0ca458 ;
	fma_f64	 $d3, $d1, $d3, 0Dbfbc71c71c71c71c ;
	fma_f64	 $d3, $d1, $d3, 0D3fd5555555555555 ;
	mul_f64	 $d1, $d1, $d3 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_CBRT_TBL] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	shr_u64	 $d2, $d2, 32 ;
	cvt_u32_u64	$s2, $d2 ;
	shr_s32	 $s2, $s2, 20 ;
	add_u32	 $s2, $s0, $s2 ;
	add_u32	 $s2, $s2, -2045 ;
	add_u32	 $s0, $s0, -1023 ;
	cmov_b32	 $s0, $c0, $s2, $s0 ;
	cvt_s64_s32	$d2, $s0 ;
	mul_u64	 $d2, $d2, 1431655766 ;
	shr_u64	 $d4, $d2, 63 ;
	cvt_u32_u64	$s2, $d4 ;
	shr_u64	 $d2, $d2, 32 ;
	cvt_u32_u64	$s3, $d2 ;
	add_u32	 $s2, $s3, $s2 ;
	mad_u32	 $s0, $s2, -3, $s0 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s3, [&__math64_CBRT_TBL_REM] ;
	add_u32	 $s0, $s0, $s3 ;
	ld_readonly_f64	$d2, [$s0 + 40] ;
	mul_f64	 $d4, $d3, $d2 ;
	ld_readonly_f64	$d5, [$s0 + 32] ;
	fma_f64	 $d3, $d3, $d5, $d4 ;
	ld_readonly_f64	$d4, [$s1] ;
	fma_f64	 $d2, $d2, $d4, $d3 ;
	fma_f64	 $d2, $d1, $d2, $d2 ;
	mul_f64	 $d3, $d4, $d5 ;
	fma_f64	 $d1, $d1, $d3, $d2 ;
	add_f64	 $d1, $d1, $d3 ;
	add_u32	 $s0, $s2, 1023 ;
	cvt_u64_u32	$d2, $s0 ;
	shl_u64	 $d2, $d2, 52 ;
	mul_f64	 $d1, $d1, $d2 ;
	copysign_f64	 $d1, $d1, $d0 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s0, $s1 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pceil_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pceil_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_upi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pceil_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pceil_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	cvt_upi_f64_f64	 $d0, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcopysign_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pcopysign_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	copysign_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcopysign_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pcopysign_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	ld_arg_f64	$d1, [%arg_val0] ;
	copysign_f64	 $d0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcos_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pcos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, 2147483647 ;
	mov_b32	$s2, $s1 ;
	cmp_geu_b1_f32	 $c0, $s2, 0F4b000000 ;
	cbr	$c0, @BB55_2 ;
// BB#1:
	mad_f32	 $s0, $s2, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s0, $s0 ;
	mul_f32	 $s3, $s0, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s0, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s5 ;
	sub_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	add_f32	 $s2, $s5, $s2 ;
	mul_f32	 $s3, $s0, 0F33a22168 ;
	sub_f32	 $s4, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s0, 0F33a22168, $s3 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s4, $s2 ;
	mul_f32	 $s3, $s0, 0F27c234c4 ;
	sub_f32	 $s4, $s2, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s4, $s2 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s0, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s0, $s0 ;
	brn	@BB55_3 ;
@BB55_2:
	and_b32	 $s0, $s0, 8388607 ;
	or_b32	 $s0, $s0, 8388608 ;
	mul_hi_u32	 $s2, $s0, -28220501 ;
	mad_u32	 $s3, $s0, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s0, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s0, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s0, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s0, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s0, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s0, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s0, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s0, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s0, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s0, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s0, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s1, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s9, $c4, $s13, $s2 ;
	shl_u32	 $s2, $s9, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s2, $s10 ;
	shr_s32	 $s13, $s2, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s0, $s0, -28220501 ;
	cmov_b32	 $s0, $c0, $s0, $s3 ;
	cmov_b32	 $s0, $c1, $s0, $s4 ;
	cmov_b32	 $s0, $c2, $s0, $s5 ;
	cmov_b32	 $s0, $c3, $s0, $s6 ;
	shr_u32	 $s3, $s0, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s0, $s0, 30 ;
	or_b32	 $s0, $s4, $s0 ;
	xor_b32	 $s0, $s13, $s0 ;
	shr_u32	 $s0, $s0, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s0, $s5, $s0 ;
	shr_u32	 $s5, $s0, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s0, $s0, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s0, $s4, $s0 ;
	shr_u32	 $s0, $s0, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s2, $s2, -2147483648 ;
	or_b32	 $s4, $s4, $s2 ;
	or_b32	 $s0, $s4, $s0 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s2, $s4, $s2 ;
	or_b32	 $s2, $s2, $s3 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	fma_f32	 $s2, $s2, 0F33a22168, $s4 ;
	fma_f32	 $s0, $s0, 0F3fc90fda, $s2 ;
	add_f32	 $s2, $s3, $s0 ;
	sub_f32	 $s3, $s2, $s3 ;
	sub_f32	 $s3, $s0, $s3 ;
	shr_u32	 $s0, $s9, 30 ;
	extract_u32	 $s4, $s9, 29, 1 ;
	add_u32	 $s0, $s4, $s0 ;
@BB55_3:                                // %__cos_f32.exit
	neg_f32	 $s4, $s2 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s2, $s2 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s2 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s2 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s2, $s2, $s3 ;
	neg_f32	 $s2, $s2 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_u32	 $c0, $s0, 1 ;
	cvt_u32_b1	$s0, $c0 ;
	shl_u32	 $s0, $s0, 31 ;
	xor_b32	 $s0, $s2, $s0 ;
	cmp_gt_b1_u32	 $c0, $s1, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcos_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[18];
@__amd_amp_Pcos_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d0, $d0 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d0, 0D42e0000000000000 ;
	cbr	$c0, @BB56_2 ;
// BB#1:
	fma_f64	 $d1, $d0, 0D3fe45f306dc9c883, 0D3fe0000000000000 ;
	cvt_zeroi_f64_f64	 $d1, $d1 ;
	mul_f64	 $d2, $d1, 0Dbff921fb54442d18 ;
	neg_f64	 $d3, $d2 ;
	fma_f64	 $d3, 0Dbff921fb54442d18, $d1, $d3 ;
	mul_f64	 $d4, $d1, 0Dbc91a62633145c06 ;
	add_f64	 $d5, $d3, $d4 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d2, $d6, $d2 ;
	sub_f64	 $d2, $d5, $d2 ;
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d5, $d1, 0Db94c1cd129024e08 ;
	add_f64	 $d3, $d5, $d3 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, 0Dbc91a62633145c06, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	neg_f64	 $d4, $d5 ;
	fma_f64	 $d4, 0Db94c1cd129024e08, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d2, $d3 ;
	add_f64	 $d0, $d0, $d6 ;
	add_f64	 $d5, $d0, $d4 ;
	sub_f64	 $d0, $d5, $d0 ;
	sub_f64	 $d0, $d4, $d0 ;
	sub_f64	 $d2, $d4, $d2 ;
	sub_f64	 $d2, $d3, $d2 ;
	add_f64	 $d0, $d0, $d2 ;
	cvt_zeroi_s64_f64	$d1, $d1 ;
	cvt_u32_u64	$s0, $d1 ;
	brn	@BB56_3 ;
@BB56_2:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d0 ;
	shr_s64	 $d5, $d5, 52 ;
	cvt_u32_u64	$s0, $d5 ;
	add_u32	 $s0, $s0, -1023 ;
	shr_s32	 $s0, $s0, 3 ;
	add_u32	 $s0, $s0, 17 ;
	max_s32	 $s0, 23, $s0 ;
	sub_u32	 $s1, 150, $s0 ;
	and_b32	 $s2, $s1, -16 ;
	//ldas_global_u32	$s3, [&__math64_PIBITS] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_u32	$s3, [$s2 + 20] ;
	ld_readonly_u32	$s4, [$s2 + 16] ;
	extract_u32	 $s5, $s1, 2, 2 ;
	cmp_ne_b1_u32	 $c0, $s5, 1 ;
	cmov_b32	 $s6, $c0, $s4, $s3 ;
	ld_readonly_u32	$s7, [$s2 + 24] ;
	cmp_ne_b1_u32	 $c1, $s5, 2 ;
	cmov_b32	 $s6, $c1, $s6, $s7 ;
	ld_readonly_u32	$s8, [$s2 + 28] ;
	cmp_ne_b1_u32	 $c2, $s5, 3 ;
	cmov_b32	 $s5, $c2, $s6, $s8 ;
	cmov_b32	 $s6, $c0, $s3, $s7 ;
	cmov_b32	 $s6, $c1, $s6, $s8 ;
	ld_readonly_u32	$s9, [$s2 + 32] ;
	cmov_b32	 $s6, $c2, $s6, $s9 ;
	bytealign_b32	 $s10, $s6, $s5, $s1 ;
	shr_u32	 $s11, $s10, 16 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s8, $c1, $s8, $s9 ;
	ld_readonly_u32	$s9, [$s2 + 36] ;
	cmov_b32	 $s8, $c2, $s8, $s9 ;
	bytealign_b32	 $s6, $s8, $s6, $s1 ;
	shl_u32	 $s8, $s6, 16 ;
	or_b32	 $s8, $s8, $s11 ;
	cvt_u64_u32	$d5, $s8 ;
	shr_u32	 $s6, $s6, 16 ;
	shl_u32	 $s0, $s0, 3 ;
	or_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_s32	 $c3, $s0, 1018 ;
	cmov_b32	 $s8, $c3, 136, 0 ;
	sub_u32	 $s0, $s8, $s0 ;
	shl_u32	 $s0, $s0, 20 ;
	add_u32	 $s8, $s0, 1278214144 ;
	or_b32	 $s6, $s6, $s8 ;
	cvt_u64_u32	$d1, $s6 ;
	shl_u64	 $d1, $d1, 32 ;
	or_b64	 $d5, $d5, $d1 ;
	cvt_u64_u32	$d1, $s8 ;
	shl_u64	 $d1, $d1, 32 ;
	sub_f64	 $d5, $d5, $d1 ;
	cmov_b64	 $d1, $c3, 0D3770000000000000, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d5, $d0 ;
	neg_f64	 $d2, $d1 ;
	fma_f64	 $d5, $d5, $d0, $d2 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	ld_readonly_u32	$s6, [$s2 + 12] ;
	cmov_b32	 $s8, $c0, $s6, $s4 ;
	cmov_b32	 $s8, $c1, $s8, $s3 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	bytealign_b32	 $s5, $s5, $s7, $s1 ;
	cvt_u64_u32	$d2, $s5 ;
	and_b32	 $s5, $s10, 65535 ;
	add_u32	 $s8, $s0, 1227882496 ;
	or_b32	 $s5, $s5, $s8 ;
	cvt_u64_u32	$d3, $s5 ;
	shl_u64	 $d3, $d3, 32 ;
	or_b64	 $d2, $d2, $d3 ;
	cvt_u64_u32	$d3, $s8 ;
	shl_u64	 $d3, $d3, 32 ;
	sub_f64	 $d5, $d2, $d3 ;
	st_spill_u64	$d5, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d5, $d0 ;
	add_f64	 $d3, $d1, $d2 ;
	sub_f64	 $d1, $d3, $d1 ;
	sub_f64	 $d5, $d2, $d1 ;
	st_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	ld_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	add_f64	 $d4, $d5, $d1 ;
	ld_readonly_u32	$s5, [$s2 + 8] ;
	ld_readonly_u32	$s8, [$s2 + 4] ;
	cmov_b32	 $s9, $c0, $s8, $s5 ;
	cmov_b32	 $s9, $c1, $s9, $s6 ;
	cmov_b32	 $s9, $c2, $s9, $s4 ;
	cmov_b32	 $s10, $c0, $s5, $s6 ;
	cmov_b32	 $s4, $c1, $s10, $s4 ;
	cmov_b32	 $s3, $c2, $s4, $s3 ;
	bytealign_b32	 $s4, $s3, $s9, $s1 ;
	shr_u32	 $s10, $s4, 16 ;
	bytealign_b32	 $s3, $s7, $s3, $s1 ;
	shl_u32	 $s7, $s3, 16 ;
	or_b32	 $s7, $s7, $s10 ;
	cvt_u64_u32	$d6, $s7 ;
	shr_u32	 $s3, $s3, 16 ;
	add_u32	 $s7, $s0, 1177550848 ;
	or_b32	 $s3, $s3, $s7 ;
	cvt_u64_u32	$d7, $s3 ;
	shl_u64	 $d7, $d7, 32 ;
	or_b64	 $d6, $d6, $d7 ;
	cvt_u64_u32	$d7, $s7 ;
	shl_u64	 $d7, $d7, 32 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	mul_f64	 $d5, $d6, $d0 ;
	st_spill_u64	$d5, [%stack][24] ; // 8-byte Folded Reload
	add_f64	 $d1, $d4, $d5 ;
	mul_f64	 $d3, $d3, 0D3f50000000000000 ;
	fract_f64	 $d3, $d3 ;
	mul_f64	 $d3, $d3, 0D4090000000000000 ;
	add_f64	 $d6, $d3, $d1 ;
	cmp_lt_b1_f64	 $c3, $d6, 0D0000000000000000 ;
	cmov_b64	 $d6, $c3, 0D4090000000000000, 0D0000000000000000 ;
	add_f64	 $d3, $d3, $d6 ;
	add_f64	 $d6, $d3, $d1 ;
	fract_f64	 $d7, $d6 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d3, $d6 ;
	add_f64	 $d5, $d3, $d1 ;
	st_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d1, $d4 ;
	ld_spill_u64	$d5, [%stack][24] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d5, $d1 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	ld_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d2 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d2, $d0, $d1 ;
	add_f64	 $d2, $d1, $d5 ;
	ld_readonly_u32	$s2, [$s2] ;
	cmov_b32	 $s2, $c0, $s2, $s8 ;
	cmov_b32	 $s2, $c1, $s2, $s5 ;
	cmov_b32	 $s2, $c2, $s2, $s6 ;
	bytealign_b32	 $s1, $s9, $s2, $s1 ;
	cvt_u64_u32	$d3, $s1 ;
	and_b32	 $s1, $s4, 65535 ;
	add_u32	 $s0, $s0, 1127219200 ;
	or_b32	 $s1, $s0, $s1 ;
	cvt_u64_u32	$d4, $s1 ;
	shl_u64	 $d4, $d4, 32 ;
	or_b64	 $d3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	shl_u64	 $d4, $d4, 32 ;
	sub_f64	 $d3, $d3, $d4 ;
	mul_f64	 $d4, $d3, $d0 ;
	add_f64	 $d6, $d2, $d4 ;
	ld_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	add_f64	 $d7, $d5, $d6 ;
	sub_f64	 $d5, $d7, $d5 ;
	sub_f64	 $d5, $d6, $d5 ;
	st_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d2, $d1 ;
	ld_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d5, $d5, $d1 ;
	sub_f64	 $d1, $d6, $d2 ;
	sub_f64	 $d1, $d4, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	ld_spill_u64	$d1, [%stack][24] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d1 ;
	ld_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d6, $d0, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	neg_f64	 $d1, $d4 ;
	fma_f64	 $d0, $d3, $d0, $d1 ;
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d5, 0D3fe0000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_near_f32_s32	$s1, $s0 ;
	cvt_f64_f32	$d1, $s1 ;
	sub_f64	 $d5, $d5, $d1 ;
	add_f64	 $d1, $d5, $d7 ;
	sub_f64	 $d5, $d1, $d5 ;
	sub_f64	 $d5, $d7, $d5 ;
	add_f64	 $d0, $d5, $d0 ;
	mul_f64	 $d2, $d1, 0D3ff921fb54442d18 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d5, $d1, 0D3ff921fb54442d18, $d5 ;
	fma_f64	 $d5, $d1, 0D3c91a62633145c06, $d5 ;
	fma_f64	 $d0, $d0, 0D3ff921fb54442d18, $d5 ;
	add_f64	 $d5, $d2, $d0 ;
	sub_f64	 $d1, $d5, $d2 ;
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	cvt_near_f32_f64	$s1, $d6 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	add_u32	 $s0, $s0, $s1 ;
@BB56_3:                                // %__cos_f64.exit
	mul_f64	 $d1, $d5, $d5 ;
	mul_f64	 $d2, $d1, 0D3fe0000000000000 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	sub_f64	 $d4, 0D3ff0000000000000, $d3 ;
	sub_f64	 $d2, $d4, $d2 ;
	fma_f64	 $d2, $d5, $d0, $d2 ;
	fma_f64	 $d4, 0Dbda907db46cc5e42, $d1, 0D3e21eeb69037ab78 ;
	fma_f64	 $d4, $d4, $d1, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d4, $d4, $d1, 0D3efa01a019f4ec90 ;
	fma_f64	 $d4, $d4, $d1, 0Dbf56c16c16c16967 ;
	fma_f64	 $d4, $d4, $d1, 0D3fa5555555555555 ;
	mul_f64	 $d6, $d1, $d1 ;
	fma_f64	 $d2, $d4, $d6, $d2 ;
	add_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d3, 0D3de5e0b2f9a43bb8, $d1, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d3, $d3, $d1, 0D3ec71de3796cde01 ;
	fma_f64	 $d3, $d3, $d1, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d3, $d3, $d1, 0D3f81111111110bb3 ;
	mul_f64	 $d4, $d1, $d5 ;
	neg_f64	 $d4, $d4 ;
	mul_f64	 $d6, $d0, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d4, $d3, $d6 ;
	neg_f64	 $d0, $d0 ;
	fma_f64	 $d0, $d3, $d1, $d0 ;
	fma_f64	 $d0, $d4, 0Dbfc5555555555555, $d0 ;
	sub_f64	 $d0, $d5, $d0 ;
	neg_f64	 $d0, $d0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	and_b64	 $d1, $d0, 4294967295 ;
	shr_u64	 $d0, $d0, 32 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_u32	 $c0, $s0, 1 ;
	cvt_u32_b1	$s0, $c0 ;
	shl_u32	 $s0, $s0, 31 ;
	xor_b32	 $s0, $s1, $s0 ;
	cvt_u64_u32	$d0, $s0 ;
	shl_u64	 $d0, $d0, 32 ;
	or_b64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	class_f64	 $c0, $d1, 3 ;
	class_f64	 $c1, $d1, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_u32_b1	$s1, $c0 ;
	or_b32	 $s0, $s0, $s1 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcosh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pcosh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	add_f32	 $s2, $s1, 0Fbf317280 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F00000000 ;
	cmov_b32	 $s3, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s3, $s2, 0F3fb8aa3b, $s3 ;
	cvt_zeroi_s32_f32	$s3, $s3 ;
	cvt_near_f32_s32	$s4, $s3 ;
	mad_f32	 $s5, $s4, 0Fbf317180, $s2 ;
	mul_f32	 $s4, $s4, 0Fb717f7d1 ;
	add_f32	 $s6, $s5, $s4 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s8, $s7, $s8, 0F388ab355 ;
	mad_f32	 $s8, $s7, $s8, 0Fbb360b61 ;
	mad_f32	 $s8, $s7, $s8, 0F3e2aaaab ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s7, $s7, $s8, $s6 ;
	mul_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s7, 0F40000000, $s7 ;
	div_f32	 $s6, $s6, $s7 ;
	neg_f32	 $s4, $s4 ;
	sub_f32	 $s4, $s4, $s6 ;
	sub_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	shl_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s4, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0Fc2aeac4f ;
	cmov_b32	 $s3, $c0, 0F00000000, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F42b17218 ;
	cmov_b32	 $s3, $c0, $s3, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s2, $s2 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	mad_f32	 $s2, 0F36d01087, $s2, $s2 ;
	cvt_zeroi_s32_f32	$s3, $s1 ;
	cmp_gt_b1_u32	 $c0, $s3, 36 ;
	cmov_b32	 $s3, $c0, 0, $s3 ;
	cvt_near_f32_s32	$s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	mul_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s4, $s5 ;
	mad_f32	 $s7, $s5, 0F2b5a092d, 0F2f308e59 ;
	mad_f32	 $s7, $s5, $s7, 0F32d73230 ;
	mad_f32	 $s7, $s5, $s7, 0F3638ef1d ;
	mad_f32	 $s7, $s5, $s7, 0F39500d01 ;
	mad_f32	 $s7, $s5, $s7, 0F3c088889 ;
	mad_f32	 $s7, $s5, $s7, 0F3e2aaaab ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2d4cc25c, 0F310f72b2 ;
	mad_f32	 $s6, $s5, $s6, 0F3493f283 ;
	mad_f32	 $s6, $s5, $s6, 0F37d00d01 ;
	mad_f32	 $s6, $s5, $s6, 0F3ab60b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mad_f32	 $s6, $s5, $s6, 0F3f000000 ;
	mad_f32	 $s5, $s6, $s5, 0F3f800000 ;
	shl_u32	 $s3, $s3, 3 ;
	//ldas_global_u32	$s6, [&__math32_SINHCOSH_TBL] ;
	add_u32	 $s3, $s6, $s3 ;
	ld_readonly_f32	$s6, [$s3 + 4] ;
	mul_f32	 $s5, $s6, $s5 ;
	ld_readonly_f32	$s3, [$s3] ;
	mad_f32	 $s3, $s3, $s4, $s5 ;
	cmp_ltu_b1_f32	 $c0, $s1, 0F41051592 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cmp_ltu_b1_f32	 $c0, $s1, 0F42b2d4fd ;
	cmov_b32	 $s1, $c0, $s2, 0F7f800000 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095040 ;
	cmov_b32	 $s1, $c0, 0F7fc00000, $s1 ;
	cmp_lt_b1_u32	 $c0, $s0, 947912704 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcosh_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[2];
@__amd_amp_Pcosh_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbfe62e42fefa3800 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d2 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d3, $d5, $d6, $d3 ;
	add_f64	 $d3, $d3, $d4 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c0, $d2, $d2 ;
	cmov_b64	 $d3, $c0, $d2, $d3 ;
	cmp_gt_b1_f64	 $c0, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c0, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c0, 0D0000000000000000, $d3 ;
	fma_f64	 $d2, $d2, 0Dbd2ef35793c76641, $d2 ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	min_s32	 $s0, $s0, 36 ;
	cvt_near_f64_s32	$d3, $s0 ;
	sub_f64	 $d3, $d1, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d3, $d4 ;
	fma_f64	 $d6, $d4, 0D3d6b4125921ea08b, 0D3de611cb2bdcb7be ;
	fma_f64	 $d6, $d4, $d6, 0D3e5ae6460fbe61c0 ;
	fma_f64	 $d6, $d4, $d6, 0D3ec71de3a4e13e7d ;
	fma_f64	 $d6, $d4, $d6, 0D3f2a01a01a01ee80 ;
	fma_f64	 $d6, $d4, $d6, 0D3f811111111110fd ;
	fma_f64	 $d6, $d4, $d6, 0D3fc5555555555555 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d6, $d4, 0D3da9984b7f63fcd7, 0D3e21ee56385b7b20 ;
	fma_f64	 $d6, $d4, $d6, 0D3e927e5069f1cb55 ;
	fma_f64	 $d6, $d4, $d6, 0D3efa01a019079011 ;
	fma_f64	 $d6, $d4, $d6, 0D3f56c16c16c212e5 ;
	fma_f64	 $d6, $d4, $d6, 0D3fa5555555555502 ;
	fma_f64	 $d6, $d4, $d6, 0D3fe0000000000000 ;
	mul_f64	 $d4, $d4, $d6 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_COSH_TBL] ;
	add_u32	 $s1, $s1, $s0 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	mul_f64	 $d7, $d6, $d4 ;
	//ldas_global_u32	$s2, [&__math64_SINH_TBL] ;
	add_u32	 $s0, $s2, $s0 ;
	ld_readonly_f64	$d0, [$s0 + 8] ;
	fma_f64	 $d7, $d0, $d5, $d7 ;
	fma_f64	 $d0, $d0, $d3, $d7 ;
	add_f64	 $d0, $d0, $d6 ;
	ld_readonly_f64	$d6, [$s1] ;
	fma_f64	 $d0, $d6, $d4, $d0 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d0, $d4, $d5, $d0 ;
	fma_f64	 $d0, $d4, $d3, $d0 ;
	add_f64	 $d0, $d0, $d6 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d0, $c0, 0D3ff0000000000000, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d1, 0D4032b708872320e2 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	cmp_ltu_b1_f64	 $c0, $d1, 0D408633ce8fb9f87e ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	class_f64	 $c0, $d2, 516 ;
	class_f64	 $c1, $d2, 3 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_u32_b1	$s1, $c0 ;
	or_b32	 $s0, $s0, $s1 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcospi_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pcospi_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cvt_zeroi_s32_f32	$s2, $s1 ;
	cvt_near_f32_s32	$s3, $s2 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s3, 0F3f800000, $s1 ;
	add_f32	 $s4, $s1, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s1, 0F3f400000 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	sub_f32	 $s4, 0F3f000000, $s1 ;
	cmp_lt_b1_f32	 $c1, $s1, 0F3f000000 ;
	cmov_b32	 $s3, $c1, $s4, $s3 ;
	cmp_le_b1_f32	 $c2, $s1, 0F3e800000 ;
	cmov_b32	 $s3, $c2, $s1, $s3 ;
	mul_f32	 $s3, $s3, 0F40490fdb ;
	mul_f32	 $s4, $s3, $s3 ;
	mul_f32	 $s5, $s3, $s4 ;
	mad_f32	 $s6, $s4, 0F3636df25, 0Fb95009d4 ;
	mad_f32	 $s6, $s4, $s6, 0F3c088887 ;
	mad_f32	 $s6, $s4, $s6, 0Fbe2aaaab ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s5, $s4, 0Fb492923a, 0F37d00ae3 ;
	mad_f32	 $s5, $s4, $s5, 0Fbab60b60 ;
	mad_f32	 $s5, $s4, $s5, 0F3d2aaaab ;
	mad_f32	 $s6, $s4, 0Fbf000000, 0F3f800000 ;
	mul_f32	 $s4, $s4, $s4 ;
	mad_f32	 $s4, $s4, $s5, $s6 ;
	cmp_gtu_b1_f32	 $c2, $s1, 0F3e800000 ;
	and_b1	 $c0, $c0, $c2 ;
	cmov_b32	 $s1, $c0, $s3, $s4 ;
	shl_u32	 $s2, $s2, 31 ;
	xor_b32	 $s3, $s2, -2147483648 ;
	cmov_b32	 $s3, $c1, $s2, $s3 ;
	xor_b32	 $s1, $s1, $s3 ;
	cmp_lt_b1_u32	 $c0, $s0, 1266679808 ;
	cmp_lt_b1_u32	 $c1, $s0, 2139095040 ;
	cmov_b32	 $s3, $c1, 1065353216, 2143289344 ;
	or_b32	 $s2, $s2, 1065353216 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	cmp_lt_b1_u32	 $c0, $s0, 1258291200 ;
	cmov_b32	 $s0, $c0, $s1, $s2 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pcospi_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[4];
@__amd_amp_Pcospi_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	and_b64	 $d0, $d0, 9223372036854775807 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d1, $d0 ;
	cvt_zeroi_s64_f64	$d0, $d1 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d2, $d0 ;
	sub_f64	 $d2, $d1, $d2 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	add_f64	 $d4, $d2, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d2, 0D3fe8000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	sub_f64	 $d4, 0D3fe0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c1, $d2, 0D3fe0000000000000 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cmp_le_b1_f64	 $c2, $d2, 0D3fd0000000000000 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	mul_f64	 $d3, $d3, 0D400921fb54442d18 ;
	mul_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, 0D3fe0000000000000 ;
	sub_f64	 $d6, 0D3ff0000000000000, $d5 ;
	sub_f64	 $d7, 0D3ff0000000000000, $d6 ;
	sub_f64	 $d5, $d7, $d5 ;
	fma_f64	 $d5, $d3, 0D0000000000000000, $d5 ;
	fma_f64	 $d7, 0Dbda907db46cc5e42, $d4, 0D3e21eeb69037ab78 ;
	fma_f64	 $d7, $d7, $d4, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d7, $d7, $d4, 0D3efa01a019f4ec90 ;
	fma_f64	 $d7, $d7, $d4, 0Dbf56c16c16c16967 ;
	fma_f64	 $d7, $d7, $d4, 0D3fa5555555555555 ;
	mul_f64	 $d0, $d4, $d4 ;
	fma_f64	 $d0, $d7, $d0, $d5 ;
	add_f64	 $d0, $d6, $d0 ;
	fma_f64	 $d5, 0D3de5e0b2f9a43bb8, $d4, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d5, $d5, $d4, 0D3ec71de3796cde01 ;
	fma_f64	 $d5, $d5, $d4, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d5, $d5, $d4, 0D3f81111111110bb3 ;
	mul_f64	 $d6, $d4, $d3 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d5, $d6, $d5, 0D0000000000000000 ;
	fma_f64	 $d4, $d5, $d4, 0D8000000000000000 ;
	fma_f64	 $d4, $d6, 0Dbfc5555555555555, $d4 ;
	sub_f64	 $d3, $d3, $d4 ;
	cmp_gtu_b1_f64	 $c2, $d2, 0D3fd0000000000000 ;
	and_b1	 $c0, $c0, $c2 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	shl_u64	 $d2, $d2, 63 ;
	xor_b64	 $d3, $d2, -9223372036854775808 ;
	cmov_b64	 $d3, $c1, $d2, $d3 ;
	xor_b64	 $d0, $d0, $d3 ;
	ld_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_u64	 $c0, $d3, 9218868437227405312 ;
	cmov_b64	 $d3, $c0, 4607182418800017408, 9221120237041090560 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D4340000000000000 ;
	or_b64	 $d2, $d2, 4607182418800017408 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D4330000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perf_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Perf_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	add_f32	 $s3, $s2, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F3fa00000 ;
	mul_f32	 $s4, $s2, $s2 ;
	div_f32	 $s5, 0F3f800000, $s4 ;
	cmov_b32	 $s3, $c0, $s3, $s5 ;
	cmp_lt_b1_f32	 $c1, $s2, 0F3f580000 ;
	cmov_b32	 $s3, $c1, $s4, $s3 ;
	mad_f32	 $s4, $s3, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s4, $s3, $s4, 0Fc41f6441 ;
	mad_f32	 $s4, $s3, $s4, 0Fc320a2ea ;
	mad_f32	 $s4, $s3, $s4, 0Fc18e104b ;
	mad_f32	 $s4, $s3, $s4, 0Fbf4c9dd4 ;
	mad_f32	 $s4, $s3, $s4, 0Fbc21a092 ;
	mad_f32	 $s5, $s3, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s5, $s3, $s5, 0Fc3389ae7 ;
	mad_f32	 $s5, $s3, $s5, 0Fc322658c ;
	mad_f32	 $s5, $s3, $s5, 0Fc2798057 ;
	mad_f32	 $s5, $s3, $s5, 0Fc128f022 ;
	mad_f32	 $s5, $s3, $s5, 0Fbf31a0b7 ;
	mad_f32	 $s5, $s3, $s5, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F4036db6e ;
	cmov_b32	 $s4, $c2, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s5, $s3, $s5, 0Fbde31cc2 ;
	mad_f32	 $s5, $s3, $s5, 0F3ea2fe54 ;
	mad_f32	 $s5, $s3, $s5, 0Fbebe9208 ;
	mad_f32	 $s5, $s3, $s5, 0F3ed46805 ;
	mad_f32	 $s5, $s3, $s5, 0Fbb1acdc6 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s5, $s3, $s5, 0Fbce9528f ;
	mad_f32	 $s5, $s3, $s5, 0Fbea66beb ;
	mad_f32	 $s5, $s3, $s5, 0F3e0375d4 ;
	cmov_b32	 $s4, $c1, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s5, $s3, $s5, 0F451f90ce ;
	mad_f32	 $s5, $s3, $s5, 0F4547fdbb ;
	mad_f32	 $s5, $s3, $s5, 0F44c01759 ;
	mad_f32	 $s5, $s3, $s5, 0F43a2e571 ;
	mad_f32	 $s5, $s3, $s5, 0F41f2b459 ;
	mad_f32	 $s6, $s3, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s6, $s3, $s6, 0F42d9451f ;
	mad_f32	 $s6, $s3, $s6, 0F43d6810b ;
	mad_f32	 $s6, $s3, $s6, 0F442158c9 ;
	mad_f32	 $s6, $s3, $s6, 0F43d9486f ;
	mad_f32	 $s6, $s3, $s6, 0F4309a863 ;
	mad_f32	 $s6, $s3, $s6, 0F419d35ce ;
	cmov_b32	 $s5, $c2, $s6, $s5 ;
	mad_f32	 $s6, $s3, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s6, $s3, $s6, 0F3e013307 ;
	mad_f32	 $s6, $s3, $s6, 0F3d931ae7 ;
	mad_f32	 $s6, $s3, $s6, 0F3f0a5785 ;
	mad_f32	 $s6, $s3, $s6, 0F3dd9f331 ;
	cmov_b32	 $s5, $c0, $s6, $s5 ;
	mad_f32	 $s6, $s3, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s6, $s3, $s6, 0F3ba68116 ;
	mad_f32	 $s6, $s3, $s6, 0F3d852a63 ;
	mad_f32	 $s6, $s3, $s6, 0F3ecbbbce ;
	cmov_b32	 $s5, $c1, $s6, $s5 ;
	mad_f32	 $s3, $s3, $s5, 0F3f800000 ;
	div_f32	 $s3, $s4, $s3 ;
	and_b32	 $s4, $s1, 2147479552 ;
	add_f32	 $s5, $s4, $s2 ;
	sub_f32	 $s6, $s4, $s2 ;
	mad_f32	 $s5, $s6, $s5, $s3 ;
	cmp_lt_b1_f32	 $c2, $s5, 0F00000000 ;
	cmov_b32	 $s6, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s6, $s5, 0F3fb8aa3b, $s6 ;
	cvt_zeroi_s32_f32	$s6, $s6 ;
	cvt_near_f32_s32	$s7, $s6 ;
	mad_f32	 $s8, $s7, 0Fbf317180, $s5 ;
	mul_f32	 $s7, $s7, 0Fb717f7d1 ;
	add_f32	 $s9, $s8, $s7 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s11, $s10, $s11, 0F388ab355 ;
	mad_f32	 $s11, $s10, $s11, 0Fbb360b61 ;
	mad_f32	 $s11, $s10, $s11, 0F3e2aaaab ;
	neg_f32	 $s11, $s11 ;
	mad_f32	 $s10, $s10, $s11, $s9 ;
	mul_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s10, 0F40000000, $s10 ;
	div_f32	 $s9, $s9, $s10 ;
	neg_f32	 $s7, $s7 ;
	sub_f32	 $s7, $s7, $s9 ;
	sub_f32	 $s7, $s7, $s8 ;
	sub_f32	 $s7, 0F3f800000, $s7 ;
	shl_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s7, $s6 ;
	cmp_lt_b1_f32	 $c2, $s5, 0Fc2aeac4f ;
	cmov_b32	 $s6, $c2, 0F00000000, $s6 ;
	cmp_lt_b1_f32	 $c2, $s5, 0F42b17218 ;
	cmov_b32	 $s6, $c2, $s6, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s5, $s5 ;
	cmov_b32	 $s5, $c2, $s5, $s6 ;
	neg_f32	 $s6, $s4 ;
	mad_f32	 $s4, $s6, $s4, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c2, $s4, 0F00000000 ;
	cmov_b32	 $s6, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s6, $s4, 0F3fb8aa3b, $s6 ;
	cvt_zeroi_s32_f32	$s6, $s6 ;
	cvt_near_f32_s32	$s7, $s6 ;
	mad_f32	 $s8, $s7, 0Fbf317180, $s4 ;
	mul_f32	 $s7, $s7, 0Fb717f7d1 ;
	add_f32	 $s9, $s8, $s7 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s11, $s10, $s11, 0F388ab355 ;
	mad_f32	 $s11, $s10, $s11, 0Fbb360b61 ;
	mad_f32	 $s11, $s10, $s11, 0F3e2aaaab ;
	neg_f32	 $s11, $s11 ;
	mad_f32	 $s10, $s10, $s11, $s9 ;
	mul_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s10, 0F40000000, $s10 ;
	div_f32	 $s9, $s9, $s10 ;
	neg_f32	 $s7, $s7 ;
	sub_f32	 $s7, $s7, $s9 ;
	sub_f32	 $s7, $s7, $s8 ;
	sub_f32	 $s7, 0F3f800000, $s7 ;
	shl_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s7, $s6 ;
	cmp_lt_b1_f32	 $c2, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s6, $c2, 0F00000000, $s6 ;
	cmp_lt_b1_f32	 $c2, $s4, 0F42b17218 ;
	cmov_b32	 $s6, $c2, $s6, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s4, $s4 ;
	cmov_b32	 $s4, $c2, $s4, $s6 ;
	mul_f32	 $s4, $s4, $s5 ;
	div_f32	 $s4, $s4, $s2 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F40c00000 ;
	cmov_b32	 $s4, $c2, $s4, 0F3f800000 ;
	add_f32	 $s5, $s3, 0F3f58560b ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	and_b32	 $s1, $s1, -2147483648 ;
	or_b32	 $s1, $s4, $s1 ;
	mad_f32	 $s3, $s0, $s3, $s0 ;
	cmov_b32	 $s1, $c1, $s3, $s1 ;
	mul_f32	 $s3, $s0, 0F3f8375d4 ;
	mad_f32	 $s3, 0F41000000, $s0, $s3 ;
	mul_f32	 $s3, $s3, 0F3e000000 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F31800000 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perf_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[4];
@__amd_amp_Perf_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s3, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s2, $c2, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s3, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c2, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c3, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d0, $c2, $d3, $d0 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfc_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Perfc_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	add_f32	 $s3, $s2, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F3fa00000 ;
	mul_f32	 $s4, $s2, $s2 ;
	div_f32	 $s5, 0F3f800000, $s4 ;
	cmov_b32	 $s3, $c0, $s3, $s5 ;
	cmp_lt_b1_f32	 $c1, $s2, 0F3f580000 ;
	cmov_b32	 $s3, $c1, $s4, $s3 ;
	mad_f32	 $s4, $s3, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s4, $s3, $s4, 0Fc41f6441 ;
	mad_f32	 $s4, $s3, $s4, 0Fc320a2ea ;
	mad_f32	 $s4, $s3, $s4, 0Fc18e104b ;
	mad_f32	 $s4, $s3, $s4, 0Fbf4c9dd4 ;
	mad_f32	 $s4, $s3, $s4, 0Fbc21a092 ;
	mad_f32	 $s5, $s3, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s5, $s3, $s5, 0Fc3389ae7 ;
	mad_f32	 $s5, $s3, $s5, 0Fc322658c ;
	mad_f32	 $s5, $s3, $s5, 0Fc2798057 ;
	mad_f32	 $s5, $s3, $s5, 0Fc128f022 ;
	mad_f32	 $s5, $s3, $s5, 0Fbf31a0b7 ;
	mad_f32	 $s5, $s3, $s5, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F4036db6d ;
	cmov_b32	 $s4, $c2, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s5, $s3, $s5, 0Fbde31cc2 ;
	mad_f32	 $s5, $s3, $s5, 0F3ea2fe54 ;
	mad_f32	 $s5, $s3, $s5, 0Fbebe9208 ;
	mad_f32	 $s5, $s3, $s5, 0F3ed46805 ;
	mad_f32	 $s5, $s3, $s5, 0Fbb1acdc6 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s5, $s3, $s5, 0Fbce9528f ;
	mad_f32	 $s5, $s3, $s5, 0Fbea66beb ;
	mad_f32	 $s5, $s3, $s5, 0F3e0375d4 ;
	cmov_b32	 $s4, $c1, $s5, $s4 ;
	mad_f32	 $s5, $s3, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s5, $s3, $s5, 0F451f90ce ;
	mad_f32	 $s5, $s3, $s5, 0F4547fdbb ;
	mad_f32	 $s5, $s3, $s5, 0F44c01759 ;
	mad_f32	 $s5, $s3, $s5, 0F43a2e571 ;
	mad_f32	 $s5, $s3, $s5, 0F41f2b459 ;
	mad_f32	 $s6, $s3, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s6, $s3, $s6, 0F42d9451f ;
	mad_f32	 $s6, $s3, $s6, 0F43d6810b ;
	mad_f32	 $s6, $s3, $s6, 0F442158c9 ;
	mad_f32	 $s6, $s3, $s6, 0F43d9486f ;
	mad_f32	 $s6, $s3, $s6, 0F4309a863 ;
	mad_f32	 $s6, $s3, $s6, 0F419d35ce ;
	cmov_b32	 $s5, $c2, $s6, $s5 ;
	mad_f32	 $s6, $s3, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s6, $s3, $s6, 0F3e013307 ;
	mad_f32	 $s6, $s3, $s6, 0F3d931ae7 ;
	mad_f32	 $s6, $s3, $s6, 0F3f0a5785 ;
	mad_f32	 $s6, $s3, $s6, 0F3dd9f331 ;
	cmov_b32	 $s5, $c0, $s6, $s5 ;
	mad_f32	 $s6, $s3, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s6, $s3, $s6, 0F3ba68116 ;
	mad_f32	 $s6, $s3, $s6, 0F3d852a63 ;
	mad_f32	 $s6, $s3, $s6, 0F3ecbbbce ;
	cmov_b32	 $s5, $c1, $s6, $s5 ;
	mad_f32	 $s3, $s3, $s5, 0F3f800000 ;
	div_f32	 $s3, $s4, $s3 ;
	and_b32	 $s1, $s1, 2147479552 ;
	add_f32	 $s4, $s1, $s2 ;
	sub_f32	 $s5, $s1, $s2 ;
	mad_f32	 $s4, $s5, $s4, $s3 ;
	cmp_lt_b1_f32	 $c2, $s4, 0F00000000 ;
	cmov_b32	 $s5, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s4, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s4 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c2, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c2, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c2, $s4, 0F42b17218 ;
	cmov_b32	 $s5, $c2, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s4, $s4 ;
	cmov_b32	 $s4, $c2, $s4, $s5 ;
	neg_f32	 $s5, $s1 ;
	mad_f32	 $s1, $s5, $s1, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c2, $s1, 0F00000000 ;
	cmov_b32	 $s5, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s1, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s1 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c2, $s1, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c2, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c2, $s1, 0F42b17218 ;
	cmov_b32	 $s5, $c2, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s1, $s1 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	mul_f32	 $s1, $s1, $s4 ;
	div_f32	 $s1, $s1, $s2 ;
	sub_f32	 $s4, 0F40000000, $s1 ;
	cmp_lt_b1_f32	 $c2, $s0, 0F00000000 ;
	cmov_b32	 $s1, $c2, $s4, $s1 ;
	cmp_lt_b1_f32	 $c3, $s2, 0F41e00000 ;
	cmov_b32	 $s1, $c3, $s1, 0F00000000 ;
	sub_f32	 $s2, 0F3e1ea7d4, $s3 ;
	add_f32	 $s4, $s3, 0F3f58560b ;
	add_f32	 $s4, $s4, 0F3f800000 ;
	cmov_b32	 $s2, $c2, $s4, $s2 ;
	cmov_b32	 $s1, $c0, $s2, $s1 ;
	add_f32	 $s2, $s0, 0Fbf000000 ;
	mad_f32	 $s2, $s0, $s3, $s2 ;
	sub_f32	 $s2, 0F3f000000, $s2 ;
	cmov_b32	 $s1, $c1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc0c00000 ;
	cmov_b32	 $s1, $c0, 0F40000000, $s1 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfc_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[8];
@__amd_amp_Perfc_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d1, $c1, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d2, $d1, $d2, 0Dc083ec881375f228 ;
	fma_f64	 $d2, $d1, $d2, 0Dc064145d43c5ed98 ;
	fma_f64	 $d2, $d1, $d2, 0Dc031c209555f995a ;
	fma_f64	 $d2, $d1, $d2, 0Dbfe993ba70c285de ;
	fma_f64	 $d2, $d1, $d2, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d1, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d1, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d1, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d1, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d1, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d1, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d1, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d1, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d1, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d1, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d1, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d1, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d1, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d1, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d1, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d1, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d1, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d1, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d1, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d1, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d1, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d1, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d1, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d1, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d1, $d1, $d6, 0D3ff0000000000000 ;
	div_f64	 $d1, $d2, $d1 ;
	st_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d1 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d6 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d1, [$s1] ;
	add_f64	 $d3, $d1, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d1, $d3, $d1 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d1, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d6, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d1, $c2, $d4, $d1 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c2, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d1 ;
	st_spill_u64	$d1, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d1, 0Dbf862e42fefa0000, $d7, $d2 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d7, $d1 ;
	fma_f64	 $d7, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d1, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d1, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d7 ;
	fma_f64	 $d1, $d6, $d1, $d3 ;
	add_f64	 $d1, $d1, $d4 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s3, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s2, $c2, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s3, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d6, $d1, 52, 11 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c2, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d1 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d2 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d1, $c0, $d3, $d1 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d0 ;
	neg_f64	 $d5, $d0 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d0, 0D403c000000000000 ;
	cmov_b64	 $d1, $c0, $d1, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d0, 0Dc018000000000000 ;
	cmov_b64	 $d1, $c0, $d1, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfcinv_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[10];
@__amd_amp_Perfcinv_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cmp_geu_b1_f32	 $c0, $s0, 0F0554ad2e ;
	cbr	$c0, @BB65_2 ;
// BB#1:
	cvt_f64_f32	$d0, $s0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_u64	 $d2, $d1, 32 ;
	cvt_u32_u64	$s1, $d2 ;
	extract_u32	 $s2, $s1, 13, 1 ;
	shr_s32	 $s1, $s1, 13 ;
	extract_u32	 $s1, $s1, 1, 6 ;
	or_b32	 $s1, $s1, 64 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_LN_TBL] ;
	add_u32	 $s1, $s1, $s2 ;
	add_u32	 $s3, $s1, -1016 ;
	ld_readonly_f64	$d3, [$s3] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s3, $d1 ;
	and_b32	 $s3, $s3, 2047 ;
	cmov_b32	 $s4, $c0, -1083, -1023 ;
	add_u32	 $s3, $s3, $s4 ;
	cvt_near_f64_s32	$d1, $s3 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s1, $s1, -1024 ;
	ld_readonly_f64	$d3, [$s1] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f32	 $c0, $s0, 0F3f884160 ;
	cmp_ge_b1_f32	 $c1, $s0, 0F3f707d50 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	add_f64	 $d1, $d1, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F00000000 ;
	cvt_u32_b1	$s1, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s3, $c0 ;
	and_b32	 $s3, $s3, 1 ;
	or_b32	 $s1, $s3, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f32	 $c0, $s0, 0F00000000 ;
	cmov_b64	 $d1, $c0, 0Dfff0000000000000, $d1 ;
	sub_f64	 $d1, 0Dbfdce6bb25aa1316, $d1 ;
	mov_b64	$d2, $d1 ;
	cmp_lt_b1_u64	 $c1, $d2, 4503599627370496 ;
	or_b64	 $d3, $d2, 274719577269600256 ;
	add_f64	 $d3, $d3, 0D83d0000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	shr_u64	 $d3, $d2, 32 ;
	cvt_u32_u64	$s0, $d3 ;
	extract_u32	 $s1, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d3, $s0 ;
	mul_f64	 $d3, $d3, 0D3f80000000000000 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	sub_f64	 $d4, $d4, $d3 ;
	fma_f64	 $d3, $d4, 0D3fe0000000000000, $d3 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	fma_f64	 $d5, $d4, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d5, $d4, $d5, 0D3fb5555555555557 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d3, $d3, $d4, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s2 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d3, $d4, $d3 ;
	shr_u64	 $d2, $d2, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s3, $c1, -1083, -1023 ;
	add_u32	 $s1, $s1, $s3 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, $d2, 0D3e6efa39ef35793c, $d3 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d2, $d2, 0D3fe62e42e0000000, $d4 ;
	add_f64	 $d2, $d2, $d3 ;
	add_f64	 $d3, $d1, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, 0D4000000000000000 ;
	div_f64	 $d4, $d3, $d4 ;
	add_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d7, $d6, $d7, 0D3f89999999bac6d4 ;
	fma_f64	 $d6, $d6, $d7, 0D3fb55555555554e6 ;
	mul_f64	 $d4, $d3, $d4 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, $d5, $d6, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	cmp_le_b1_f64	 $c1, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c2, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	class_f64	 $c1, $d1, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_b1_u32	$c1, $s0 ;
	not_b1	 $c1, $c1 ;
	cmov_b64	 $d2, $c1, $d2, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c1 ;
	class_f64	 $c1, $d1, 3 ;
	cvt_u32_b1	$s1, $c1 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	cmov_b64	 $d2, $c1, $d2, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c1, $d1, 0D0000000000000000 ;
	cmov_b64	 $d2, $c1, 0Dfff0000000000000, $d2 ;
	sub_f64	 $d1, $d1, $d2 ;
	mul_f64	 $d1, $d1, 0D3fe0000000000000 ;
	sqrt_f64	 $d0, $d1 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	st_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c2, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c3, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c2, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d1, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d7, $d1 ;
	fma_f64	 $d7, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d1, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d1, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s3, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d1, $d4, $d1, $d7 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s1, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s5, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s4, $c3, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s5, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c3, 2047, $d4 ;
	extract_u64	 $d7, $d1, 52, 11 ;
	cmov_b64	 $d4, $c4, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c3, $d6, $d6 ;
	cmov_b64	 $d1, $c3, $d6, $d1 ;
	cmp_gt_b1_f64	 $c3, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c3, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c3, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c3, 0D0000000000000000, $d1 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s3, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s1, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s5, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s4, $c3, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s5, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d4, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d4, $c3, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c3, $d2, $d2 ;
	cmov_b64	 $d3, $c3, $d2, $d3 ;
	cmp_gt_b1_f64	 $c3, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c3, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c3, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c3, 0D0000000000000000, $d3 ;
	mul_f64	 $d1, $d2, $d1 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c3, $d3, $d4 ;
	cmov_b64	 $d1, $c3, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c3, $d3, $d2 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c2, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c1, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c1, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c1, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c1, $d1, 4503599627370496 ;
	or_b64	 $d3, $d1, 274719577269600256 ;
	add_f64	 $d3, $d3, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c1, $d3, $d1 ;
	shr_u64	 $d3, $d1, 32 ;
	cvt_u32_u64	$s0, $d3 ;
	extract_u32	 $s1, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d3, $s0 ;
	mul_f64	 $d3, $d3, 0D3f80000000000000 ;
	and_b64	 $d4, $d1, 4503599627370495 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	sub_f64	 $d4, $d4, $d3 ;
	fma_f64	 $d3, $d4, 0D3fe0000000000000, $d3 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	fma_f64	 $d5, $d4, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d5, $d4, $d5, 0D3fb5555555555557 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d3, $d3, $d4, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s2 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d3, $d4, $d3 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c1, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d3, $d1, 0D3e6efa39ef35793c, $d3 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d4 ;
	add_f64	 $d1, $d1, $d3 ;
	add_f64	 $d3, $d0, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, 0D4000000000000000 ;
	div_f64	 $d4, $d3, $d4 ;
	add_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d7, $d6, $d7, 0D3f89999999bac6d4 ;
	fma_f64	 $d6, $d6, $d7, 0D3fb55555555554e6 ;
	mul_f64	 $d4, $d3, $d4 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, $d5, $d6, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	cmp_le_b1_f64	 $c1, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c2, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b64	 $d1, $c1, $d3, $d1 ;
	class_f64	 $c1, $d0, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_b1_u32	$c1, $s0 ;
	not_b1	 $c1, $c1 ;
	cmov_b64	 $d1, $c1, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c1 ;
	class_f64	 $c1, $d0, 3 ;
	cvt_u32_b1	$s1, $c1 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	cmov_b64	 $d1, $c1, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, 0Dfff0000000000000, $d1 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	add_f64	 $d0, $d1, $d0 ;
	add_f64	 $d0, $d0, 0Dbfbeeb95b094c191 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d3 ;
	fma_f64	 $d3, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d1, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d1, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s3, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	add_f64	 $d1, $d1, $d4 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s3, $s1 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s3, $s1 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c1, $d3, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c1, 2047, $d4 ;
	extract_u64	 $d5, $d1, 52, 11 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c1, $d0, $d0 ;
	cmov_b64	 $d1, $c1, $d0, $d1 ;
	cmp_gt_b1_f64	 $c1, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c1, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c1, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c1, 0D0000000000000000, $d1 ;
	add_f64	 $d0, $d2, $d0 ;
	cvt_near_f32_f64	$s0, $d0 ;
	cmov_b32	 $s0, $c0, 0F7f800000, $s0 ;
	brn	@BB65_21 ;
@BB65_2:
	cmp_geu_b1_f32	 $c0, $s0, 0F3599021a ;
	cbr	$c0, @BB65_6 ;
// BB#3:
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s8, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s8, $s6, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s3, $s2, 0F3805fdf4, $s4 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s6, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s6 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s6, $s4, $s4 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s8, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s6, $s8, $s4 ;
	add_f32	 $s4, $s4, $s3 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s2, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c0, $s2, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s1, $c0, 0Fff800000, $s1 ;
	fma_f32	 $s1, $s1, 0Fc0000000, 0Fbee735d9 ;
	mov_b32	$s2, $s1 ;
	shr_u32	 $s3, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	or_b32	 $s4, $s2, 1065353216 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s4, $s2 ;
	and_b32	 $s8, $s6, 8323072 ;
	shl_u32	 $s9, $s6, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s9, $s6 ;
	shr_u32	 $s9, $s8, 14 ;
	add_u32	 $s9, $s7, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s6, $s6, $s9 ;
	mul_f32	 $s9, $s6, $s6 ;
	mad_f32	 $s10, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s10, $s9, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s3, $s3, -127 ;
	shr_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, -253 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	cvt_near_f32_s32	$s3, $s3 ;
	mad_f32	 $s4, $s3, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s8, 13 ;
	add_u32	 $s6, $s5, $s6 ;
	ld_readonly_f32	$s8, [$s6 + 4] ;
	add_f32	 $s4, $s4, $s8 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s3, $s3, 0F3f317000, $s6 ;
	add_f32	 $s3, $s3, $s4 ;
	add_f32	 $s4, $s1, 0Fbf800000 ;
	add_f32	 $s6, $s4, 0F40000000 ;
	div_f32	 $s6, $s4, $s6 ;
	add_f32	 $s8, $s6, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s6, $s6, $s4 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s8, $s9, $s6 ;
	add_f32	 $s6, $s6, $s4 ;
	abs_f32	 $s4, $s4 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F3d800000 ;
	cmov_b32	 $s3, $c0, $s6, $s3 ;
	and_b32	 $s4, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s4, 2139095039 ;
	cmov_b32	 $s3, $c0, $s1, $s3 ;
	cmp_eq_b1_u32	 $c0, $s2, $s4 ;
	cmov_b32	 $s2, $c0, $s3, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s2 ;
	sub_f32	 $s1, $s1, $s2 ;
	sqrt_f32	 $s1, $s1 ;
	mul_f32	 $s1, $s1, 0F3f3504f3 ;
	mov_b32	$s2, $s1 ;
	and_b32	 $s3, $s2, 2147483647 ;
	add_f32	 $s4, $s3, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3fa00000 ;
	mul_f32	 $s6, $s3, $s3 ;
	div_f32	 $s8, 0F3f800000, $s6 ;
	cmov_b32	 $s4, $c0, $s4, $s8 ;
	cmp_lt_b1_f32	 $c1, $s3, 0F3f580000 ;
	cmov_b32	 $s4, $c1, $s6, $s4 ;
	mad_f32	 $s6, $s4, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s6, $s4, $s6, 0Fc41f6441 ;
	mad_f32	 $s6, $s4, $s6, 0Fc320a2ea ;
	mad_f32	 $s6, $s4, $s6, 0Fc18e104b ;
	mad_f32	 $s6, $s4, $s6, 0Fbf4c9dd4 ;
	mad_f32	 $s6, $s4, $s6, 0Fbc21a092 ;
	mad_f32	 $s8, $s4, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s8, $s4, $s8, 0Fc3389ae7 ;
	mad_f32	 $s8, $s4, $s8, 0Fc322658c ;
	mad_f32	 $s8, $s4, $s8, 0Fc2798057 ;
	mad_f32	 $s8, $s4, $s8, 0Fc128f022 ;
	mad_f32	 $s8, $s4, $s8, 0Fbf31a0b7 ;
	mad_f32	 $s8, $s4, $s8, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c2, $s3, 0F4036db6d ;
	cmov_b32	 $s6, $c2, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s8, $s4, $s8, 0Fbde31cc2 ;
	mad_f32	 $s8, $s4, $s8, 0F3ea2fe54 ;
	mad_f32	 $s8, $s4, $s8, 0Fbebe9208 ;
	mad_f32	 $s8, $s4, $s8, 0F3ed46805 ;
	mad_f32	 $s8, $s4, $s8, 0Fbb1acdc6 ;
	cmov_b32	 $s6, $c0, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s8, $s4, $s8, 0Fbce9528f ;
	mad_f32	 $s8, $s4, $s8, 0Fbea66beb ;
	mad_f32	 $s8, $s4, $s8, 0F3e0375d4 ;
	cmov_b32	 $s6, $c1, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s8, $s4, $s8, 0F451f90ce ;
	mad_f32	 $s8, $s4, $s8, 0F4547fdbb ;
	mad_f32	 $s8, $s4, $s8, 0F44c01759 ;
	mad_f32	 $s8, $s4, $s8, 0F43a2e571 ;
	mad_f32	 $s8, $s4, $s8, 0F41f2b459 ;
	mad_f32	 $s9, $s4, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s9, $s4, $s9, 0F42d9451f ;
	mad_f32	 $s9, $s4, $s9, 0F43d6810b ;
	mad_f32	 $s9, $s4, $s9, 0F442158c9 ;
	mad_f32	 $s9, $s4, $s9, 0F43d9486f ;
	mad_f32	 $s9, $s4, $s9, 0F4309a863 ;
	mad_f32	 $s9, $s4, $s9, 0F419d35ce ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s9, $s4, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s9, $s4, $s9, 0F3e013307 ;
	mad_f32	 $s9, $s4, $s9, 0F3d931ae7 ;
	mad_f32	 $s9, $s4, $s9, 0F3f0a5785 ;
	mad_f32	 $s9, $s4, $s9, 0F3dd9f331 ;
	cmov_b32	 $s8, $c0, $s9, $s8 ;
	mad_f32	 $s9, $s4, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s9, $s4, $s9, 0F3ba68116 ;
	mad_f32	 $s9, $s4, $s9, 0F3d852a63 ;
	mad_f32	 $s9, $s4, $s9, 0F3ecbbbce ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	mad_f32	 $s4, $s4, $s8, 0F3f800000 ;
	div_f32	 $s4, $s6, $s4 ;
	and_b32	 $s2, $s2, 2147479552 ;
	add_f32	 $s6, $s2, $s3 ;
	sub_f32	 $s8, $s2, $s3 ;
	mad_f32	 $s6, $s8, $s6, $s4 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F00000000 ;
	cmov_b32	 $s8, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s6, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s6 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c2, $s6, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c2, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F42b17218 ;
	cmov_b32	 $s8, $c2, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s6, $s6 ;
	cmov_b32	 $s6, $c2, $s6, $s8 ;
	neg_f32	 $s8, $s2 ;
	mad_f32	 $s2, $s8, $s2, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F00000000 ;
	cmov_b32	 $s8, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s2, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s2 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c2, $s2, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c2, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F42b17218 ;
	cmov_b32	 $s8, $c2, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s2, $s2 ;
	cmov_b32	 $s2, $c2, $s2, $s8 ;
	mul_f32	 $s2, $s2, $s6 ;
	div_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s6, 0F40000000, $s2 ;
	cmp_lt_b1_f32	 $c2, $s1, 0F00000000 ;
	cmov_b32	 $s2, $c2, $s6, $s2 ;
	cmp_lt_b1_f32	 $c3, $s3, 0F41e00000 ;
	cmov_b32	 $s2, $c3, $s2, 0F00000000 ;
	sub_f32	 $s3, 0F3e1ea7d4, $s4 ;
	add_f32	 $s6, $s4, 0F3f58560b ;
	add_f32	 $s6, $s6, 0F3f800000 ;
	cmov_b32	 $s3, $c2, $s6, $s3 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	add_f32	 $s3, $s1, 0Fbf000000 ;
	mad_f32	 $s3, $s1, $s4, $s3 ;
	sub_f32	 $s3, 0F3f000000, $s3 ;
	cmov_b32	 $s2, $c1, $s3, $s2 ;
	cmp_lt_b1_f32	 $c0, $s1, 0Fc0c00000 ;
	cmov_b32	 $s2, $c0, 0F40000000, $s2 ;
	cmp_nan_b1_f32	 $c0, $s1, $s1 ;
	cmov_b32	 $s2, $c0, $s1, $s2 ;
	sub_f32	 $s2, $s2, $s0 ;
	mov_b32	$s3, $s2 ;
	shr_u32	 $s4, $s3, 23 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s6, $s3, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s8, $c0, $s6, $s3 ;
	and_b32	 $s9, $s8, 8323072 ;
	shl_u32	 $s10, $s8, 1 ;
	and_b32	 $s10, $s10, 65536 ;
	add_u32	 $s9, $s10, $s9 ;
	or_b32	 $s10, $s9, 1056964608 ;
	and_b32	 $s8, $s8, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s8, $s10, $s8 ;
	shr_u32	 $s10, $s9, 14 ;
	add_u32	 $s10, $s7, $s10 ;
	ld_readonly_f32	$s10, [$s10] ;
	mul_f32	 $s8, $s8, $s10 ;
	mul_f32	 $s10, $s8, $s8 ;
	mad_f32	 $s11, $s8, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s8, $s11, $s10, $s8 ;
	neg_f32	 $s8, $s8 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s8 ;
	shr_u32	 $s8, $s9, 13 ;
	add_u32	 $s8, $s5, $s8 ;
	ld_readonly_f32	$s9, [$s8 + 4] ;
	add_f32	 $s6, $s6, $s9 ;
	ld_readonly_f32	$s8, [$s8] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s8 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s2, 0Fbf800000 ;
	add_f32	 $s8, $s6, 0F40000000 ;
	div_f32	 $s8, $s6, $s8 ;
	add_f32	 $s9, $s8, $s8 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s10, $s11, $s10 ;
	mul_f32	 $s8, $s8, $s6 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s8, $s9, $s10, $s8 ;
	add_f32	 $s8, $s8, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c0, $s6, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s8, $s4 ;
	and_b32	 $s6, $s3, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095039 ;
	cmov_b32	 $s2, $c0, $s2, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, $s6 ;
	cmov_b32	 $s2, $c0, $s2, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s2 ;
	fma_f32	 $s3, $s1, $s1, 0Fbdf75cae ;
	add_f32	 $s2, $s3, $s2 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F00000000 ;
	cmov_b32	 $s3, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s3, $s2, 0F3fb8aa3b, $s3 ;
	cvt_zeroi_s32_f32	$s3, $s3 ;
	cvt_near_f32_s32	$s4, $s3 ;
	mad_f32	 $s6, $s4, 0Fbf317180, $s2 ;
	mul_f32	 $s4, $s4, 0Fb717f7d1 ;
	add_f32	 $s8, $s6, $s4 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s4, $s4 ;
	sub_f32	 $s4, $s4, $s8 ;
	sub_f32	 $s4, $s4, $s6 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	shl_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s4, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0Fc2aeac4f ;
	cmov_b32	 $s3, $c0, 0F00000000, $s3 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F42b17218 ;
	cmov_b32	 $s3, $c0, $s3, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s2, $s2 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	add_f32	 $s1, $s1, $s2 ;
	mov_b32	$s2, $s1 ;
	and_b32	 $s3, $s2, 2147483647 ;
	add_f32	 $s4, $s3, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3fa00000 ;
	mul_f32	 $s6, $s3, $s3 ;
	div_f32	 $s8, 0F3f800000, $s6 ;
	cmov_b32	 $s4, $c0, $s4, $s8 ;
	cmp_lt_b1_f32	 $c1, $s3, 0F3f580000 ;
	cmov_b32	 $s4, $c1, $s6, $s4 ;
	mad_f32	 $s6, $s4, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s6, $s4, $s6, 0Fc41f6441 ;
	mad_f32	 $s6, $s4, $s6, 0Fc320a2ea ;
	mad_f32	 $s6, $s4, $s6, 0Fc18e104b ;
	mad_f32	 $s6, $s4, $s6, 0Fbf4c9dd4 ;
	mad_f32	 $s6, $s4, $s6, 0Fbc21a092 ;
	mad_f32	 $s8, $s4, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s8, $s4, $s8, 0Fc3389ae7 ;
	mad_f32	 $s8, $s4, $s8, 0Fc322658c ;
	mad_f32	 $s8, $s4, $s8, 0Fc2798057 ;
	mad_f32	 $s8, $s4, $s8, 0Fc128f022 ;
	mad_f32	 $s8, $s4, $s8, 0Fbf31a0b7 ;
	mad_f32	 $s8, $s4, $s8, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c2, $s3, 0F4036db6d ;
	cmov_b32	 $s6, $c2, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s8, $s4, $s8, 0Fbde31cc2 ;
	mad_f32	 $s8, $s4, $s8, 0F3ea2fe54 ;
	mad_f32	 $s8, $s4, $s8, 0Fbebe9208 ;
	mad_f32	 $s8, $s4, $s8, 0F3ed46805 ;
	mad_f32	 $s8, $s4, $s8, 0Fbb1acdc6 ;
	cmov_b32	 $s6, $c0, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s8, $s4, $s8, 0Fbce9528f ;
	mad_f32	 $s8, $s4, $s8, 0Fbea66beb ;
	mad_f32	 $s8, $s4, $s8, 0F3e0375d4 ;
	cmov_b32	 $s6, $c1, $s8, $s6 ;
	mad_f32	 $s8, $s4, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s8, $s4, $s8, 0F451f90ce ;
	mad_f32	 $s8, $s4, $s8, 0F4547fdbb ;
	mad_f32	 $s8, $s4, $s8, 0F44c01759 ;
	mad_f32	 $s8, $s4, $s8, 0F43a2e571 ;
	mad_f32	 $s8, $s4, $s8, 0F41f2b459 ;
	mad_f32	 $s9, $s4, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s9, $s4, $s9, 0F42d9451f ;
	mad_f32	 $s9, $s4, $s9, 0F43d6810b ;
	mad_f32	 $s9, $s4, $s9, 0F442158c9 ;
	mad_f32	 $s9, $s4, $s9, 0F43d9486f ;
	mad_f32	 $s9, $s4, $s9, 0F4309a863 ;
	mad_f32	 $s9, $s4, $s9, 0F419d35ce ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s9, $s4, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s9, $s4, $s9, 0F3e013307 ;
	mad_f32	 $s9, $s4, $s9, 0F3d931ae7 ;
	mad_f32	 $s9, $s4, $s9, 0F3f0a5785 ;
	mad_f32	 $s9, $s4, $s9, 0F3dd9f331 ;
	cmov_b32	 $s8, $c0, $s9, $s8 ;
	mad_f32	 $s9, $s4, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s9, $s4, $s9, 0F3ba68116 ;
	mad_f32	 $s9, $s4, $s9, 0F3d852a63 ;
	mad_f32	 $s9, $s4, $s9, 0F3ecbbbce ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	mad_f32	 $s4, $s4, $s8, 0F3f800000 ;
	div_f32	 $s4, $s6, $s4 ;
	and_b32	 $s2, $s2, 2147479552 ;
	add_f32	 $s6, $s2, $s3 ;
	sub_f32	 $s8, $s2, $s3 ;
	mad_f32	 $s6, $s8, $s6, $s4 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F00000000 ;
	cmov_b32	 $s8, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s6, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s6 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c2, $s6, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c2, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F42b17218 ;
	cmov_b32	 $s8, $c2, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s6, $s6 ;
	cmov_b32	 $s6, $c2, $s6, $s8 ;
	neg_f32	 $s8, $s2 ;
	mad_f32	 $s2, $s8, $s2, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F00000000 ;
	cmov_b32	 $s8, $c2, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s2, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s2 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c2, $s2, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c2, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c2, $s2, 0F42b17218 ;
	cmov_b32	 $s8, $c2, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c2, $s2, $s2 ;
	cmov_b32	 $s2, $c2, $s2, $s8 ;
	mul_f32	 $s2, $s2, $s6 ;
	div_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s6, 0F40000000, $s2 ;
	cmp_lt_b1_f32	 $c2, $s1, 0F00000000 ;
	cmov_b32	 $s2, $c2, $s6, $s2 ;
	cmp_lt_b1_f32	 $c3, $s3, 0F41e00000 ;
	cmov_b32	 $s2, $c3, $s2, 0F00000000 ;
	sub_f32	 $s3, 0F3e1ea7d4, $s4 ;
	add_f32	 $s6, $s4, 0F3f58560b ;
	add_f32	 $s6, $s6, 0F3f800000 ;
	cmov_b32	 $s3, $c2, $s6, $s3 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	add_f32	 $s3, $s1, 0Fbf000000 ;
	mad_f32	 $s3, $s1, $s4, $s3 ;
	sub_f32	 $s3, 0F3f000000, $s3 ;
	cmov_b32	 $s2, $c1, $s3, $s2 ;
	cmp_lt_b1_f32	 $c0, $s1, 0Fc0c00000 ;
	cmov_b32	 $s2, $c0, 0F40000000, $s2 ;
	cmp_nan_b1_f32	 $c0, $s1, $s1 ;
	cmov_b32	 $s2, $c0, $s1, $s2 ;
	sub_f32	 $s0, $s2, $s0 ;
	mov_b32	$s2, $s0 ;
	shr_u32	 $s3, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	or_b32	 $s4, $s2, 1065353216 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s4, $s2 ;
	and_b32	 $s8, $s6, 8323072 ;
	shl_u32	 $s9, $s6, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s9, $s6 ;
	shr_u32	 $s9, $s8, 14 ;
	add_u32	 $s7, $s7, $s9 ;
	ld_readonly_f32	$s7, [$s7] ;
	mul_f32	 $s6, $s6, $s7 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s7, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s3, $s3, -127 ;
	shr_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, -253 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	cvt_near_f32_s32	$s3, $s3 ;
	mad_f32	 $s4, $s3, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s8, 13 ;
	add_u32	 $s5, $s5, $s6 ;
	ld_readonly_f32	$s6, [$s5 + 4] ;
	add_f32	 $s4, $s4, $s6 ;
	ld_readonly_f32	$s5, [$s5] ;
	mad_f32	 $s3, $s3, 0F3f317000, $s5 ;
	add_f32	 $s3, $s3, $s4 ;
	add_f32	 $s4, $s0, 0Fbf800000 ;
	add_f32	 $s5, $s4, 0F40000000 ;
	div_f32	 $s5, $s4, $s5 ;
	add_f32	 $s6, $s5, $s5 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s7, $s8, $s7 ;
	mul_f32	 $s5, $s5, $s4 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s6, $s7, $s5 ;
	add_f32	 $s5, $s5, $s4 ;
	abs_f32	 $s4, $s4 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F3d800000 ;
	cmov_b32	 $s3, $c0, $s5, $s3 ;
	and_b32	 $s4, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s4, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s3 ;
	cmp_eq_b1_u32	 $c0, $s2, $s4 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	fma_f32	 $s2, $s1, $s1, 0Fbdf75cae ;
	add_f32	 $s0, $s2, $s0 ;
	class_f32	 $c0, $s0, 504 ;
	cvt_u32_b1	$s2, $c0 ;
	cvt_b1_u32	$c0, $s2 ;
	cmp_ne_b1_b1	 $c0, $c0, 1 ;
	cvt_f64_f32	$d0, $s1 ;
	mov_b64	$d1, 0D0000000000000000 ;
	cbr	$c0, @BB65_5 ;
// BB#4:
	cmp_lt_b1_f32	 $c0, $s0, 0F00000000 ;
	cmov_b32	 $s1, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s1, $s0, 0F3fb8aa3b, $s1 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	cvt_near_f32_s32	$s2, $s1 ;
	mad_f32	 $s3, $s2, 0Fbf317180, $s0 ;
	mul_f32	 $s2, $s2, 0Fb717f7d1 ;
	add_f32	 $s4, $s3, $s2 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s6, $s5, $s6, 0F388ab355 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3e2aaaab ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s5, $s5, $s6, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s5, 0F40000000, $s5 ;
	div_f32	 $s4, $s4, $s5 ;
	neg_f32	 $s2, $s2 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s2, 0F3f800000, $s2 ;
	shl_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2aeac4f ;
	cmov_b32	 $s1, $c0, 0F00000000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F42b17218 ;
	cmov_b32	 $s1, $c0, $s1, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	cvt_f64_f32	$d1, $s0 ;
@BB65_5:
	add_f64	 $d0, $d0, $d1 ;
	cvt_near_f32_f64	$s0, $d0 ;
	brn	@BB65_21 ;
@BB65_6:
	cmp_gt_b1_f32	 $c0, $s0, 0F3f800000 ;
	cvt_f64_f32	$d0, $s0 ;
	sub_f64	 $d1, 0D4000000000000000, $d0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cvt_near_f32_f64	$s1, $d0 ;
	abs_f32	 $s2, $s1 ;
	mul_f32	 $s3, $s1, 0F3f000000 ;
	sub_f32	 $s4, 0F3f800000, $s3 ;
	cvt_f64_f32	$d0, $s4 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3f98d4fdf3b645a2 ;
	cbr	$c1, @BB65_11 ;
// BB#7:
	mov_b32	$s3, $s4 ;
	shr_u32	 $s5, $s3, 23 ;
	cmp_eq_b1_u32	 $c1, $s5, 0 ;
	or_b32	 $s6, $s3, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c1, $s6, $s3 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s5, $s5, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s5, $c1, $s6, $s5 ;
	cvt_near_f32_s32	$s5, $s5 ;
	mad_f32	 $s6, $s5, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s5, $s5, 0F3f317000, $s7 ;
	add_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s4, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F3d800000 ;
	cmov_b32	 $s5, $c1, $s7, $s5 ;
	and_b32	 $s6, $s3, 2147483647 ;
	cmp_gt_b1_u32	 $c1, $s6, 2139095039 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cvt_f64_f32	$d1, $s5 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	cmp_eq_b1_u32	 $c1, $s3, $s6 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b64	 $d1, $c1, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d1, $d1 ;
	cvt_near_f32_f64	$s3, $d1 ;
	fma_f32	 $s5, 0F3bff16c3, $s3, 0F3ea51a69 ;
	fma_f32	 $s5, $s5, $s3, 0F401c7d14 ;
	fma_f32	 $s5, $s5, $s3, 0F4070483b ;
	fma_f32	 $s5, $s5, $s3, 0F3f800000 ;
	fma_f32	 $s6, 0Fbbff186d, $s3, 0Fbea51126 ;
	fma_f32	 $s6, $s6, $s3, 0Fc019a606 ;
	fma_f32	 $s6, $s6, $s3, 0Fc0232ed1 ;
	fma_f32	 $s6, $s6, $s3, 0F408bfd40 ;
	fma_f32	 $s3, $s6, $s3, 0F403c0ae1 ;
	div_f32	 $s3, $s3, $s5 ;
@BB65_8:
	cmp_le_b1_f64	 $c1, $d0, 0D3cd203af9ee75616 ;
	cbr	$c1, @BB65_16 ;
// BB#9:
	mul_f32	 $s5, $s3, 0Fbf3504f3 ;
	mov_b32	$s6, $s5 ;
	and_b32	 $s7, $s6, 2147483647 ;
	add_f32	 $s8, $s7, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c1, $s7, 0F3fa00000 ;
	mul_f32	 $s9, $s7, $s7 ;
	div_f32	 $s10, 0F3f800000, $s9 ;
	cmov_b32	 $s8, $c1, $s8, $s10 ;
	cmp_lt_b1_f32	 $c2, $s7, 0F3f580000 ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s9, $s8, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s9, $s8, $s9, 0F451f90ce ;
	mad_f32	 $s9, $s8, $s9, 0F4547fdbb ;
	mad_f32	 $s9, $s8, $s9, 0F44c01759 ;
	mad_f32	 $s9, $s8, $s9, 0F43a2e571 ;
	mad_f32	 $s9, $s8, $s9, 0F41f2b459 ;
	mad_f32	 $s10, $s8, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s10, $s8, $s10, 0Fc41f6441 ;
	mad_f32	 $s10, $s8, $s10, 0Fc320a2ea ;
	mad_f32	 $s10, $s8, $s10, 0Fc18e104b ;
	mad_f32	 $s10, $s8, $s10, 0Fbf4c9dd4 ;
	mad_f32	 $s10, $s8, $s10, 0Fbc21a092 ;
	mad_f32	 $s11, $s8, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s11, $s8, $s11, 0F42d9451f ;
	mad_f32	 $s11, $s8, $s11, 0F43d6810b ;
	mad_f32	 $s11, $s8, $s11, 0F442158c9 ;
	mad_f32	 $s11, $s8, $s11, 0F43d9486f ;
	mad_f32	 $s11, $s8, $s11, 0F4309a863 ;
	mad_f32	 $s11, $s8, $s11, 0F419d35ce ;
	mad_f32	 $s12, $s8, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s12, $s8, $s12, 0Fc3389ae7 ;
	mad_f32	 $s12, $s8, $s12, 0Fc322658c ;
	mad_f32	 $s12, $s8, $s12, 0Fc2798057 ;
	mad_f32	 $s12, $s8, $s12, 0Fc128f022 ;
	mad_f32	 $s12, $s8, $s12, 0Fbf31a0b7 ;
	mad_f32	 $s12, $s8, $s12, 0Fbc21a093 ;
	cmp_ge_b1_f32	 $c3, $s4, 0F3f000000 ;
	cbr	$c3, @BB65_14 ;
// BB#10:
	cmp_lt_b1_f32	 $c3, $s7, 0F4036db6d ;
	cmov_b32	 $s10, $c3, $s12, $s10 ;
	mad_f32	 $s12, $s8, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s12, $s8, $s12, 0Fbde31cc2 ;
	mad_f32	 $s12, $s8, $s12, 0F3ea2fe54 ;
	mad_f32	 $s12, $s8, $s12, 0Fbebe9208 ;
	mad_f32	 $s12, $s8, $s12, 0F3ed46805 ;
	mad_f32	 $s12, $s8, $s12, 0Fbb1acdc6 ;
	cmov_b32	 $s10, $c1, $s12, $s10 ;
	mad_f32	 $s12, $s8, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s12, $s8, $s12, 0Fbce9528f ;
	mad_f32	 $s12, $s8, $s12, 0Fbea66beb ;
	mad_f32	 $s12, $s8, $s12, 0F3e0375d4 ;
	cmov_b32	 $s10, $c2, $s12, $s10 ;
	cmov_b32	 $s9, $c3, $s11, $s9 ;
	mad_f32	 $s11, $s8, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s11, $s8, $s11, 0F3e013307 ;
	mad_f32	 $s11, $s8, $s11, 0F3d931ae7 ;
	mad_f32	 $s11, $s8, $s11, 0F3f0a5785 ;
	mad_f32	 $s11, $s8, $s11, 0F3dd9f331 ;
	cmov_b32	 $s9, $c1, $s11, $s9 ;
	mad_f32	 $s11, $s8, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s11, $s8, $s11, 0F3ba68116 ;
	mad_f32	 $s11, $s8, $s11, 0F3d852a63 ;
	mad_f32	 $s11, $s8, $s11, 0F3ecbbbce ;
	cmov_b32	 $s9, $c2, $s11, $s9 ;
	mad_f32	 $s8, $s8, $s9, 0F3f800000 ;
	div_f32	 $s8, $s10, $s8 ;
	and_b32	 $s6, $s6, 2147479552 ;
	add_f32	 $s9, $s6, $s7 ;
	sub_f32	 $s10, $s6, $s7 ;
	mad_f32	 $s9, $s10, $s9, $s8 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s9, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s9 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s4, $s12, $s11 ;
	mul_f32	 $s13, $s4, $s4 ;
	mad_f32	 $s14, $s13, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s14, $s13, $s14, 0F388ab355 ;
	mad_f32	 $s14, $s13, $s14, 0Fbb360b61 ;
	mad_f32	 $s14, $s13, $s14, 0F3e2aaaab ;
	neg_f32	 $s14, $s14 ;
	mad_f32	 $s13, $s13, $s14, $s4 ;
	mul_f32	 $s4, $s4, $s13 ;
	sub_f32	 $s13, 0F40000000, $s13 ;
	div_f32	 $s4, $s4, $s13 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s4 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s9, $s9 ;
	cmov_b32	 $s9, $c3, $s9, $s10 ;
	neg_f32	 $s10, $s6 ;
	mad_f32	 $s6, $s10, $s6, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c3, $s6, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s6, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s6 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s4, $s12, $s11 ;
	mul_f32	 $s13, $s4, $s4 ;
	mad_f32	 $s14, $s13, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s14, $s13, $s14, 0F388ab355 ;
	mad_f32	 $s14, $s13, $s14, 0Fbb360b61 ;
	mad_f32	 $s14, $s13, $s14, 0F3e2aaaab ;
	neg_f32	 $s14, $s14 ;
	mad_f32	 $s13, $s13, $s14, $s4 ;
	mul_f32	 $s4, $s4, $s13 ;
	sub_f32	 $s13, 0F40000000, $s13 ;
	div_f32	 $s4, $s4, $s13 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s4 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s6, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s6, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s6, $s6 ;
	cmov_b32	 $s6, $c3, $s6, $s10 ;
	mul_f32	 $s6, $s6, $s9 ;
	div_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s9, 0F40000000, $s6 ;
	cmp_lt_b1_f32	 $c3, $s5, 0F00000000 ;
	cmov_b32	 $s6, $c3, $s9, $s6 ;
	cmp_lt_b1_f32	 $c4, $s7, 0F41e00000 ;
	cmov_b32	 $s6, $c4, $s6, 0F00000000 ;
	sub_f32	 $s7, 0F3e1ea7d4, $s8 ;
	add_f32	 $s9, $s8, 0F3f58560b ;
	add_f32	 $s9, $s9, 0F3f800000 ;
	cmov_b32	 $s7, $c3, $s9, $s7 ;
	cmov_b32	 $s6, $c1, $s7, $s6 ;
	add_f32	 $s7, $s5, 0Fbf000000 ;
	mad_f32	 $s7, $s5, $s8, $s7 ;
	sub_f32	 $s7, 0F3f000000, $s7 ;
	cmov_b32	 $s6, $c2, $s7, $s6 ;
	cmp_lt_b1_f32	 $c1, $s5, 0Fc0c00000 ;
	cmov_b32	 $s6, $c1, 0F40000000, $s6 ;
	cmp_nan_b1_f32	 $c1, $s5, $s5 ;
	cmov_b32	 $s5, $c1, $s5, $s6 ;
	cvt_f64_f32	$d1, $s5 ;
	brn	@BB65_15 ;
@BB65_11:
	cmp_ge_b1_f64	 $c1, $d0, 0D3fef395810624dd3 ;
	cbr	$c1, @BB65_13 ;
// BB#12:
	add_f32	 $s3, $s4, 0Fbf000000 ;
	mul_f32	 $s5, $s3, $s3 ;
	fma_f32	 $s6, 0Fc259e786, $s5, 0F432195f9 ;
	fma_f32	 $s6, $s6, $s5, 0Fc31bb2f0 ;
	fma_f32	 $s6, $s6, $s5, 0F42859a46 ;
	fma_f32	 $s6, $s6, $s5, 0Fc1547dac ;
	fma_f32	 $s6, $s6, $s5, 0F3f800000 ;
	fma_f32	 $s7, 0Fc21ec98e, $s5, 0F435cf234 ;
	fma_f32	 $s7, $s7, $s5, 0Fc389f6d9 ;
	fma_f32	 $s7, $s7, $s5, 0F430a5b96 ;
	fma_f32	 $s7, $s7, $s5, 0Fc1f55182 ;
	fma_f32	 $s5, $s7, $s5, 0F40206c99 ;
	mul_f32	 $s3, $s5, $s3 ;
	div_f32	 $s3, $s3, $s6 ;
	brn	@BB65_8 ;
@BB65_13:
	mov_b32	$s5, $s3 ;
	shr_u32	 $s6, $s5, 23 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	or_b32	 $s7, $s5, 1065353216 ;
	add_f32	 $s7, $s7, 0Fbf800000 ;
	cmov_b32	 $s8, $c1, $s7, $s5 ;
	and_b32	 $s9, $s8, 8323072 ;
	shl_u32	 $s10, $s8, 1 ;
	and_b32	 $s10, $s10, 65536 ;
	add_u32	 $s9, $s10, $s9 ;
	or_b32	 $s10, $s9, 1056964608 ;
	and_b32	 $s8, $s8, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s8, $s10, $s8 ;
	shr_u32	 $s10, $s9, 14 ;
	//ldas_global_u32	$s11, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s10, $s11, $s10 ;
	ld_readonly_f32	$s10, [$s10] ;
	mul_f32	 $s8, $s8, $s10 ;
	mul_f32	 $s10, $s8, $s8 ;
	mad_f32	 $s11, $s8, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s8, $s11, $s10, $s8 ;
	neg_f32	 $s8, $s8 ;
	add_u32	 $s6, $s6, -127 ;
	shr_u32	 $s7, $s7, 23 ;
	add_u32	 $s7, $s7, -253 ;
	cmov_b32	 $s6, $c1, $s7, $s6 ;
	cvt_near_f32_s32	$s6, $s6 ;
	mad_f32	 $s7, $s6, 0F3805fdf4, $s8 ;
	shr_u32	 $s8, $s9, 13 ;
	//ldas_global_u32	$s9, [&__math32_LOGE_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s9, [$s8 + 4] ;
	add_f32	 $s7, $s7, $s9 ;
	ld_readonly_f32	$s8, [$s8] ;
	mad_f32	 $s6, $s6, 0F3f317000, $s8 ;
	add_f32	 $s6, $s6, $s7 ;
	add_f32	 $s7, $s3, 0Fbf800000 ;
	add_f32	 $s8, $s7, 0F40000000 ;
	div_f32	 $s8, $s7, $s8 ;
	add_f32	 $s9, $s8, $s8 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s10, $s11, $s10 ;
	mul_f32	 $s8, $s8, $s7 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s8, $s9, $s10, $s8 ;
	add_f32	 $s8, $s8, $s7 ;
	abs_f32	 $s7, $s7 ;
	cmp_lt_b1_f32	 $c1, $s7, 0F3d800000 ;
	cmov_b32	 $s6, $c1, $s8, $s6 ;
	and_b32	 $s7, $s5, 2147483647 ;
	cmp_gt_b1_u32	 $c1, $s7, 2139095039 ;
	cmov_b32	 $s3, $c1, $s3, $s6 ;
	cvt_f64_f32	$d1, $s3 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	cmp_eq_b1_u32	 $c1, $s5, $s7 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_u32	 $c1, $s7, 0 ;
	cmov_b64	 $d1, $c1, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d1, $d1 ;
	cvt_near_f32_f64	$s3, $d1 ;
	fma_f32	 $s5, 0F3bff16c3, $s3, 0F3ea51a69 ;
	fma_f32	 $s5, $s5, $s3, 0F401c7d14 ;
	fma_f32	 $s5, $s5, $s3, 0F4070483b ;
	fma_f32	 $s5, $s5, $s3, 0F3f800000 ;
	fma_f32	 $s6, 0Fbbff186d, $s3, 0Fbea51126 ;
	fma_f32	 $s6, $s6, $s3, 0Fc019a606 ;
	fma_f32	 $s6, $s6, $s3, 0Fc0232ed1 ;
	fma_f32	 $s6, $s6, $s3, 0F408bfd40 ;
	fma_f32	 $s3, $s6, $s3, 0F403c0ae1 ;
	neg_f32	 $s3, $s3 ;
	div_f32	 $s3, $s3, $s5 ;
	brn	@BB65_8 ;
@BB65_14:
	cmp_lt_b1_f32	 $c3, $s7, 0F4036db6e ;
	cmov_b32	 $s4, $c3, $s12, $s10 ;
	mad_f32	 $s10, $s8, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s10, $s8, $s10, 0Fbde31cc2 ;
	mad_f32	 $s10, $s8, $s10, 0F3ea2fe54 ;
	mad_f32	 $s10, $s8, $s10, 0Fbebe9208 ;
	mad_f32	 $s10, $s8, $s10, 0F3ed46805 ;
	mad_f32	 $s10, $s8, $s10, 0Fbb1acdc6 ;
	cmov_b32	 $s4, $c1, $s10, $s4 ;
	mad_f32	 $s10, $s8, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s10, $s8, $s10, 0Fbce9528f ;
	mad_f32	 $s10, $s8, $s10, 0Fbea66beb ;
	mad_f32	 $s10, $s8, $s10, 0F3e0375d4 ;
	cmov_b32	 $s4, $c2, $s10, $s4 ;
	cmov_b32	 $s9, $c3, $s11, $s9 ;
	mad_f32	 $s10, $s8, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s10, $s8, $s10, 0F3e013307 ;
	mad_f32	 $s10, $s8, $s10, 0F3d931ae7 ;
	mad_f32	 $s10, $s8, $s10, 0F3f0a5785 ;
	mad_f32	 $s10, $s8, $s10, 0F3dd9f331 ;
	cmov_b32	 $s9, $c1, $s10, $s9 ;
	mad_f32	 $s10, $s8, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s10, $s8, $s10, 0F3ba68116 ;
	mad_f32	 $s10, $s8, $s10, 0F3d852a63 ;
	mad_f32	 $s10, $s8, $s10, 0F3ecbbbce ;
	cmov_b32	 $s9, $c2, $s10, $s9 ;
	mad_f32	 $s8, $s8, $s9, 0F3f800000 ;
	div_f32	 $s4, $s4, $s8 ;
	and_b32	 $s8, $s6, 2147479552 ;
	add_f32	 $s9, $s8, $s7 ;
	sub_f32	 $s10, $s8, $s7 ;
	mad_f32	 $s9, $s10, $s9, $s4 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s9, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s9 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s13, $s12, $s11 ;
	mul_f32	 $s14, $s13, $s13 ;
	mad_f32	 $s15, $s14, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s15, $s14, $s15, 0F388ab355 ;
	mad_f32	 $s15, $s14, $s15, 0Fbb360b61 ;
	mad_f32	 $s15, $s14, $s15, 0F3e2aaaab ;
	neg_f32	 $s15, $s15 ;
	mad_f32	 $s14, $s14, $s15, $s13 ;
	mul_f32	 $s13, $s13, $s14 ;
	sub_f32	 $s14, 0F40000000, $s14 ;
	div_f32	 $s13, $s13, $s14 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s13 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s9, $s9 ;
	cmov_b32	 $s9, $c3, $s9, $s10 ;
	neg_f32	 $s10, $s8 ;
	mad_f32	 $s8, $s10, $s8, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s8, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s8 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s13, $s12, $s11 ;
	mul_f32	 $s14, $s13, $s13 ;
	mad_f32	 $s15, $s14, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s15, $s14, $s15, 0F388ab355 ;
	mad_f32	 $s15, $s14, $s15, 0Fbb360b61 ;
	mad_f32	 $s15, $s14, $s15, 0F3e2aaaab ;
	neg_f32	 $s15, $s15 ;
	mad_f32	 $s14, $s14, $s15, $s13 ;
	mul_f32	 $s13, $s13, $s14 ;
	sub_f32	 $s14, 0F40000000, $s14 ;
	div_f32	 $s13, $s13, $s14 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s13 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s8, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s8, $s8 ;
	cmov_b32	 $s8, $c3, $s8, $s10 ;
	mul_f32	 $s8, $s8, $s9 ;
	div_f32	 $s8, $s8, $s7 ;
	sub_f32	 $s8, 0F3f800000, $s8 ;
	cmp_lt_b1_f32	 $c3, $s7, 0F40c00000 ;
	cmov_b32	 $s8, $c3, $s8, 0F3f800000 ;
	add_f32	 $s9, $s4, 0F3f58560b ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	and_b32	 $s6, $s6, -2147483648 ;
	or_b32	 $s6, $s8, $s6 ;
	mad_f32	 $s4, $s5, $s4, $s5 ;
	cmov_b32	 $s4, $c2, $s4, $s6 ;
	mul_f32	 $s6, $s5, 0F3f8375d4 ;
	mad_f32	 $s6, 0F41000000, $s5, $s6 ;
	mul_f32	 $s6, $s6, 0F3e000000 ;
	cmp_lt_b1_f32	 $c1, $s7, 0F31800000 ;
	cmov_b32	 $s4, $c1, $s6, $s4 ;
	cmp_nan_b1_f32	 $c1, $s5, $s5 ;
	cmov_b32	 $s5, $c1, $s5, $s4 ;
	cvt_f64_f32	$d1, $s5 ;
	sub_f64	 $d1, 0D3ff0000000000000, $d1 ;
@BB65_15:
	cvt_f64_f32	$d2, $s3 ;
	mul_f64	 $d3, $d2, 0D3fe0000000000000 ;
	mul_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s5, $d3 ;
	cvt_near_f64_s32	$d3, $s5 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s4, $s5, 63 ;
	shl_u32	 $s4, $s4, 4 ;
	//ldas_global_u32	$s6, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s4, $s6, $s4 ;
	ld_readonly_f64	$d4, [$s4 + 8] ;
	ld_readonly_f64	$d5, [$s4] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d3, $d6, $d3, $d4 ;
	add_f64	 $d3, $d3, $d5 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s4, $d4 ;
	and_b32	 $s4, $s4, 2047 ;
	shr_s32	 $s5, $s5, 6 ;
	add_u32	 $s6, $s4, $s5 ;
	sub_u32	 $s7, -2147483648, $s5 ;
	cmp_gt_b1_s32	 $c1, $s7, $s4 ;
	cmp_lt_b1_s32	 $c2, $s5, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s6, $c1, -2147483648, $s6 ;
	sub_u32	 $s7, 2147483647, $s5 ;
	cmp_lt_b1_s32	 $c1, $s7, $s4 ;
	cmp_gt_b1_s32	 $c2, $s5, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s5, $c1, 2147483647, $s6 ;
	max_s32	 $s5, $s5, 0 ;
	min_s32	 $s5, $s5, 2047 ;
	cmp_eq_b1_u32	 $c1, $s5, 2047 ;
	cmp_eq_b1_u32	 $c2, $s5, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s4, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c1, $d4, 0 ;
	cmp_eq_b1_u32	 $c1, $s4, 2047 ;
	cmov_b64	 $d4, $c1, $d4, $d5 ;
	cvt_u64_u32	$d5, $s5 ;
	cmov_b64	 $d5, $c1, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c2, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c1, $d2, $d2 ;
	cmov_b64	 $d3, $c1, $d2, $d3 ;
	cmp_gt_b1_f64	 $c1, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c1, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c1, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c1, 0D0000000000000000, $d3 ;
	mul_f64	 $d1, $d1, 0D3fe0000000000000 ;
	sub_f64	 $d0, $d1, $d0 ;
	cvt_near_f32_f64	$s5, $d0 ;
	mul_f32	 $s5, $s5, 0Fc0206c99 ;
	cvt_f64_f32	$d0, $s5 ;
	mul_f64	 $d0, $d0, $d2 ;
	cvt_near_f32_f64	$s5, $d0 ;
	add_f32	 $s3, $s3, $s5 ;
@BB65_16:
	mul_f32	 $s3, $s3, 0F3f3504f3 ;
	mul_f32	 $s5, $s3, $s3 ;
	cmp_lt_b1_f32	 $c1, $s5, 0F00000000 ;
	cmov_b32	 $s6, $c1, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s6, $s5, 0F3fb8aa3b, $s6 ;
	cvt_zeroi_s32_f32	$s6, $s6 ;
	cvt_near_f32_s32	$s7, $s6 ;
	mad_f32	 $s8, $s7, 0Fbf317180, $s5 ;
	mul_f32	 $s7, $s7, 0Fb717f7d1 ;
	add_f32	 $s9, $s8, $s7 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s11, $s10, $s11, 0F388ab355 ;
	mad_f32	 $s11, $s10, $s11, 0Fbb360b61 ;
	mad_f32	 $s11, $s10, $s11, 0F3e2aaaab ;
	neg_f32	 $s11, $s11 ;
	mad_f32	 $s10, $s10, $s11, $s9 ;
	mul_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s10, 0F40000000, $s10 ;
	div_f32	 $s9, $s9, $s10 ;
	neg_f32	 $s7, $s7 ;
	sub_f32	 $s7, $s7, $s9 ;
	sub_f32	 $s7, $s7, $s8 ;
	sub_f32	 $s7, 0F3f800000, $s7 ;
	shl_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s7, $s6 ;
	cmp_lt_b1_f32	 $c1, $s5, 0Fc2aeac4f ;
	cmov_b32	 $s6, $c1, 0F00000000, $s6 ;
	cmp_lt_b1_f32	 $c1, $s5, 0F42b17218 ;
	cmov_b32	 $s6, $c1, $s6, 0F7f800000 ;
	cmp_nan_b1_f32	 $c1, $s5, $s5 ;
	cmov_b32	 $s5, $c1, $s5, $s6 ;
	mul_f32	 $s5, $s5, 0F3f62dfc5 ;
	cmp_ge_b1_f32	 $c1, $s2, 0F3f000000 ;
	cbr	$c1, @BB65_18 ;
// BB#17:
	mov_b32	$s4, $s3 ;
	and_b32	 $s6, $s4, 2147483647 ;
	add_f32	 $s7, $s6, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F3fa00000 ;
	mul_f32	 $s8, $s6, $s6 ;
	div_f32	 $s9, 0F3f800000, $s8 ;
	cmov_b32	 $s7, $c1, $s7, $s9 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F3f580000 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	mad_f32	 $s8, $s7, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s8, $s7, $s8, 0Fc41f6441 ;
	mad_f32	 $s8, $s7, $s8, 0Fc320a2ea ;
	mad_f32	 $s8, $s7, $s8, 0Fc18e104b ;
	mad_f32	 $s8, $s7, $s8, 0Fbf4c9dd4 ;
	mad_f32	 $s8, $s7, $s8, 0Fbc21a092 ;
	mad_f32	 $s9, $s7, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s9, $s7, $s9, 0Fc3389ae7 ;
	mad_f32	 $s9, $s7, $s9, 0Fc322658c ;
	mad_f32	 $s9, $s7, $s9, 0Fc2798057 ;
	mad_f32	 $s9, $s7, $s9, 0Fc128f022 ;
	mad_f32	 $s9, $s7, $s9, 0Fbf31a0b7 ;
	mad_f32	 $s9, $s7, $s9, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c3, $s6, 0F4036db6d ;
	cmov_b32	 $s8, $c3, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s9, $s7, $s9, 0Fbde31cc2 ;
	mad_f32	 $s9, $s7, $s9, 0F3ea2fe54 ;
	mad_f32	 $s9, $s7, $s9, 0Fbebe9208 ;
	mad_f32	 $s9, $s7, $s9, 0F3ed46805 ;
	mad_f32	 $s9, $s7, $s9, 0Fbb1acdc6 ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s9, $s7, $s9, 0Fbce9528f ;
	mad_f32	 $s9, $s7, $s9, 0Fbea66beb ;
	mad_f32	 $s9, $s7, $s9, 0F3e0375d4 ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s9, $s7, $s9, 0F451f90ce ;
	mad_f32	 $s9, $s7, $s9, 0F4547fdbb ;
	mad_f32	 $s9, $s7, $s9, 0F44c01759 ;
	mad_f32	 $s9, $s7, $s9, 0F43a2e571 ;
	mad_f32	 $s9, $s7, $s9, 0F41f2b459 ;
	mad_f32	 $s10, $s7, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s10, $s7, $s10, 0F42d9451f ;
	mad_f32	 $s10, $s7, $s10, 0F43d6810b ;
	mad_f32	 $s10, $s7, $s10, 0F442158c9 ;
	mad_f32	 $s10, $s7, $s10, 0F43d9486f ;
	mad_f32	 $s10, $s7, $s10, 0F4309a863 ;
	mad_f32	 $s10, $s7, $s10, 0F419d35ce ;
	cmov_b32	 $s9, $c3, $s10, $s9 ;
	mad_f32	 $s10, $s7, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s10, $s7, $s10, 0F3e013307 ;
	mad_f32	 $s10, $s7, $s10, 0F3d931ae7 ;
	mad_f32	 $s10, $s7, $s10, 0F3f0a5785 ;
	mad_f32	 $s10, $s7, $s10, 0F3dd9f331 ;
	cmov_b32	 $s9, $c1, $s10, $s9 ;
	mad_f32	 $s10, $s7, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s10, $s7, $s10, 0F3ba68116 ;
	mad_f32	 $s10, $s7, $s10, 0F3d852a63 ;
	mad_f32	 $s10, $s7, $s10, 0F3ecbbbce ;
	cmov_b32	 $s9, $c2, $s10, $s9 ;
	mad_f32	 $s7, $s7, $s9, 0F3f800000 ;
	div_f32	 $s7, $s8, $s7 ;
	and_b32	 $s4, $s4, 2147479552 ;
	add_f32	 $s8, $s4, $s6 ;
	sub_f32	 $s9, $s4, $s6 ;
	mad_f32	 $s8, $s9, $s8, $s7 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F00000000 ;
	cmov_b32	 $s9, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s9, $s8, 0F3fb8aa3b, $s9 ;
	cvt_zeroi_s32_f32	$s9, $s9 ;
	cvt_near_f32_s32	$s10, $s9 ;
	mad_f32	 $s11, $s10, 0Fbf317180, $s8 ;
	mul_f32	 $s10, $s10, 0Fb717f7d1 ;
	add_f32	 $s12, $s11, $s10 ;
	mul_f32	 $s13, $s12, $s12 ;
	mad_f32	 $s14, $s13, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s14, $s13, $s14, 0F388ab355 ;
	mad_f32	 $s14, $s13, $s14, 0Fbb360b61 ;
	mad_f32	 $s14, $s13, $s14, 0F3e2aaaab ;
	neg_f32	 $s14, $s14 ;
	mad_f32	 $s13, $s13, $s14, $s12 ;
	mul_f32	 $s12, $s12, $s13 ;
	sub_f32	 $s13, 0F40000000, $s13 ;
	div_f32	 $s12, $s12, $s13 ;
	neg_f32	 $s10, $s10 ;
	sub_f32	 $s10, $s10, $s12 ;
	sub_f32	 $s10, $s10, $s11 ;
	sub_f32	 $s10, 0F3f800000, $s10 ;
	shl_u32	 $s9, $s9, 23 ;
	add_u32	 $s9, $s10, $s9 ;
	cmp_lt_b1_f32	 $c3, $s8, 0Fc2aeac4f ;
	cmov_b32	 $s9, $c3, 0F00000000, $s9 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F42b17218 ;
	cmov_b32	 $s9, $c3, $s9, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s8, $s8 ;
	cmov_b32	 $s8, $c3, $s8, $s9 ;
	neg_f32	 $s9, $s4 ;
	mad_f32	 $s4, $s9, $s4, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c3, $s4, 0F00000000 ;
	cmov_b32	 $s9, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s9, $s4, 0F3fb8aa3b, $s9 ;
	cvt_zeroi_s32_f32	$s9, $s9 ;
	cvt_near_f32_s32	$s10, $s9 ;
	mad_f32	 $s11, $s10, 0Fbf317180, $s4 ;
	mul_f32	 $s10, $s10, 0Fb717f7d1 ;
	add_f32	 $s12, $s11, $s10 ;
	mul_f32	 $s13, $s12, $s12 ;
	mad_f32	 $s14, $s13, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s14, $s13, $s14, 0F388ab355 ;
	mad_f32	 $s14, $s13, $s14, 0Fbb360b61 ;
	mad_f32	 $s14, $s13, $s14, 0F3e2aaaab ;
	neg_f32	 $s14, $s14 ;
	mad_f32	 $s13, $s13, $s14, $s12 ;
	mul_f32	 $s12, $s12, $s13 ;
	sub_f32	 $s13, 0F40000000, $s13 ;
	div_f32	 $s12, $s12, $s13 ;
	neg_f32	 $s10, $s10 ;
	sub_f32	 $s10, $s10, $s12 ;
	sub_f32	 $s10, $s10, $s11 ;
	sub_f32	 $s10, 0F3f800000, $s10 ;
	shl_u32	 $s9, $s9, 23 ;
	add_u32	 $s9, $s10, $s9 ;
	cmp_lt_b1_f32	 $c3, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s9, $c3, 0F00000000, $s9 ;
	cmp_lt_b1_f32	 $c3, $s4, 0F42b17218 ;
	cmov_b32	 $s9, $c3, $s9, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s4, $s4 ;
	cmov_b32	 $s4, $c3, $s4, $s9 ;
	mul_f32	 $s4, $s4, $s8 ;
	div_f32	 $s4, $s4, $s6 ;
	sub_f32	 $s8, 0F40000000, $s4 ;
	cmp_lt_b1_f32	 $c3, $s3, 0F00000000 ;
	cmov_b32	 $s4, $c3, $s8, $s4 ;
	cmp_lt_b1_f32	 $c4, $s6, 0F41e00000 ;
	cmov_b32	 $s4, $c4, $s4, 0F00000000 ;
	sub_f32	 $s6, 0F3e1ea7d4, $s7 ;
	add_f32	 $s8, $s7, 0F3f58560b ;
	add_f32	 $s8, $s8, 0F3f800000 ;
	cmov_b32	 $s6, $c3, $s8, $s6 ;
	cmov_b32	 $s4, $c1, $s6, $s4 ;
	add_f32	 $s6, $s3, 0Fbf000000 ;
	mad_f32	 $s6, $s3, $s7, $s6 ;
	sub_f32	 $s6, 0F3f000000, $s6 ;
	cmov_b32	 $s4, $c2, $s6, $s4 ;
	cmp_lt_b1_f32	 $c1, $s3, 0Fc0c00000 ;
	cmov_b32	 $s4, $c1, 0F40000000, $s4 ;
	cmp_nan_b1_f32	 $c1, $s3, $s3 ;
	cmov_b32	 $s4, $c1, $s3, $s4 ;
	sub_f32	 $s4, $s4, $s1 ;
	mul_f32	 $s5, $s5, $s4 ;
	add_f32	 $s3, $s3, $s5 ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s4, $s5, 2147483647 ;
	add_f32	 $s6, $s4, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c1, $s4, 0F3fa00000 ;
	mul_f32	 $s7, $s4, $s4 ;
	div_f32	 $s8, 0F3f800000, $s7 ;
	cmov_b32	 $s6, $c1, $s6, $s8 ;
	cmp_lt_b1_f32	 $c2, $s4, 0F3f580000 ;
	cmov_b32	 $s6, $c2, $s7, $s6 ;
	mad_f32	 $s7, $s6, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s7, $s6, $s7, 0Fc41f6441 ;
	mad_f32	 $s7, $s6, $s7, 0Fc320a2ea ;
	mad_f32	 $s7, $s6, $s7, 0Fc18e104b ;
	mad_f32	 $s7, $s6, $s7, 0Fbf4c9dd4 ;
	mad_f32	 $s7, $s6, $s7, 0Fbc21a092 ;
	mad_f32	 $s8, $s6, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s8, $s6, $s8, 0Fc3389ae7 ;
	mad_f32	 $s8, $s6, $s8, 0Fc322658c ;
	mad_f32	 $s8, $s6, $s8, 0Fc2798057 ;
	mad_f32	 $s8, $s6, $s8, 0Fc128f022 ;
	mad_f32	 $s8, $s6, $s8, 0Fbf31a0b7 ;
	mad_f32	 $s8, $s6, $s8, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c3, $s4, 0F4036db6d ;
	cmov_b32	 $s7, $c3, $s8, $s7 ;
	mad_f32	 $s8, $s6, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s8, $s6, $s8, 0Fbde31cc2 ;
	mad_f32	 $s8, $s6, $s8, 0F3ea2fe54 ;
	mad_f32	 $s8, $s6, $s8, 0Fbebe9208 ;
	mad_f32	 $s8, $s6, $s8, 0F3ed46805 ;
	mad_f32	 $s8, $s6, $s8, 0Fbb1acdc6 ;
	cmov_b32	 $s7, $c1, $s8, $s7 ;
	mad_f32	 $s8, $s6, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s8, $s6, $s8, 0Fbce9528f ;
	mad_f32	 $s8, $s6, $s8, 0Fbea66beb ;
	mad_f32	 $s8, $s6, $s8, 0F3e0375d4 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	mad_f32	 $s8, $s6, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s8, $s6, $s8, 0F451f90ce ;
	mad_f32	 $s8, $s6, $s8, 0F4547fdbb ;
	mad_f32	 $s8, $s6, $s8, 0F44c01759 ;
	mad_f32	 $s8, $s6, $s8, 0F43a2e571 ;
	mad_f32	 $s8, $s6, $s8, 0F41f2b459 ;
	mad_f32	 $s9, $s6, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s9, $s6, $s9, 0F42d9451f ;
	mad_f32	 $s9, $s6, $s9, 0F43d6810b ;
	mad_f32	 $s9, $s6, $s9, 0F442158c9 ;
	mad_f32	 $s9, $s6, $s9, 0F43d9486f ;
	mad_f32	 $s9, $s6, $s9, 0F4309a863 ;
	mad_f32	 $s9, $s6, $s9, 0F419d35ce ;
	cmov_b32	 $s8, $c3, $s9, $s8 ;
	mad_f32	 $s9, $s6, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s9, $s6, $s9, 0F3e013307 ;
	mad_f32	 $s9, $s6, $s9, 0F3d931ae7 ;
	mad_f32	 $s9, $s6, $s9, 0F3f0a5785 ;
	mad_f32	 $s9, $s6, $s9, 0F3dd9f331 ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	mad_f32	 $s9, $s6, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s9, $s6, $s9, 0F3ba68116 ;
	mad_f32	 $s9, $s6, $s9, 0F3d852a63 ;
	mad_f32	 $s9, $s6, $s9, 0F3ecbbbce ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s6, $s6, $s8, 0F3f800000 ;
	div_f32	 $s6, $s7, $s6 ;
	and_b32	 $s5, $s5, 2147479552 ;
	add_f32	 $s7, $s5, $s4 ;
	sub_f32	 $s8, $s5, $s4 ;
	mad_f32	 $s7, $s8, $s7, $s6 ;
	cmp_lt_b1_f32	 $c3, $s7, 0F00000000 ;
	cmov_b32	 $s8, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s7, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s7 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c3, $s7, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c3, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c3, $s7, 0F42b17218 ;
	cmov_b32	 $s8, $c3, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s7, $s7 ;
	cmov_b32	 $s7, $c3, $s7, $s8 ;
	neg_f32	 $s8, $s5 ;
	mad_f32	 $s5, $s8, $s5, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c3, $s5, 0F00000000 ;
	cmov_b32	 $s8, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s8, $s5, 0F3fb8aa3b, $s8 ;
	cvt_zeroi_s32_f32	$s8, $s8 ;
	cvt_near_f32_s32	$s9, $s8 ;
	mad_f32	 $s10, $s9, 0Fbf317180, $s5 ;
	mul_f32	 $s9, $s9, 0Fb717f7d1 ;
	add_f32	 $s11, $s10, $s9 ;
	mul_f32	 $s12, $s11, $s11 ;
	mad_f32	 $s13, $s12, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s13, $s12, $s13, 0F388ab355 ;
	mad_f32	 $s13, $s12, $s13, 0Fbb360b61 ;
	mad_f32	 $s13, $s12, $s13, 0F3e2aaaab ;
	neg_f32	 $s13, $s13 ;
	mad_f32	 $s12, $s12, $s13, $s11 ;
	mul_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s12, 0F40000000, $s12 ;
	div_f32	 $s11, $s11, $s12 ;
	neg_f32	 $s9, $s9 ;
	sub_f32	 $s9, $s9, $s11 ;
	sub_f32	 $s9, $s9, $s10 ;
	sub_f32	 $s9, 0F3f800000, $s9 ;
	shl_u32	 $s8, $s8, 23 ;
	add_u32	 $s8, $s9, $s8 ;
	cmp_lt_b1_f32	 $c3, $s5, 0Fc2aeac4f ;
	cmov_b32	 $s8, $c3, 0F00000000, $s8 ;
	cmp_lt_b1_f32	 $c3, $s5, 0F42b17218 ;
	cmov_b32	 $s8, $c3, $s8, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s5, $s5 ;
	cmov_b32	 $s5, $c3, $s5, $s8 ;
	mul_f32	 $s5, $s5, $s7 ;
	div_f32	 $s5, $s5, $s4 ;
	sub_f32	 $s7, 0F40000000, $s5 ;
	cmp_lt_b1_f32	 $c3, $s3, 0F00000000 ;
	cmov_b32	 $s5, $c3, $s7, $s5 ;
	cmp_lt_b1_f32	 $c4, $s4, 0F41e00000 ;
	cmov_b32	 $s5, $c4, $s5, 0F00000000 ;
	sub_f32	 $s4, 0F3e1ea7d4, $s6 ;
	add_f32	 $s7, $s6, 0F3f58560b ;
	add_f32	 $s7, $s7, 0F3f800000 ;
	cmov_b32	 $s4, $c3, $s7, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	add_f32	 $s4, $s3, 0Fbf000000 ;
	mad_f32	 $s4, $s3, $s6, $s4 ;
	sub_f32	 $s4, 0F3f000000, $s4 ;
	cmov_b32	 $s5, $c2, $s4, $s5 ;
	cmp_lt_b1_f32	 $c1, $s3, 0Fc0c00000 ;
	cmov_b32	 $s5, $c1, 0F40000000, $s5 ;
	cmp_nan_b1_f32	 $c1, $s3, $s3 ;
	cmov_b32	 $s5, $c1, $s3, $s5 ;
	sub_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s5, $s3, $s3 ;
	cmp_lt_b1_f32	 $c1, $s5, 0F00000000 ;
	cmov_b32	 $s4, $c1, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s4, $s5, 0F3fb8aa3b, $s4 ;
	cvt_zeroi_s32_f32	$s4, $s4 ;
	cvt_near_f32_s32	$s6, $s4 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s5 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s6, $s4 ;
	cmp_lt_b1_f32	 $c1, $s5, 0Fc2aeac4f ;
	cmov_b32	 $s4, $c1, 0F00000000, $s4 ;
	cmp_lt_b1_f32	 $c1, $s5, 0F42b17218 ;
	cmov_b32	 $s4, $c1, $s4, 0F7f800000 ;
	cmp_nan_b1_f32	 $c1, $s5, $s5 ;
	cmov_b32	 $s5, $c1, $s5, $s4 ;
	mul_f32	 $s5, $s5, 0F3f62dfc5 ;
	mul_f32	 $s1, $s5, $s1 ;
	add_f32	 $s3, $s3, $s1 ;
	brn	@BB65_20 ;
@BB65_18:
	cmp_gtu_b1_f32	 $c1, $s2, 0F3f800000 ;
	cbr	$c1, @BB65_20 ;
// BB#19:
	mov_b32	$s4, $s3 ;
	and_b32	 $s6, $s4, 2147483647 ;
	add_f32	 $s7, $s6, 0Fbf800000 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F3fa00000 ;
	mul_f32	 $s8, $s6, $s6 ;
	div_f32	 $s9, 0F3f800000, $s8 ;
	cmov_b32	 $s7, $c1, $s7, $s9 ;
	cmp_lt_b1_f32	 $c2, $s6, 0F3f580000 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	mad_f32	 $s8, $s7, 0Fc3f1c275, 0Fc480230b ;
	mad_f32	 $s8, $s7, $s8, 0Fc41f6441 ;
	mad_f32	 $s8, $s7, $s8, 0Fc320a2ea ;
	mad_f32	 $s8, $s7, $s8, 0Fc18e104b ;
	mad_f32	 $s8, $s7, $s8, 0Fbf4c9dd4 ;
	mad_f32	 $s8, $s7, $s8, 0Fbc21a092 ;
	mad_f32	 $s9, $s7, 0Fc11d077e, 0Fc2a2932b ;
	mad_f32	 $s9, $s7, $s9, 0Fc3389ae7 ;
	mad_f32	 $s9, $s7, $s9, 0Fc322658c ;
	mad_f32	 $s9, $s7, $s9, 0Fc2798057 ;
	mad_f32	 $s9, $s7, $s9, 0Fc128f022 ;
	mad_f32	 $s9, $s7, $s9, 0Fbf31a0b7 ;
	mad_f32	 $s9, $s7, $s9, 0Fbc21a093 ;
	cmp_lt_b1_f32	 $c3, $s6, 0F4036db6e ;
	cmov_b32	 $s8, $c3, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fbb0df9c0, 0F3d1151b3 ;
	mad_f32	 $s9, $s7, $s9, 0Fbde31cc2 ;
	mad_f32	 $s9, $s7, $s9, 0F3ea2fe54 ;
	mad_f32	 $s9, $s7, $s9, 0Fbebe9208 ;
	mad_f32	 $s9, $s7, $s9, 0F3ed46805 ;
	mad_f32	 $s9, $s7, $s9, 0Fbb1acdc6 ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fb7c756b1, 0Fbbbd1489 ;
	mad_f32	 $s9, $s7, $s9, 0Fbce9528f ;
	mad_f32	 $s9, $s7, $s9, 0Fbea66beb ;
	mad_f32	 $s9, $s7, $s9, 0F3e0375d4 ;
	cmov_b32	 $s8, $c2, $s9, $s8 ;
	mad_f32	 $s9, $s7, 0Fc1b38712, 0F43ed43a7 ;
	mad_f32	 $s9, $s7, $s9, 0F451f90ce ;
	mad_f32	 $s9, $s7, $s9, 0F4547fdbb ;
	mad_f32	 $s9, $s7, $s9, 0F44c01759 ;
	mad_f32	 $s9, $s7, $s9, 0F43a2e571 ;
	mad_f32	 $s9, $s7, $s9, 0F41f2b459 ;
	mad_f32	 $s10, $s7, 0Fbd777f97, 0F40d23f7c ;
	mad_f32	 $s10, $s7, $s10, 0F42d9451f ;
	mad_f32	 $s10, $s7, $s10, 0F43d6810b ;
	mad_f32	 $s10, $s7, $s10, 0F442158c9 ;
	mad_f32	 $s10, $s7, $s10, 0F43d9486f ;
	mad_f32	 $s10, $s7, $s10, 0F4309a863 ;
	mad_f32	 $s10, $s7, $s10, 0F419d35ce ;
	cmov_b32	 $s9, $c3, $s10, $s9 ;
	mad_f32	 $s10, $s7, 0F3c445aa3, 0F3c5f6e13 ;
	mad_f32	 $s10, $s7, $s10, 0F3e013307 ;
	mad_f32	 $s10, $s7, $s10, 0F3d931ae7 ;
	mad_f32	 $s10, $s7, $s10, 0F3f0a5785 ;
	mad_f32	 $s10, $s7, $s10, 0F3dd9f331 ;
	cmov_b32	 $s9, $c1, $s10, $s9 ;
	mad_f32	 $s10, $s7, 0Fb684e21a, 0F390aee49 ;
	mad_f32	 $s10, $s7, $s10, 0F3ba68116 ;
	mad_f32	 $s10, $s7, $s10, 0F3d852a63 ;
	mad_f32	 $s10, $s7, $s10, 0F3ecbbbce ;
	cmov_b32	 $s9, $c2, $s10, $s9 ;
	mad_f32	 $s7, $s7, $s9, 0F3f800000 ;
	div_f32	 $s7, $s8, $s7 ;
	and_b32	 $s8, $s4, 2147479552 ;
	add_f32	 $s9, $s8, $s6 ;
	sub_f32	 $s10, $s8, $s6 ;
	mad_f32	 $s9, $s10, $s9, $s7 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s9, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s9 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s13, $s12, $s11 ;
	mul_f32	 $s14, $s13, $s13 ;
	mad_f32	 $s15, $s14, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s15, $s14, $s15, 0F388ab355 ;
	mad_f32	 $s15, $s14, $s15, 0Fbb360b61 ;
	mad_f32	 $s15, $s14, $s15, 0F3e2aaaab ;
	neg_f32	 $s15, $s15 ;
	mad_f32	 $s14, $s14, $s15, $s13 ;
	mul_f32	 $s13, $s13, $s14 ;
	sub_f32	 $s14, 0F40000000, $s14 ;
	div_f32	 $s13, $s13, $s14 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s13 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s9, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s9, $s9 ;
	cmov_b32	 $s9, $c3, $s9, $s10 ;
	neg_f32	 $s10, $s8 ;
	mad_f32	 $s8, $s10, $s8, 0Fbf100000 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F00000000 ;
	cmov_b32	 $s10, $c3, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s10, $s8, 0F3fb8aa3b, $s10 ;
	cvt_zeroi_s32_f32	$s10, $s10 ;
	cvt_near_f32_s32	$s11, $s10 ;
	mad_f32	 $s12, $s11, 0Fbf317180, $s8 ;
	mul_f32	 $s11, $s11, 0Fb717f7d1 ;
	add_f32	 $s13, $s12, $s11 ;
	mul_f32	 $s14, $s13, $s13 ;
	mad_f32	 $s15, $s14, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s15, $s14, $s15, 0F388ab355 ;
	mad_f32	 $s15, $s14, $s15, 0Fbb360b61 ;
	mad_f32	 $s15, $s14, $s15, 0F3e2aaaab ;
	neg_f32	 $s15, $s15 ;
	mad_f32	 $s14, $s14, $s15, $s13 ;
	mul_f32	 $s13, $s13, $s14 ;
	sub_f32	 $s14, 0F40000000, $s14 ;
	div_f32	 $s13, $s13, $s14 ;
	neg_f32	 $s11, $s11 ;
	sub_f32	 $s11, $s11, $s13 ;
	sub_f32	 $s11, $s11, $s12 ;
	sub_f32	 $s11, 0F3f800000, $s11 ;
	shl_u32	 $s10, $s10, 23 ;
	add_u32	 $s10, $s11, $s10 ;
	cmp_lt_b1_f32	 $c3, $s8, 0Fc2aeac4f ;
	cmov_b32	 $s10, $c3, 0F00000000, $s10 ;
	cmp_lt_b1_f32	 $c3, $s8, 0F42b17218 ;
	cmov_b32	 $s10, $c3, $s10, 0F7f800000 ;
	cmp_nan_b1_f32	 $c3, $s8, $s8 ;
	cmov_b32	 $s8, $c3, $s8, $s10 ;
	mul_f32	 $s8, $s8, $s9 ;
	div_f32	 $s8, $s8, $s6 ;
	sub_f32	 $s8, 0F3f800000, $s8 ;
	cmp_lt_b1_f32	 $c3, $s6, 0F40c00000 ;
	cmov_b32	 $s8, $c3, $s8, 0F3f800000 ;
	add_f32	 $s9, $s7, 0F3f58560b ;
	cmov_b32	 $s8, $c1, $s9, $s8 ;
	and_b32	 $s4, $s4, -2147483648 ;
	or_b32	 $s4, $s8, $s4 ;
	mad_f32	 $s7, $s3, $s7, $s3 ;
	cmov_b32	 $s4, $c2, $s7, $s4 ;
	mul_f32	 $s7, $s3, 0F3f8375d4 ;
	mad_f32	 $s7, 0F41000000, $s3, $s7 ;
	mul_f32	 $s7, $s7, 0F3e000000 ;
	cmp_lt_b1_f32	 $c1, $s6, 0F31800000 ;
	cmov_b32	 $s4, $c1, $s7, $s4 ;
	cmp_nan_b1_f32	 $c1, $s3, $s3 ;
	cmov_b32	 $s4, $c1, $s3, $s4 ;
	cvt_f64_f32	$d0, $s4 ;
	cvt_f64_f32	$d1, $s1 ;
	sub_f64	 $d1, 0D3ff0000000000000, $d1 ;
	sub_f64	 $d0, $d1, $d0 ;
	cvt_f64_f32	$d1, $s5 ;
	mul_f64	 $d0, $d1, $d0 ;
	cvt_f64_f32	$d1, $s3 ;
	add_f64	 $d0, $d1, $d0 ;
	cvt_near_f32_f64	$s3, $d0 ;
@BB65_20:
	cmp_eq_b1_f32	 $c1, $s2, 0F00000000 ;
	cmov_b32	 $s1, $c1, 0F7f800000, $s3 ;
	mov_b32	$s2, $s0 ;
	or_b32	 $s2, $s2, 4194304 ;
	class_f32	 $c1, $s0, 3 ;
	cvt_u32_b1	$s3, $c1 ;
	cvt_b1_u32	$c1, $s3 ;
	not_b1	 $c1, $c1 ;
	cmov_b32	 $s1, $c1, $s1, $s2 ;
	class_f32	 $c1, $s0, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_b1_u32	$c1, $s0 ;
	not_b1	 $c1, $c1 ;
	cmov_b32	 $s0, $c1, $s1, 0F7fc00000 ;
	neg_f32	 $s1, $s0 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
@BB65_21:                               // %erfcinvf.exit
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfcinv_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[16];
@__amd_amp_Perfcinv_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	cmp_ltu_b1_f64	 $c0, $d0, 0D3d551c51ce3718e1 ;
	cbr	$c0, @BB66_16 ;
// BB#1:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d1, 0D4000000000000000, $d0 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D3ff0000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	sub_f64	 $d1, 0D3ff0000000000000, $d0 ;
	st_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c1, $d1, 0D3f98d4fdf3b645a2 ;
	cbr	$c1, @BB66_6 ;
// BB#2:
	mov_b64	$d0, $d1 ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c1, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c1, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c1, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c2, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c1, $d0, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_b1_u32	$c1, $s0 ;
	not_b1	 $c1, $c1 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c1 ;
	class_f64	 $c1, $d0, 3 ;
	cvt_u32_b1	$s1, $c1 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	brn	@BB66_9 ;
@BB66_3:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c1, $d2, $d4 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c3, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c3, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d5, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d5, $c3, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c3, $d4, $d4 ;
	cmov_b64	 $d0, $c3, $d4, $d0 ;
	cmp_gt_b1_f64	 $c3, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][40] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s3, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s2, $c3, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s3, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c3, $d4, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d4, $c3, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c3, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c4, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c3, $d3, $d3 ;
	cmov_b64	 $d0, $c3, $d3, $d0 ;
	cmp_gt_b1_f64	 $c3, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c3, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c1, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c1, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
@BB66_4:
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	ld_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d1 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D4042d33333333333 ;
	cbr	$c1, @BB66_11 ;
// BB#5:
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fe0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s3, $s1 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s3, $s1 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c1, $d3, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c1, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	cmp_gt_b1_f64	 $c1, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c1, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c1, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c1, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	brn	@BB66_12 ;
@BB66_6:
	ld_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c1, $d1, 0D3fef395810624dd3 ;
	cbr	$c1, @BB66_8 ;
// BB#7:
	mov_b64	$d0, $d1 ;
	add_f64	 $d0, $d0, 0Dbfe0000000000000 ;
	mul_f64	 $d2, $d0, $d0 ;
	fma_f64	 $d1, 0Dc04b3cf0ce3004c4, $d2, 0D406432bf2cf04277 ;
	fma_f64	 $d1, $d1, $d2, 0Dc063765e0b02d8d2 ;
	fma_f64	 $d1, $d1, $d2, 0D4050b348b1a7e9be ;
	fma_f64	 $d1, $d1, $d2, 0Dc02a8fb57e147826 ;
	fma_f64	 $d1, $d1, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, 0Dc043d931bc1e0525, $d2, 0D406b9e467034039b ;
	fma_f64	 $d3, $d3, $d2, 0Dc0713edb2dc53b99 ;
	fma_f64	 $d3, $d3, $d2, 0D40614b72b40b401b ;
	fma_f64	 $d3, $d3, $d2, 0Dc03eaa3034c08bcd ;
	fma_f64	 $d2, $d3, $d2, 0D40040d9320575479 ;
	mul_f64	 $d0, $d0, $d2 ;
	brn	@BB66_9 ;
@BB66_8:
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c1, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c1, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c1, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c2, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c1, $d0, 516 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_b1_u32	$c1, $s0 ;
	not_b1	 $c1, $c1 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c1 ;
	class_f64	 $c1, $d0, 3 ;
	cvt_u32_b1	$s1, $c1 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	cmov_b64	 $d1, $c1, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	neg_f64	 $d0, $d0 ;
@BB66_9:
	div_f64	 $d0, $d0, $d1 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0Dbfe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c1, $d0, 0D3fe0000000000000 ;
	cbr	$c1, @BB66_3 ;
// BB#10:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][40] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d1, $c2, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d2, $d1, $d2, 0Dc083ec881375f228 ;
	fma_f64	 $d2, $d1, $d2, 0Dc064145d43c5ed98 ;
	fma_f64	 $d2, $d1, $d2, 0Dc031c209555f995a ;
	fma_f64	 $d2, $d1, $d2, 0Dbfe993ba70c285de ;
	fma_f64	 $d2, $d1, $d2, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d1, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d1, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d1, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d2, $c3, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d1, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d1, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d1, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d1, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d1, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d1, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d1, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d1, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d1, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d1, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d1, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d1, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d1, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d1, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d1, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d1, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d1, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d1, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d1, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d1, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d1, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d1, $d1, $d6, 0D3ff0000000000000 ;
	div_f64	 $d1, $d2, $d1 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d1 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d0, $d4, $d0, $d7 ;
	add_f64	 $d0, $d0, $d3 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c3, 2047, $d4 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d4, $c4, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c3, $d6, $d6 ;
	cmov_b64	 $d0, $c3, $d6, $d0 ;
	cmp_gt_b1_f64	 $c3, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d2 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d3 ;
	add_f64	 $d0, $d0, $d4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s3, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s2, $c3, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s3, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c3, 2047, $d4 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d4, $c4, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c3, $d2, $d2 ;
	cmov_b64	 $d0, $c3, $d2, $d0 ;
	cmp_gt_b1_f64	 $c3, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d2 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][40] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c3, $d3, $d4 ;
	cmov_b64	 $d0, $c3, $d2, $d0 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d1 ;
	add_f64	 $d3, $d1, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c3, $d3, $d2 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	cmov_b64	 $d0, $c2, $d1, $d0 ;
	cmp_ltu_b1_f64	 $c1, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c1, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c1, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	brn	@BB66_4 ;
@BB66_11:
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fd0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s3, $s1 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s3, $s1 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c1, $d3, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c1, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	cmp_gt_b1_f64	 $c1, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c1, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c1, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c1, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	mul_f64	 $d0, $d0, $d1 ;
@BB66_12:                               // %.exit.i
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d0, $d0, 0D3fe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d0 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d2, $d1, $d2, 0D3fa5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fc5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fe0000000000000 ;
	fma_f64	 $d2, $d1, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d2, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d2 ;
	fma_f64	 $d1, $d4, $d1, $d2 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s4, $s1 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s3, $c1, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s4, $s1 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c1, $d2, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d2, $c1, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c1, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c1, $d0, $d0 ;
	cmov_b64	 $d1, $c1, $d0, $d1 ;
	mul_f64	 $d1, $d1, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c1, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c1, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c1, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c1, 0D0000000000000000, $d1 ;
	st_spill_u64	$d1, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d1 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fe0000000000000 ;
	cbr	$c1, @BB66_14 ;
// BB#13:
	div_f64	 $d1, 0D3ff0000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d1, $c1, $d6, $d1 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d0, $c2, $d0, $d1 ;
	fma_f64	 $d1, $d0, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d1, $d0, $d1, 0Dc083ec881375f228 ;
	fma_f64	 $d1, $d0, $d1, 0Dc064145d43c5ed98 ;
	fma_f64	 $d1, $d0, $d1, 0Dc031c209555f995a ;
	fma_f64	 $d1, $d0, $d1, 0Dbfe993ba70c285de ;
	fma_f64	 $d1, $d0, $d1, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d0, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d0, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d0, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d1, $c3, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d0, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d0, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d0, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d0, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d1, $c1, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d0, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d1, $c2, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d0, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d0, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d0, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d0, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d0, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d0, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d0, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d0, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d0, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d0, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d0, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d0, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d0, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d0, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d0, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d0, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d6, 0D3ff0000000000000 ;
	div_f64	 $d0, $d1, $d0 ;
	and_b64	 $d1, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d1, $d5 ;
	sub_f64	 $d7, $d1, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d2, $d4, $d2, $d7 ;
	add_f64	 $d2, $d2, $d3 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c3, 2047, $d4 ;
	extract_u64	 $d7, $d2, 52, 11 ;
	cmov_b64	 $d4, $c4, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c3, $d6, $d6 ;
	cmov_b64	 $d2, $c3, $d6, $d2 ;
	cmp_gt_b1_f64	 $c3, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c3, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c3, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c3, 0D0000000000000000, $d2 ;
	st_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d1 ;
	sub_f64	 $d1, 0Dbfe2000000000000, $d1 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	fma_f64	 $d2, $d6, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c3, 2047, $d4 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d4, $c4, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c3, $d1, $d1 ;
	cmov_b64	 $d2, $c3, $d1, $d2 ;
	cmp_gt_b1_f64	 $c3, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c3, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c3, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c3, 0D0000000000000000, $d2 ;
	ld_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d2 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c3, $d3, $d4 ;
	cmov_b64	 $d1, $c3, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c3, $d3, $d2 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c2, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c1, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c1, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c1, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c2, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c3, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c2, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	st_spill_u64	$d0, [%stack][40] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d0 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d6 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d0, [$s1] ;
	add_f64	 $d3, $d0, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d0, $d3, $d0 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d3, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d3, $c3, $d3, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c3, $d4, $d4 ;
	cmov_b64	 $d0, $c3, $d4, $d0 ;
	cmp_gt_b1_f64	 $c3, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d4, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d4, $c3, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c3, $d2, $d2 ;
	cmov_b64	 $d3, $c3, $d2, $d3 ;
	cmp_gt_b1_f64	 $c3, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c3, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c3, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c3, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][8] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c3, $d3, $d4 ;
	cmov_b64	 $d0, $c3, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][40] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c3, $d5, $d3 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d5, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d6, $d3 ;
	fma_f64	 $d2, $d6, $d2, $d5 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c1, $d3, 0D403c000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c1, $d3, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c1, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c1, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d2 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d4 ;
	fma_f64	 $d4, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d2, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d2, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s2, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d2, $d6, $d2, $d4 ;
	add_f64	 $d2, $d2, $d5 ;
	shr_u64	 $d4, $d2, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s1, $s2, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s3, $s2 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s1, $c1, -2147483648, $s1 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s3, $s2 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s1 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s2, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	cmov_b64	 $d5, $c1, $d4, 0 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmov_b64	 $d4, $c1, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c1, 2047, $d5 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d5, $c2, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d5, $d2 ;
	or_b64	 $d2, $d2, $d4 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	mul_f64	 $d2, $d2, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c1, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c1, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c1, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c1, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d1, $d0 ;
	add_f64	 $d0, $d3, $d0 ;
	brn	@BB66_15 ;
@BB66_14:
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c1, $d2, $d4 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c3, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c3, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d5, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d5, $c3, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c3, $d4, $d4 ;
	cmov_b64	 $d0, $c3, $d4, $d0 ;
	cmp_gt_b1_f64	 $c3, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c3, $d4, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d4, $c3, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c3, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c4, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c3, $d3, $d3 ;
	cmov_b64	 $d0, $c3, $d3, $d0 ;
	cmp_gt_b1_f64	 $c3, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c3, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c1, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c1, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, 0D3ff0000000000000, $d1 ;
	st_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c1, $d2, $d4 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c3, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c3, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d5, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d5, $c3, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c3, $d4, $d4 ;
	cmov_b64	 $d0, $c3, $d4, $d0 ;
	cmp_gt_b1_f64	 $c3, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c3, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c3, 0D0000000000000000, $d0 ;
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d3 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d5, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d5 ;
	fma_f64	 $d4, $d7, $d4, $d5 ;
	add_f64	 $d4, $d4, $d6 ;
	shr_u64	 $d5, $d4, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c3, $s4, $s1 ;
	cmp_lt_b1_s32	 $c4, $s0, 1 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s3, $c3, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c3, $s4, $s1 ;
	cmp_gt_b1_s32	 $c4, $s0, 0 ;
	and_b1	 $c3, $c4, $c3 ;
	cmov_b32	 $s0, $c3, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 2047 ;
	cmp_eq_b1_u32	 $c4, $s0, 0 ;
	or_b1	 $c3, $c4, $c3 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	or_b1	 $c3, $c3, $c4 ;
	not_b1	 $c3, $c3 ;
	and_b64	 $d5, $d4, 4503599627370495 ;
	cmov_b64	 $d6, $c3, $d5, 0 ;
	cmp_eq_b1_u32	 $c3, $s1, 2047 ;
	cmov_b64	 $d5, $c3, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c3, 2047, $d6 ;
	extract_u64	 $d7, $d4, 52, 11 ;
	cmov_b64	 $d6, $c4, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d4, $d4, -9223372036854775808 ;
	or_b64	 $d4, $d6, $d4 ;
	or_b64	 $d4, $d4, $d5 ;
	cmp_nan_b1_f64	 $c3, $d3, $d3 ;
	cmov_b64	 $d4, $c3, $d3, $d4 ;
	cmp_gt_b1_f64	 $c3, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d4, $c3, 0D7ff0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c3, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d3, $c3, 0D0000000000000000, $d4 ;
	mul_f64	 $d0, $d3, $d0 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c3, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c3, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c1, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c1, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d2, $d2 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d1 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d3, $d6, $d3, $d4 ;
	add_f64	 $d3, $d3, $d5 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c1, $s3, $s1 ;
	cmp_lt_b1_s32	 $c2, $s0, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c1, $s3, $s1 ;
	cmp_gt_b1_s32	 $c2, $s0, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s0, $c1, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c1, $d4, 0 ;
	cmp_eq_b1_u32	 $c1, $s1, 2047 ;
	cmov_b64	 $d4, $c1, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c1, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c2, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c1, $d1, $d1 ;
	cmov_b64	 $d3, $c1, $d1, $d3 ;
	mul_f64	 $d3, $d3, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c1, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c1, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c1, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c1, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d1, $d0 ;
	add_f64	 $d0, $d2, $d0 ;
@BB66_15:
	neg_f64	 $d1, $d0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d1, 0D4000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	brn	@BB66_20 ;
@BB66_16:
	cmp_equ_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	mov_b64	$d0, 0D7ff0000000000000 ;
	cbr	$c0, @BB66_20 ;
// BB#17:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_u64	 $d2, $d1, 32 ;
	cvt_u32_u64	$s0, $d2 ;
	extract_u32	 $s1, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s2, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s2, $d1 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s3, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s3 ;
	cvt_near_f64_s32	$d1, $s2 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	add_f64	 $d1, $d1, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0Dfff0000000000000, $d1 ;
	sub_f64	 $d1, 0Dbfdce6bb25aa1316, $d1 ;
	mov_b64	$d2, $d1 ;
	cmp_lt_b1_u64	 $c0, $d2, 4503599627370496 ;
	or_b64	 $d3, $d2, 274719577269600256 ;
	add_f64	 $d3, $d3, 0D83d0000000000000 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	shr_u64	 $d3, $d2, 32 ;
	cvt_u32_u64	$s0, $d3 ;
	extract_u32	 $s2, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s2 ;
	cvt_near_f64_s32	$d3, $s0 ;
	mul_f64	 $d3, $d3, 0D3f80000000000000 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	sub_f64	 $d4, $d4, $d3 ;
	fma_f64	 $d3, $d4, 0D3fe0000000000000, $d3 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	fma_f64	 $d5, $d4, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d5, $d4, $d5, 0D3fb5555555555557 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d3, $d3, $d4, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s2, $s0, -1016 ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d3, $d4, $d3 ;
	shr_u64	 $d2, $d2, 52 ;
	cvt_u32_u64	$s2, $d2 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s3, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s3 ;
	cvt_near_f64_s32	$d2, $s2 ;
	fma_f64	 $d3, $d2, 0D3e6efa39ef35793c, $d3 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d2, $d2, 0D3fe62e42e0000000, $d4 ;
	add_f64	 $d2, $d2, $d3 ;
	add_f64	 $d3, $d1, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, 0D4000000000000000 ;
	div_f64	 $d4, $d3, $d4 ;
	add_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d7, $d6, $d7, 0D3f89999999bac6d4 ;
	fma_f64	 $d6, $d6, $d7, 0D3fb55555555554e6 ;
	mul_f64	 $d4, $d3, $d4 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, $d5, $d6, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d2, $c0, 0Dfff0000000000000, $d2 ;
	sub_f64	 $d1, $d1, $d2 ;
	sqrt_f64	 $d1, $d1 ;
	mul_f64	 $d0, $d1, 0D3fe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d1, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d7, $d1 ;
	fma_f64	 $d7, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d1, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d1, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d7 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d1, $d4, $d1, $d7 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d1, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d1, $c2, $d6, $d1 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c2, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d1 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d1, $d2, $d1 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mov_b64	$d3, $d0 ;
	cmp_lt_b1_u64	 $c0, $d3, 4503599627370496 ;
	or_b64	 $d4, $d3, 274719577269600256 ;
	add_f64	 $d4, $d4, 0D83d0000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	shr_u64	 $d4, $d3, 32 ;
	cvt_u32_u64	$s0, $d4 ;
	extract_u32	 $s2, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s2 ;
	cvt_near_f64_s32	$d4, $s0 ;
	mul_f64	 $d4, $d4, 0D3f80000000000000 ;
	and_b64	 $d5, $d3, 4503599627370495 ;
	or_b64	 $d5, $d5, 4602678819172646912 ;
	sub_f64	 $d5, $d5, $d4 ;
	fma_f64	 $d4, $d5, 0D3fe0000000000000, $d4 ;
	div_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d5, $d4, $d4 ;
	fma_f64	 $d6, $d5, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d6, $d5, $d6, 0D3fb5555555555557 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d4, $d4, $d5, $d4 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s2, $s0, -1016 ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d4, $d5, $d4 ;
	shr_u64	 $d3, $d3, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s4, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s4 ;
	cvt_near_f64_s32	$d3, $s2 ;
	fma_f64	 $d4, $d3, 0D3e6efa39ef35793c, $d4 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d5, [$s0] ;
	fma_f64	 $d3, $d3, 0D3fe62e42e0000000, $d5 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d0, 0Dbff0000000000000 ;
	add_f64	 $d5, $d4, 0D4000000000000000 ;
	div_f64	 $d5, $d4, $d5 ;
	add_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, $d6 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d1, $d7, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d1, $d7, $d1, 0D3f89999999bac6d4 ;
	fma_f64	 $d1, $d7, $d1, 0D3fb55555555554e6 ;
	mul_f64	 $d5, $d4, $d5 ;
	neg_f64	 $d5, $d5 ;
	fma_f64	 $d1, $d6, $d1, $d5 ;
	add_f64	 $d1, $d4, $d1 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d1, $d3 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d1, $d1, 0Dbfbeeb95b094c18e ;
	add_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d3 ;
	fma_f64	 $d3, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d1, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d1, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d3 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	add_f64	 $d1, $d1, $d4 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s5, $s2 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s4, $c0, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s5, $s2 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d1, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d1 ;
	add_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d1, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d7, $d1 ;
	fma_f64	 $d7, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d1, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d1, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d7 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d1, $d4, $d1, $d7 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d1, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d1, $c2, $d6, $d1 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c2, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d1 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d1, $d2, $d1 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mov_b64	$d3, $d0 ;
	cmp_lt_b1_u64	 $c0, $d3, 4503599627370496 ;
	or_b64	 $d4, $d3, 274719577269600256 ;
	add_f64	 $d4, $d4, 0D83d0000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	shr_u64	 $d4, $d3, 32 ;
	cvt_u32_u64	$s0, $d4 ;
	extract_u32	 $s2, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s2 ;
	cvt_near_f64_s32	$d4, $s0 ;
	mul_f64	 $d4, $d4, 0D3f80000000000000 ;
	and_b64	 $d5, $d3, 4503599627370495 ;
	or_b64	 $d5, $d5, 4602678819172646912 ;
	sub_f64	 $d5, $d5, $d4 ;
	fma_f64	 $d4, $d5, 0D3fe0000000000000, $d4 ;
	div_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d5, $d4, $d4 ;
	fma_f64	 $d6, $d5, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d6, $d5, $d6, 0D3fb5555555555557 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d4, $d4, $d5, $d4 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s2, $s0, -1016 ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d4, $d5, $d4 ;
	shr_u64	 $d3, $d3, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s4, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s4 ;
	cvt_near_f64_s32	$d3, $s2 ;
	fma_f64	 $d4, $d3, 0D3e6efa39ef35793c, $d4 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d5, [$s0] ;
	fma_f64	 $d3, $d3, 0D3fe62e42e0000000, $d5 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d0, 0Dbff0000000000000 ;
	add_f64	 $d5, $d4, 0D4000000000000000 ;
	div_f64	 $d5, $d4, $d5 ;
	add_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, $d6 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d1, $d7, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d1, $d7, $d1, 0D3f89999999bac6d4 ;
	fma_f64	 $d1, $d7, $d1, 0D3fb55555555554e6 ;
	mul_f64	 $d5, $d4, $d5 ;
	neg_f64	 $d5, $d5 ;
	fma_f64	 $d1, $d6, $d1, $d5 ;
	add_f64	 $d1, $d4, $d1 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d1, $d3 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d1, $d1, 0Dbfbeeb95b094c18e ;
	add_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d3 ;
	fma_f64	 $d3, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d1, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d1, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d1, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d3 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	add_f64	 $d1, $d1, $d4 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s0, $s2 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s5, $s2 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s4, $c0, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s5, $s2 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d1, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d4, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d1 ;
	add_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d1, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d1, $d2, $d1, 0D405b28a3ee48ae2c ;
	fma_f64	 $d1, $d2, $d1, 0D407ad02157700314 ;
	fma_f64	 $d1, $d2, $d1, 0D40842b1921ec2868 ;
	fma_f64	 $d1, $d2, $d1, 0D407b290dd58a1a71 ;
	fma_f64	 $d1, $d2, $d1, 0D4061350c526ae721 ;
	fma_f64	 $d1, $d2, $d1, 0D4033a6b9bd707687 ;
	cmov_b64	 $d1, $c2, $d1, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d1, $c0, $d7, $d1 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d1, $c1, $d7, $d1 ;
	fma_f64	 $d1, $d2, $d1, 0D3ff0000000000000 ;
	div_f64	 $d1, $d6, $d1 ;
	st_spill_u64	$d1, [%stack][40] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d1 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d6 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d1, [$s2] ;
	add_f64	 $d3, $d1, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d1, $d3, $d1 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d1, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d6, $d1 ;
	or_b64	 $d1, $d1, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d1, $c2, $d4, $d1 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c2, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d1 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s0, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s4, $s2, $s0 ;
	sub_u32	 $s5, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s4 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d1, $d2, $d1 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][16] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][40] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d1, $c0, $d3, $d1 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d0 ;
	neg_f64	 $d5, $d0 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	cmov_b64	 $d1, $c1, $d2, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d0, 0D403c000000000000 ;
	cmov_b64	 $d1, $c0, $d1, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d0, 0Dc018000000000000 ;
	cmov_b64	 $d1, $c0, $d1, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_u64	 $d2, $d1, 32 ;
	cvt_u32_u64	$s0, $d2 ;
	extract_u32	 $s2, $s0, 13, 1 ;
	shr_s32	 $s0, $s0, 13 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d1, $d1, 0Dbfbeeb95b094c18e ;
	add_f64	 $d0, $d1, $d0 ;
	class_f64	 $c0, $d0, 504 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	cmp_ne_b1_b1	 $c0, $c0, 1 ;
	mov_b64	$d1, 0D0000000000000000 ;
	cbr	$c0, @BB66_19 ;
// BB#18:
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s3, $s1 ;
	ld_readonly_f64	$d1, [$s1 + 8] ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d3, $d2, $d1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d0 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d1, $d3, $d4, $d1 ;
	add_f64	 $d1, $d1, $d2 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d1 ;
@BB66_19:
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	add_f64	 $d0, $d0, $d1 ;
@BB66_20:                               // %erfcinv.exit
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfinv_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[18];
@__amd_amp_Perfinv_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_f64_f32	$d0, $s0 ;
	st_spill_u64	$d0, [%stack][40] ; // 8-byte Folded Reload
	abs_f64	 $d0, $d0 ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, 0D3ff0000000000000, $d0 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d0, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D3f98d4fdf3b645a2 ;
	cbr	$c0, @BB67_5 ;
// BB#1:
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s2, $s1, 1 ;
	extract_u32	 $s1, $s1, 1, 6 ;
	or_b32	 $s1, $s1, 64 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_LN_TBL] ;
	add_u32	 $s1, $s1, $s2 ;
	add_u32	 $s2, $s1, -1016 ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s2, $d1 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s3, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s3 ;
	cvt_near_f64_s32	$d1, $s2 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s1, $s1, -1024 ;
	ld_readonly_f64	$d3, [$s1] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s1, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s1, $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	brn	@BB67_8 ;
@BB67_2:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d5 ;
	cvt_near_f64_s32	$d5, $s1 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d6, [$s2 + 8] ;
	ld_readonly_f64	$d7, [$s2] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s3, $s2, $s1 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s4, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s4, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s3 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d5 ;
	cvt_u64_u32	$d5, $s1 ;
	cmov_b64	 $d5, $c2, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c3, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d0, $c2, $d3, $d0 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
@BB67_3:
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	ld_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d1 ;
	cmp_ge_b1_f64	 $c0, $d1, 0D4042d33333333333 ;
	cbr	$c0, @BB67_10 ;
// BB#4:
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fe0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s3, $s2, $s1 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s4, $s2 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s3 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	brn	@BB67_11 ;
@BB67_5:
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d0, 0D3fef395810624dd3 ;
	cbr	$c0, @BB67_7 ;
// BB#6:
	add_f64	 $d0, $d0, 0Dbfe0000000000000 ;
	mul_f64	 $d2, $d0, $d0 ;
	fma_f64	 $d1, 0Dc04b3cf0ce3004c4, $d2, 0D406432bf2cf04277 ;
	fma_f64	 $d1, $d1, $d2, 0Dc063765e0b02d8d2 ;
	fma_f64	 $d1, $d1, $d2, 0D4050b348b1a7e9be ;
	fma_f64	 $d1, $d1, $d2, 0Dc02a8fb57e147826 ;
	fma_f64	 $d1, $d1, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, 0Dc043d931bc1e0525, $d2, 0D406b9e467034039b ;
	fma_f64	 $d3, $d3, $d2, 0Dc0713edb2dc53b99 ;
	fma_f64	 $d3, $d3, $d2, 0D40614b72b40b401b ;
	fma_f64	 $d3, $d3, $d2, 0Dc03eaa3034c08bcd ;
	fma_f64	 $d2, $d3, $d2, 0D40040d9320575479 ;
	mul_f64	 $d0, $d0, $d2 ;
	brn	@BB67_8 ;
@BB67_7:
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s2, $s1, 1 ;
	extract_u32	 $s1, $s1, 1, 6 ;
	or_b32	 $s1, $s1, 64 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_LN_TBL] ;
	add_u32	 $s1, $s1, $s2 ;
	add_u32	 $s2, $s1, -1016 ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s2, $d1 ;
	and_b32	 $s2, $s2, 2047 ;
	cmov_b32	 $s3, $c0, -1083, -1023 ;
	add_u32	 $s2, $s2, $s3 ;
	cvt_near_f64_s32	$d1, $s2 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s1, $s1, -1024 ;
	ld_readonly_f64	$d3, [$s1] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s1, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s2, $c0 ;
	and_b32	 $s2, $s2, 1 ;
	or_b32	 $s1, $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	neg_f64	 $d0, $d0 ;
@BB67_8:
	div_f64	 $d0, $d0, $d1 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0Dbfe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D3fe0000000000000 ;
	cbr	$c0, @BB67_2 ;
// BB#9:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][56] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][48] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d1, $c1, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d2, $d1, $d2, 0Dc083ec881375f228 ;
	fma_f64	 $d2, $d1, $d2, 0Dc064145d43c5ed98 ;
	fma_f64	 $d2, $d1, $d2, 0Dc031c209555f995a ;
	fma_f64	 $d2, $d1, $d2, 0Dbfe993ba70c285de ;
	fma_f64	 $d2, $d1, $d2, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d1, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d1, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d1, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d1, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d1, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d1, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d1, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d1, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d1, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d1, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d1, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d1, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d1, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d1, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d1, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d1, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d1, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d1, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d1, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d1, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d1, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d1, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d1, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d1, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d1, $d1, $d6, 0D3ff0000000000000 ;
	div_f64	 $d1, $d2, $d1 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d1 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d7 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d0, $d4, $d0, $d7 ;
	add_f64	 $d0, $d0, $d3 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d0, $c2, $d6, $d0 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][64] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d3 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d2 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d3 ;
	add_f64	 $d0, $d0, $d4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s3, $s2, $s1 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s4, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s4, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s3 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][64] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d2 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][56] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][48] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d1 ;
	add_f64	 $d3, $d1, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	brn	@BB67_3 ;
@BB67_10:
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fd0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s3, $s2, $s1 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s4, $s2 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s3 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	mul_f64	 $d0, $d0, $d1 ;
@BB67_11:                               // %.exit.i
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d0, $d0, 0D3fe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d0 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d1 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d2, $d1, $d2, 0D3fa5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fc5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fe0000000000000 ;
	fma_f64	 $d2, $d1, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	//ldas_global_u32	$s3, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d2, [$s2 + 8] ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d4, $d3, $d2 ;
	fma_f64	 $d1, $d4, $d1, $d2 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s2, $d2 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s5, $s2 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s4, $c0, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s5, $s2 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s1 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	mul_f64	 $d1, $d1, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d1 ;
	st_spill_u64	$d1, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d1, 0D3fe0000000000000 ;
	cbr	$c0, @BB67_13 ;
// BB#12:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d5 ;
	cvt_near_f64_s32	$d5, $s1 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d6, [$s2 + 8] ;
	ld_readonly_f64	$d7, [$s2] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d5 ;
	cvt_u64_u32	$d5, $s1 ;
	cmov_b64	 $d5, $c2, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c3, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d0, $c2, $d3, $d0 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d5 ;
	cvt_near_f64_s32	$d5, $s1 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d6, [$s2 + 8] ;
	ld_readonly_f64	$d7, [$s2] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d4 ;
	cvt_near_f64_s32	$d4, $s1 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d3 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d5, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d5 ;
	fma_f64	 $d4, $d7, $d4, $d5 ;
	add_f64	 $d4, $d4, $d6 ;
	shr_u64	 $d5, $d4, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d4, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d4, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d4, $d4, -9223372036854775808 ;
	or_b64	 $d4, $d6, $d4 ;
	or_b64	 $d4, $d4, $d5 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d4, $c2, $d3, $d4 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d4, $c2, 0D7ff0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d3, $c2, 0D0000000000000000, $d4 ;
	mul_f64	 $d0, $d3, $d0 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mul_f64	 $d1, $d2, $d2 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d3 ;
	cvt_near_f64_s32	$d3, $s1 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d1 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s3, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s3 + 8] ;
	ld_readonly_f64	$d5, [$s3] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d3, $d6, $d3, $d4 ;
	add_f64	 $d3, $d3, $d5 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s3, $d4 ;
	and_b32	 $s3, $s3, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s2, $s3, $s1 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s4, $s3 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s4, $s3 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s2 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s3, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s3, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s1 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d3, $c0, $d1, $d3 ;
	mul_f64	 $d3, $d3, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c0, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d2, $d0 ;
	brn	@BB67_14 ;
@BB67_13:
	div_f64	 $d1, 0D3ff0000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d1, $c0, $d6, $d1 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	fma_f64	 $d1, $d0, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d1, $d0, $d1, 0Dc083ec881375f228 ;
	fma_f64	 $d1, $d0, $d1, 0Dc064145d43c5ed98 ;
	fma_f64	 $d1, $d0, $d1, 0Dc031c209555f995a ;
	fma_f64	 $d1, $d0, $d1, 0Dbfe993ba70c285de ;
	fma_f64	 $d1, $d0, $d1, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d0, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d0, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d0, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d1, $c2, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d0, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d0, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d0, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d0, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d1, $c0, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d0, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d1, $c1, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d0, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d0, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d0, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d0, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d0, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d0, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d0, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d0, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d0, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d0, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d0, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d0, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d0, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d0, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d0, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d0, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d6, 0D3ff0000000000000 ;
	div_f64	 $d0, $d1, $d0 ;
	and_b64	 $d1, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d1, $d5 ;
	sub_f64	 $d7, $d1, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d7 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d3, [$s2] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d2, $d4, $d2, $d7 ;
	add_f64	 $d2, $d2, $d3 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d2, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c2, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d2 ;
	st_spill_u64	$d2, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d1 ;
	sub_f64	 $d1, 0Dbfe2000000000000, $d1 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d3 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d3, [$s2 + 8] ;
	ld_readonly_f64	$d4, [$s2] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s1 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	fma_f64	 $d2, $d6, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s1 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c2, $d1, $d1 ;
	cmov_b64	 $d2, $c2, $d1, $d2 ;
	cmp_gt_b1_f64	 $c2, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c2, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c2, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d2 ;
	ld_spill_u64	$d2, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d2 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d0 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d6 ;
	cvt_near_f64_s32	$d6, $s1 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d0, [$s2] ;
	add_f64	 $d3, $d0, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d0, $d3, $d0 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d3 ;
	cvt_near_f64_s32	$d3, $s1 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d5, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d6, $d3 ;
	fma_f64	 $d2, $d6, $d2, $d5 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d3, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d3, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	mul_f64	 $d4, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d4 ;
	cvt_near_f64_s32	$d4, $s1 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d1 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d5, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d5 ;
	fma_f64	 $d4, $d7, $d4, $d5 ;
	add_f64	 $d4, $d4, $d6 ;
	shr_u64	 $d5, $d4, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s5, $s2 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s4, $c0, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s5, $s2 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d5, $d4, 4503599627370495 ;
	cmov_b64	 $d6, $c0, $d5, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d5, $c0, $d5, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c0, 2047, $d6 ;
	extract_u64	 $d7, $d4, 52, 11 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d4, $d4, -9223372036854775808 ;
	or_b64	 $d4, $d6, $d4 ;
	or_b64	 $d4, $d4, $d5 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d4, $c0, $d1, $d4 ;
	mul_f64	 $d4, $d4, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d4, $c0, 0D7ff0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d4 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d3, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d0 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d6 ;
	cvt_near_f64_s32	$d6, $s1 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d7, [$s2 + 8] ;
	ld_readonly_f64	$d0, [$s2] ;
	add_f64	 $d3, $d0, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d0, $d3, $d0 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s2, $d3 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d3 ;
	cvt_near_f64_s32	$d3, $s1 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s4, $s2, $s1 ;
	sub_u32	 $s5, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c2, $s5, $s2 ;
	cmp_lt_b1_s32	 $c3, $s1, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s4, $c2, -2147483648, $s4 ;
	sub_u32	 $s5, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c2, $s5, $s2 ;
	cmp_gt_b1_s32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s1, $c2, 2147483647, $s4 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s2, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s2, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s1 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d5, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d6, $d3 ;
	fma_f64	 $d2, $d6, $d2, $d5 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d3, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d3, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s1, $d2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d4 ;
	fma_f64	 $d4, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d2, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d2, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d4 ;
	and_b32	 $s2, $s1, 63 ;
	shl_u32	 $s2, $s2, 4 ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d2, $d6, $d2, $d4 ;
	add_f64	 $d2, $d2, $d5 ;
	shr_u64	 $d4, $d2, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s1, $s1, 6 ;
	add_u32	 $s3, $s1, $s2 ;
	sub_u32	 $s4, -2147483648, $s1 ;
	cmp_gt_b1_s32	 $c0, $s4, $s2 ;
	cmp_lt_b1_s32	 $c1, $s1, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s1 ;
	cmp_lt_b1_s32	 $c0, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, 2147483647, $s3 ;
	max_s32	 $s1, $s1, 0 ;
	min_s32	 $s1, $s1, 2047 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s1 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d5, $d2 ;
	or_b64	 $d2, $d2, $d4 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	mul_f64	 $d2, $d2, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d3, $d0 ;
@BB67_14:                               // %erfinv.exit
	ld_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][40] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d2, $d1 ;
	neg_f64	 $d2, $d0 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	cmp_eq_b1_f32	 $c0, $s0, 0F3f800000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d0 ;
	cmp_eq_b1_f32	 $c0, $s0, 0F00000000 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	cmp_eq_b1_f32	 $c0, $s0, 0Fbf800000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	cmp_gt_b1_f32	 $c0, $s0, 0F3f800000 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fbf800000 ;
	cmov_b64	 $d0, $c0, 0Dfff8000000000000, $d0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	cvt_near_f32_f64	$s0, $d0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Perfinv_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[18];
@__amd_amp_Perfinv_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][40] ; // 8-byte Folded Reload
	abs_f64	 $d0, $d0 ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, 0D3ff0000000000000, $d0 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d0, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D3f98d4fdf3b645a2 ;
	cbr	$c0, @BB68_5 ;
// BB#1:
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	brn	@BB68_8 ;
@BB68_2:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s3, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s2, $c2, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s3, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c2, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c3, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d0, $c2, $d3, $d0 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
@BB68_3:
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	ld_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d1 ;
	cmp_ge_b1_f64	 $c0, $d1, 0D4042d33333333333 ;
	cbr	$c0, @BB68_10 ;
// BB#4:
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fe0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	brn	@BB68_11 ;
@BB68_5:
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d0, 0D3fef395810624dd3 ;
	cbr	$c0, @BB68_7 ;
// BB#6:
	add_f64	 $d0, $d0, 0Dbfe0000000000000 ;
	mul_f64	 $d2, $d0, $d0 ;
	fma_f64	 $d1, 0Dc04b3cf0ce3004c4, $d2, 0D406432bf2cf04277 ;
	fma_f64	 $d1, $d1, $d2, 0Dc063765e0b02d8d2 ;
	fma_f64	 $d1, $d1, $d2, 0D4050b348b1a7e9be ;
	fma_f64	 $d1, $d1, $d2, 0Dc02a8fb57e147826 ;
	fma_f64	 $d1, $d1, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, 0Dc043d931bc1e0525, $d2, 0D406b9e467034039b ;
	fma_f64	 $d3, $d3, $d2, 0Dc0713edb2dc53b99 ;
	fma_f64	 $d3, $d3, $d2, 0D40614b72b40b401b ;
	fma_f64	 $d3, $d3, $d2, 0Dc03eaa3034c08bcd ;
	fma_f64	 $d2, $d3, $d2, 0D40040d9320575479 ;
	mul_f64	 $d0, $d0, $d2 ;
	brn	@BB68_8 ;
@BB68_7:
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0D3fe0000000000000 ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	mul_f64	 $d1, $d1, 0Dc000000000000000 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dfff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d1 ;
	sqrt_f64	 $d0, $d0 ;
	fma_f64	 $d1, 0D3f7fe2d857ac9fd4, $d0, 0D3fd4a34d2b590364 ;
	fma_f64	 $d1, $d1, $d0, 0D40038fa27c8ae616 ;
	fma_f64	 $d1, $d1, $d0, 0D400e09076895b119 ;
	fma_f64	 $d1, $d1, $d0, 0D3ff0000000000000 ;
	fma_f64	 $d2, 0Dbf7fe30d924acfe0, $d0, 0Dbfd4a224c0e881b8 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00334c0c1701758 ;
	fma_f64	 $d2, $d2, $d0, 0Dc00465da2c703a1a ;
	fma_f64	 $d2, $d2, $d0, 0D40117fa7f4ea4dc7 ;
	fma_f64	 $d0, $d2, $d0, 0D4007815c1e3fcfa2 ;
	neg_f64	 $d0, $d0 ;
@BB68_8:
	div_f64	 $d0, $d0, $d1 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, 0Dbfe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D3fe0000000000000 ;
	cbr	$c0, @BB68_2 ;
// BB#9:
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][56] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][48] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d1, $c1, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d2, $d1, $d2, 0Dc083ec881375f228 ;
	fma_f64	 $d2, $d1, $d2, 0Dc064145d43c5ed98 ;
	fma_f64	 $d2, $d1, $d2, 0Dc031c209555f995a ;
	fma_f64	 $d2, $d1, $d2, 0Dbfe993ba70c285de ;
	fma_f64	 $d2, $d1, $d2, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d1, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d1, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d1, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d1, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d1, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d1, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d1, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d1, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d1, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d2, $c1, $d6, $d2 ;
	fma_f64	 $d6, $d1, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d1, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d1, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d1, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d1, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d1, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d1, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d1, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d1, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d1, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d1, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d1, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d1, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d1, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d1, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d1, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d1, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d1, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d1, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d1, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d1, $d1, $d6, 0D3ff0000000000000 ;
	div_f64	 $d1, $d2, $d1 ;
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d7, $d2, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d1 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d0, $d4, $d0, $d7 ;
	add_f64	 $d0, $d0, $d3 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d0, $c2, $d6, $d0 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][64] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d2 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d3 ;
	add_f64	 $d0, $d0, $d4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s3, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s2, $c2, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s3, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][64] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d2 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][56] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][48] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d1 ;
	add_f64	 $d3, $d1, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d1, $d5, $d1, $d3 ;
	cmov_b64	 $d0, $c1, $d1, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	brn	@BB68_3 ;
@BB68_10:
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d1, 0D3fd0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d3, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555555555 ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d2, $d3, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	fma_f64	 $d2, $d5, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d3, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d2, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d0, 0D40040d931ff62706 ;
	mul_f64	 $d0, $d0, $d1 ;
	mul_f64	 $d0, $d0, $d1 ;
@BB68_11:                               // %.exit.i
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d0, $d0, 0D3fe6a09e667f3bcd ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d0 ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d1, $d0 ;
	fma_f64	 $d1, 0Dbd1cf79abc9e3b39, $d1, $d2 ;
	fma_f64	 $d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d2, $d1, $d2, 0D3fa5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fc5555555555555 ;
	fma_f64	 $d2, $d1, $d2, 0D3fe0000000000000 ;
	fma_f64	 $d2, $d1, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d2, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d2 ;
	fma_f64	 $d1, $d4, $d1, $d2 ;
	add_f64	 $d1, $d1, $d3 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s4, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s4, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	mul_f64	 $d1, $d1, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d1 ;
	st_spill_u64	$d1, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d1, 0D3fe0000000000000 ;
	cbr	$c0, @BB68_13 ;
// BB#12:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d0, 0Dbf862e42fefa0000, $d7, $d3 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d7, $d0 ;
	fma_f64	 $d7, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d0, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d0, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d7 ;
	fma_f64	 $d0, $d6, $d0, $d4 ;
	add_f64	 $d0, $d0, $d5 ;
	shr_u64	 $d4, $d0, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c2, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c3, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d4 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d0, $c2, $d3, $d0 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d3 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3ff4000000000000 ;
	mul_f64	 $d3, $d1, $d1 ;
	div_f64	 $d4, 0D3ff0000000000000, $d3 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d3, $d2 ;
	fma_f64	 $d3, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d3, $d2, $d3, 0Dc083ec881375f228 ;
	fma_f64	 $d3, $d2, $d3, 0Dc064145d43c5ed98 ;
	fma_f64	 $d3, $d2, $d3, 0Dc031c209555f995a ;
	fma_f64	 $d3, $d2, $d3, 0Dbfe993ba70c285de ;
	fma_f64	 $d3, $d2, $d3, 0Dbf84341239e86f4a ;
	fma_f64	 $d4, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc067135cebccabb2 ;
	fma_f64	 $d4, $d2, $d4, 0Dc0644cb184282266 ;
	fma_f64	 $d4, $d2, $d4, 0Dc04f300ae4cba38d ;
	fma_f64	 $d4, $d2, $d4, 0Dc0251e0441b0e726 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4006db6e00000000 ;
	cmov_b64	 $d3, $c2, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d4, $d2, $d4, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d4, $d2, $d4, 0D3fd45fca805120e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d4, $d2, $d4, 0D3fda8d00ad92b34d ;
	fma_f64	 $d4, $d2, $d4, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d4, $d2, $d4, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d4, $d2, $d4, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc06eba8214db68 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	fma_f64	 $d4, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d4, $d2, $d4, 0D40a3f219cedf3be6 ;
	fma_f64	 $d4, $d2, $d4, 0D40a8ffb7688c246a ;
	fma_f64	 $d4, $d2, $d4, 0D409802eb189d5118 ;
	fma_f64	 $d4, $d2, $d4, 0D40745cae221b9f0a ;
	fma_f64	 $d4, $d2, $d4, 0D403e568b261d5190 ;
	fma_f64	 $d5, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d5, $d2, $d5, 0D405b28a3ee48ae2c ;
	fma_f64	 $d5, $d2, $d5, 0D407ad02157700314 ;
	fma_f64	 $d5, $d2, $d5, 0D40842b1921ec2868 ;
	fma_f64	 $d5, $d2, $d5, 0D407b290dd58a1a71 ;
	fma_f64	 $d5, $d2, $d5, 0D4061350c526ae721 ;
	fma_f64	 $d5, $d2, $d5, 0D4033a6b9bd707687 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d5, $d2, $d5, 0D3fc02660e763351f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d5, $d2, $d5, 0D3fe14af092eb6f33 ;
	fma_f64	 $d5, $d2, $d5, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d5, $d2, $d5, 0D3f74d022c4d36b0f ;
	fma_f64	 $d5, $d2, $d5, 0D3fb0a54c5536ceba ;
	fma_f64	 $d5, $d2, $d5, 0D3fd97779cddadc09 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	fma_f64	 $d2, $d2, $d4, 0D3ff0000000000000 ;
	div_f64	 $d2, $d3, $d2 ;
	mov_b64	$d3, $d1 ;
	and_b64	 $d3, $d3, -4294967296 ;
	add_f64	 $d4, $d3, $d1 ;
	sub_f64	 $d5, $d3, $d1 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d4, $d4, $d2 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	cvt_near_f64_s32	$d5, $s0 ;
	fma_f64	 $d6, 0Dbf862e42fefa0000, $d5, $d4 ;
	fma_f64	 $d5, 0Dbd1cf79abc9e3b39, $d5, $d6 ;
	fma_f64	 $d6, $d5, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d6, $d5, $d6, 0D3fa5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fc5555555555555 ;
	fma_f64	 $d6, $d5, $d6, 0D3fe0000000000000 ;
	fma_f64	 $d6, $d5, $d6, 0D3ff0000000000000 ;
	mul_f64	 $d5, $d5, $d6 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d6, [$s1 + 8] ;
	ld_readonly_f64	$d7, [$s1] ;
	add_f64	 $d0, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d5, $d6 ;
	add_f64	 $d0, $d0, $d7 ;
	shr_u64	 $d5, $d0, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d5 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d3, $d3, $d3 ;
	sub_f64	 $d3, 0Dbfe2000000000000, $d3 ;
	mul_f64	 $d4, $d3, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d3 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d5, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d5 ;
	fma_f64	 $d4, $d7, $d4, $d5 ;
	add_f64	 $d4, $d4, $d6 ;
	shr_u64	 $d5, $d4, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d5, $d4, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d5, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d5, $c2, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d4, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d4, $d4, -9223372036854775808 ;
	or_b64	 $d4, $d6, $d4 ;
	or_b64	 $d4, $d4, $d5 ;
	cmp_nan_b1_f64	 $c2, $d3, $d3 ;
	cmov_b64	 $d4, $c2, $d3, $d4 ;
	cmp_gt_b1_f64	 $c2, $d3, 0D40862e42fefa39ef ;
	cmov_b64	 $d4, $c2, 0D7ff0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c2, $d3, 0Dc0874910d52d3051 ;
	cmov_b64	 $d3, $c2, 0D0000000000000000, $d4 ;
	mul_f64	 $d0, $d3, $d0 ;
	div_f64	 $d0, $d0, $d1 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D4018000000000000 ;
	cmov_b64	 $d0, $c2, $d0, 0D3ff0000000000000 ;
	add_f64	 $d3, $d2, 0D3feb0ac160000000 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cmov_b64	 $d2, $c0, 0D3fc06eba8214db69, $d2 ;
	fma_f64	 $d2, $d1, $d2, $d1 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	neg_f64	 $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d0, $d1 ;
	mul_f64	 $d1, $d2, $d2 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d1 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s2, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s2 + 8] ;
	ld_readonly_f64	$d5, [$s2] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d3, $d6, $d3, $d4 ;
	add_f64	 $d3, $d3, $d5 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s2, $d4 ;
	and_b32	 $s2, $s2, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s1, $s2, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s2 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, -2147483648, $s1 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s2 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s1 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d3, $c0, $d1, $d3 ;
	mul_f64	 $d3, $d3, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c0, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d2, $d0 ;
	brn	@BB68_14 ;
@BB68_13:
	div_f64	 $d1, 0D3ff0000000000000, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d1, $c0, $d6, $d1 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	fma_f64	 $d1, $d0, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d1, $d0, $d1, 0Dc083ec881375f228 ;
	fma_f64	 $d1, $d0, $d1, 0Dc064145d43c5ed98 ;
	fma_f64	 $d1, $d0, $d1, 0Dc031c209555f995a ;
	fma_f64	 $d1, $d0, $d1, 0Dbfe993ba70c285de ;
	fma_f64	 $d1, $d0, $d1, 0Dbf84341239e86f4a ;
	fma_f64	 $d6, $d0, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc067135cebccabb2 ;
	fma_f64	 $d6, $d0, $d6, 0Dc0644cb184282266 ;
	fma_f64	 $d6, $d0, $d6, 0Dc04f300ae4cba38d ;
	fma_f64	 $d6, $d0, $d6, 0Dc0251e0441b0e726 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d1, $c2, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d6, $d0, $d6, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d6, $d0, $d6, 0D3fd45fca805120e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d6, $d0, $d6, 0D3fda8d00ad92b34d ;
	fma_f64	 $d6, $d0, $d6, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d1, $c0, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d6, $d0, $d6, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d6, $d0, $d6, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d6, $d0, $d6, 0D3fc06eba8214db68 ;
	cmov_b64	 $d1, $c1, $d6, $d1 ;
	fma_f64	 $d6, $d0, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d6, $d0, $d6, 0D40a3f219cedf3be6 ;
	fma_f64	 $d6, $d0, $d6, 0D40a8ffb7688c246a ;
	fma_f64	 $d6, $d0, $d6, 0D409802eb189d5118 ;
	fma_f64	 $d6, $d0, $d6, 0D40745cae221b9f0a ;
	fma_f64	 $d6, $d0, $d6, 0D403e568b261d5190 ;
	fma_f64	 $d7, $d0, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d7, $d0, $d7, 0D405b28a3ee48ae2c ;
	fma_f64	 $d7, $d0, $d7, 0D407ad02157700314 ;
	fma_f64	 $d7, $d0, $d7, 0D40842b1921ec2868 ;
	fma_f64	 $d7, $d0, $d7, 0D407b290dd58a1a71 ;
	fma_f64	 $d7, $d0, $d7, 0D4061350c526ae721 ;
	fma_f64	 $d7, $d0, $d7, 0D4033a6b9bd707687 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d0, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d0, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d0, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d0, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d0, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d0, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d0, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d0, $d0, $d6, 0D3ff0000000000000 ;
	div_f64	 $d0, $d1, $d0 ;
	and_b64	 $d1, $d3, 9223372032559808512 ;
	add_f64	 $d6, $d1, $d5 ;
	sub_f64	 $d7, $d1, $d5 ;
	mul_f64	 $d6, $d7, $d6 ;
	add_f64	 $d6, $d6, $d0 ;
	mul_f64	 $d7, $d6, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d7 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d6 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d4, $d3, $d7 ;
	fma_f64	 $d2, $d4, $d2, $d7 ;
	add_f64	 $d2, $d2, $d3 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d7, $d2, 52, 11 ;
	cmov_b64	 $d4, $c3, $d7, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c2, $d6, $d6 ;
	cmov_b64	 $d2, $c2, $d6, $d2 ;
	cmp_gt_b1_f64	 $c2, $d6, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c2, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c2, $d6, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d2 ;
	st_spill_u64	$d2, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d1 ;
	sub_f64	 $d1, 0Dbfe2000000000000, $d1 ;
	mul_f64	 $d3, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d6, $d4, $d3 ;
	cvt_near_f64_s32	$d7, $s0 ;
	fma_f64	 $d2, 0Dbf862e42fefa0000, $d7, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d7, $d2 ;
	fma_f64	 $d7, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d2, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d2, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d7 ;
	fma_f64	 $d2, $d6, $d2, $d3 ;
	add_f64	 $d2, $d2, $d4 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d2, 4503599627370495 ;
	cmov_b64	 $d4, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c2, 2047, $d4 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d4, $d2 ;
	or_b64	 $d2, $d2, $d3 ;
	cmp_nan_b1_f64	 $c2, $d1, $d1 ;
	cmov_b64	 $d2, $c2, $d1, $d2 ;
	cmp_gt_b1_f64	 $c2, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c2, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c2, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c2, 0D0000000000000000, $d2 ;
	ld_spill_u64	$d2, [%stack][56] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d1, $d2 ;
	div_f64	 $d1, $d1, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d1 ;
	ld_spill_u64	$d3, [%stack][48] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][32] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d1, $c2, $d2, $d1 ;
	sub_f64	 $d2, 0D3fc3d4fa80000000, $d0 ;
	add_f64	 $d3, $d0, 0D3feb0ac160000000 ;
	add_f64	 $d3, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d2, $c2, $d3, $d2 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d0, $d5, $d0, $d3 ;
	cmov_b64	 $d0, $c1, $d0, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d2, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d2, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d0 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d6 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d0, [$s1] ;
	add_f64	 $d3, $d0, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d0, $d3, $d0 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d5, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d6, $d3 ;
	fma_f64	 $d2, $d6, $d2, $d5 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d3, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d3, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	mul_f64	 $d4, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d4 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d1 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d5, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d5 ;
	fma_f64	 $d4, $d7, $d4, $d5 ;
	add_f64	 $d4, $d4, $d6 ;
	shr_u64	 $d5, $d4, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s4, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s4, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d5, $d4, 4503599627370495 ;
	cmov_b64	 $d6, $c0, $d5, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d5, $c0, $d5, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c0, 2047, $d6 ;
	extract_u64	 $d7, $d4, 52, 11 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d4, $d4, -9223372036854775808 ;
	or_b64	 $d4, $d6, $d4 ;
	or_b64	 $d4, $d4, $d5 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d4, $c0, $d1, $d4 ;
	mul_f64	 $d4, $d4, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d4, $c0, 0D7ff0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d4 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d3, $d0 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d1, $d0, $d0 ;
	div_f64	 $d2, 0D3ff0000000000000, $d1 ;
	mov_b64	$d3, $d0 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	and_b64	 $d4, $d3, 9223372036854775807 ;
	st_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d5, $d4 ;
	add_f64	 $d6, $d5, 0Dbff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d5, 0D3ff4000000000000 ;
	cmov_b64	 $d2, $c0, $d6, $d2 ;
	cmp_lt_b1_f64	 $c1, $d5, 0D3feb000000000000 ;
	cmov_b64	 $d2, $c1, $d1, $d2 ;
	fma_f64	 $d6, $d2, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992 ;
	fma_f64	 $d6, $d2, $d6, 0Dc083ec881375f228 ;
	fma_f64	 $d6, $d2, $d6, 0Dc064145d43c5ed98 ;
	fma_f64	 $d6, $d2, $d6, 0Dc031c209555f995a ;
	fma_f64	 $d6, $d2, $d6, 0Dbfe993ba70c285de ;
	fma_f64	 $d6, $d2, $d6, 0Dbf84341239e86f4a ;
	fma_f64	 $d7, $d2, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc067135cebccabb2 ;
	fma_f64	 $d7, $d2, $d7, 0Dc0644cb184282266 ;
	fma_f64	 $d7, $d2, $d7, 0Dc04f300ae4cba38d ;
	fma_f64	 $d7, $d2, $d7, 0Dc0251e0441b0e726 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfe63416e4ba7360 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf843412600d6435 ;
	cmp_lt_b1_f64	 $c2, $d5, 0D4006db6d00000000 ;
	cmov_b64	 $d6, $c2, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbf61bf380a96073f, 0D3fa22a36599795eb ;
	fma_f64	 $d7, $d2, $d7, 0Dbfbc63983d3e28ec ;
	fma_f64	 $d7, $d2, $d7, 0D3fd45fca805120e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd7d240fbb8c3f1 ;
	fma_f64	 $d7, $d2, $d7, 0D3fda8d00ad92b34d ;
	fma_f64	 $d7, $d2, $d7, 0Dbf6359b8bef77538 ;
	cmov_b64	 $d6, $c0, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dbef8ead6120016ac, 0Dbf77a291236668e4 ;
	fma_f64	 $d7, $d2, $d7, 0Dbf9d2a51dbd7194f ;
	fma_f64	 $d7, $d2, $d7, 0Dbfd4cd7d691cb913 ;
	fma_f64	 $d7, $d2, $d7, 0D3fc06eba8214db68 ;
	cmov_b64	 $d6, $c1, $d7, $d6 ;
	fma_f64	 $d7, $d2, 0Dc03670e242712d62, 0D407da874e79fe763 ;
	fma_f64	 $d7, $d2, $d7, 0D40a3f219cedf3be6 ;
	fma_f64	 $d7, $d2, $d7, 0D40a8ffb7688c246a ;
	fma_f64	 $d7, $d2, $d7, 0D409802eb189d5118 ;
	fma_f64	 $d7, $d2, $d7, 0D40745cae221b9f0a ;
	fma_f64	 $d7, $d2, $d7, 0D403e568b261d5190 ;
	fma_f64	 $d0, $d2, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93 ;
	fma_f64	 $d0, $d2, $d0, 0D405b28a3ee48ae2c ;
	fma_f64	 $d0, $d2, $d0, 0D407ad02157700314 ;
	fma_f64	 $d0, $d2, $d0, 0D40842b1921ec2868 ;
	fma_f64	 $d0, $d2, $d0, 0D407b290dd58a1a71 ;
	fma_f64	 $d0, $d2, $d0, 0D4061350c526ae721 ;
	fma_f64	 $d0, $d2, $d0, 0D4033a6b9bd707687 ;
	cmov_b64	 $d0, $c2, $d0, $d7 ;
	fma_f64	 $d7, $d2, 0D3f888b545735151d, 0D3f8bedc26b51dd1c ;
	fma_f64	 $d7, $d2, $d7, 0D3fc02660e763351f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb2635cd99fe9a7 ;
	fma_f64	 $d7, $d2, $d7, 0D3fe14af092eb6f33 ;
	fma_f64	 $d7, $d2, $d7, 0D3fbb3e6618eee323 ;
	cmov_b64	 $d0, $c0, $d7, $d0 ;
	fma_f64	 $d7, $d2, 0Dbed09c4342a26120, 0D3f215dc9221c1a10 ;
	fma_f64	 $d7, $d2, $d7, 0D3f74d022c4d36b0f ;
	fma_f64	 $d7, $d2, $d7, 0D3fb0a54c5536ceba ;
	fma_f64	 $d7, $d2, $d7, 0D3fd97779cddadc09 ;
	cmov_b64	 $d0, $c1, $d7, $d0 ;
	fma_f64	 $d0, $d2, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, $d6, $d0 ;
	st_spill_u64	$d0, [%stack][48] ; // 8-byte Folded Reload
	and_b64	 $d2, $d3, 9223372032559808512 ;
	add_f64	 $d4, $d2, $d5 ;
	sub_f64	 $d6, $d2, $d5 ;
	mul_f64	 $d4, $d6, $d4 ;
	add_f64	 $d4, $d4, $d0 ;
	mul_f64	 $d6, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d6 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d4 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d7, [$s1 + 8] ;
	ld_readonly_f64	$d0, [$s1] ;
	add_f64	 $d3, $d0, $d7 ;
	fma_f64	 $d3, $d3, $d6, $d7 ;
	add_f64	 $d0, $d3, $d0 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d3, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d3, $c2, $d3, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d0, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d6, $d0 ;
	or_b64	 $d0, $d0, $d3 ;
	cmp_nan_b1_f64	 $c2, $d4, $d4 ;
	cmov_b64	 $d0, $c2, $d4, $d0 ;
	cmp_gt_b1_f64	 $c2, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c2, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c2, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c2, 0D0000000000000000, $d0 ;
	mul_f64	 $d2, $d2, $d2 ;
	sub_f64	 $d2, 0Dbfe2000000000000, $d2 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d3, $d2 ;
	fma_f64	 $d3, 0Dbd1cf79abc9e3b39, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d3, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d3, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d3, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d3, $d3, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d4 ;
	fma_f64	 $d3, $d7, $d3, $d4 ;
	add_f64	 $d3, $d3, $d6 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s3, $s1, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c2, $s4, $s1 ;
	cmp_lt_b1_s32	 $c3, $s0, 1 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s3, $c2, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c2, $s4, $s1 ;
	cmp_gt_b1_s32	 $c3, $s0, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmov_b32	 $s0, $c2, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c2, $s0, 2047 ;
	cmp_eq_b1_u32	 $c3, $s0, 0 ;
	or_b1	 $c2, $c3, $c2 ;
	cmp_eq_b1_u32	 $c3, $s1, 0 ;
	or_b1	 $c2, $c2, $c3 ;
	not_b1	 $c2, $c2 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d6, $c2, $d4, 0 ;
	cmp_eq_b1_u32	 $c2, $s1, 2047 ;
	cmov_b64	 $d4, $c2, $d4, $d6 ;
	cvt_u64_u32	$d6, $s0 ;
	cmov_b64	 $d6, $c2, 2047, $d6 ;
	extract_u64	 $d7, $d3, 52, 11 ;
	cmov_b64	 $d6, $c3, $d7, $d6 ;
	shl_u64	 $d6, $d6, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d6, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c2, $d2, $d2 ;
	cmov_b64	 $d3, $c2, $d2, $d3 ;
	cmp_gt_b1_f64	 $c2, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c2, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c2, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c2, 0D0000000000000000, $d3 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d0, $d0, $d5 ;
	sub_f64	 $d2, 0D4000000000000000, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c2, $d3, $d4 ;
	cmov_b64	 $d0, $c2, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, 0D3fc3d4fa80000000, $d2 ;
	add_f64	 $d5, $d2, 0D3feb0ac160000000 ;
	add_f64	 $d5, $d5, 0D3ff0000000000000 ;
	cmov_b64	 $d3, $c2, $d5, $d3 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	sub_f64	 $d5, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d6, $d3 ;
	fma_f64	 $d2, $d6, $d2, $d5 ;
	cmov_b64	 $d0, $c1, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d3, 0D403c000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	cmp_gtu_b1_f64	 $c0, $d3, 0Dc018000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D4000000000000000 ;
	cmp_gt_b1_u64	 $c0, $d4, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d0, $d2, $d0 ;
	mul_f64	 $d2, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	cvt_near_f64_s32	$d2, $s0 ;
	fma_f64	 $d4, 0Dbf862e42fefa0000, $d2, $d1 ;
	fma_f64	 $d2, 0Dbd1cf79abc9e3b39, $d2, $d4 ;
	fma_f64	 $d4, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d4, $d2, $d4, 0D3fa5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fc5555555555555 ;
	fma_f64	 $d4, $d2, $d4, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d2, $d4, 0D3ff0000000000000 ;
	mul_f64	 $d2, $d2, $d4 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d6, $d5, $d4 ;
	fma_f64	 $d2, $d6, $d2, $d4 ;
	add_f64	 $d2, $d2, $d5 ;
	shr_u64	 $d4, $d2, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s0, $s1 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d2, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d2, $d2, -9223372036854775808 ;
	or_b64	 $d2, $d5, $d2 ;
	or_b64	 $d2, $d2, $d4 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d2, $c0, $d1, $d2 ;
	mul_f64	 $d2, $d2, 0D3fec5bf891b4ef6b ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d2, $c0, 0D7ff0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d1, $c0, 0D0000000000000000, $d2 ;
	mul_f64	 $d0, $d1, $d0 ;
	sub_f64	 $d0, $d3, $d0 ;
@BB68_14:                               // %erfinv.exit
	ld_spill_u64	$d2, [%stack][40] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d1, $d2 ;
	neg_f64	 $d1, $d0 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D3ff0000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d0 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	cmp_eq_b1_f64	 $c0, $d2, 0Dbff0000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	cmp_gt_b1_f64	 $c0, $d2, 0D3ff0000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	cmp_lt_b1_f64	 $c0, $d2, 0Dbff0000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff8000000000000, $d0 ;
	class_f64	 $c0, $d2, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cmp_lt_b1_f32	 $c0, $s0, 0F00000000 ;
	cmov_b32	 $s1, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s1, $s0, 0F3fb8aa3b, $s1 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	cvt_near_f32_s32	$s2, $s1 ;
	mad_f32	 $s3, $s2, 0Fbf317180, $s0 ;
	mul_f32	 $s2, $s2, 0Fb717f7d1 ;
	add_f32	 $s4, $s3, $s2 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s6, $s5, $s6, 0F388ab355 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3e2aaaab ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s5, $s5, $s6, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s5, 0F40000000, $s5 ;
	div_f32	 $s4, $s4, $s5 ;
	neg_f32	 $s2, $s2 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s2, $s2, $s3 ;
	sub_f32	 $s2, 0F3f800000, $s2 ;
	shl_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2aeac4f ;
	cmov_b32	 $s1, $c0, 0F00000000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F42b17218 ;
	cmov_b32	 $s1, $c0, $s1, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pexp_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mul_f64	 $d1, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d1, [$s1 + 8] ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d3, $d2, $d1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d0 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d1, $d3, $d4, $d1 ;
	add_f64	 $d1, $d1, $d2 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e42fefa39ef ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pexp2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_neari_f32_f32	 $s1, $s0 ;
	sub_f32	 $s2, $s0, $s1 ;
	mul_f32	 $s3, $s2, 0F3717f7d1 ;
	mul_f32	 $s2, $s2, 0F3f317180 ;
	add_f32	 $s4, $s2, $s3 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s6, $s5, $s6, 0F388ab355 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s6, $s5, $s6, 0F3e2aaaab ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s5, $s5, $s6, $s4 ;
	mul_f32	 $s4, $s4, $s5 ;
	sub_f32	 $s5, 0F40000000, $s5 ;
	div_f32	 $s4, $s4, $s5 ;
	neg_f32	 $s3, $s3 ;
	sub_f32	 $s3, $s3, $s4 ;
	sub_f32	 $s2, $s3, $s2 ;
	sub_f32	 $s2, 0F3f800000, $s2 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	shl_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2fc0000 ;
	cmov_b32	 $s1, $c0, 0F00000000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0F43000000 ;
	cmov_b32	 $s1, $c0, $s1, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp2_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pexp2_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mul_f64	 $d1, $d0, 0D4050000000000000 ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d1, [$s1 + 8] ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d3, $d2, $d1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d4, 0Dbf90000000000000, $d4, $d0 ;
	mul_f64	 $d4, $d4, 0D3fe62e42fefa39ef ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d1, $d3, $d4, $d1 ;
	add_f64	 $d1, $d1, $d2 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D4090000000000000 ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc090c80000000000 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp10_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pexp10_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mul_f32	 $s1, $s0, 0F43549a78 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	cvt_near_f32_s32	$s2, $s1 ;
	mad_f32	 $s3, $s2, 0Fbb9a0000, $s0 ;
	mad_f32	 $s2, $s2, 0Fb6826a13, $s3 ;
	mul_f32	 $s2, $s2, 0F40135d8e ;
	mad_f32	 $s3, $s2, 0F3d2aaaab, 0F3e2aaaab ;
	mad_f32	 $s3, $s3, $s2, 0F3f000000 ;
	mul_f32	 $s4, $s2, $s2 ;
	mad_f32	 $s2, $s3, $s4, $s2 ;
	and_b32	 $s3, $s1, 63 ;
	shl_u32	 $s3, $s3, 2 ;
	//ldas_global_u32	$s4, [&__math32_EXP_TBL] ;
	add_u32	 $s3, $s4, $s3 ;
	ld_readonly_f32	$s3, [$s3] ;
	mad_f32	 $s2, $s3, $s2, $s3 ;
	shr_s32	 $s3, $s1, 6 ;
	add_u32	 $s4, $s3, 21 ;
	shl_u32	 $s4, 1, $s4 ;
	mul_f32	 $s4, $s2, $s4 ;
	shl_u32	 $s1, $s1, 17 ;
	and_b32	 $s1, $s1, -8388608 ;
	add_u32	 $s1, $s2, $s1 ;
	cmp_lt_b1_s32	 $c0, $s3, -125 ;
	cmov_b32	 $s1, $c0, $s4, $s1 ;
	cmp_nan_b1_f32	 $c0, $s0, $s0 ;
	cmov_b32	 $s1, $c0, $s0, $s1 ;
	cmp_gt_b1_f32	 $c0, $s0, 0F421a209a ;
	cmov_b32	 $s1, $c0, 0F7f800000, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc23369f4 ;
	cmov_b32	 $s0, $c0, 0F00000000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexp10_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pexp10_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mul_f64	 $d1, $d0, 0D406a934f0979a371 ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d1, [$s1 + 8] ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d3, $d2, $d1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf73441350000000, $d4, $d0 ;
	fma_f64	 $d4, 0Dbda3ef3fde623e25, $d4, $d5 ;
	mul_f64	 $d4, $d4, 0D40026bb1bbb55516 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d1, $d3, $d4, $d1 ;
	add_f64	 $d1, $d1, $d2 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d1, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d1, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d3, $d1 ;
	or_b64	 $d1, $d1, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d0 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40734413509f79ff ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc07434e6420f4374 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexpm1_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pexpm1_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mul_f32	 $s1, $s0, 0F42b8aa3b ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	cvt_near_f32_s32	$s2, $s1 ;
	mad_f32	 $s3, $s2, 0Fbc310000, $s0 ;
	mad_f32	 $s2, $s2, 0Fb7e42fef, $s3 ;
	mad_f32	 $s3, $s2, 0F3d2aaaab, 0F3e2aaaab ;
	mad_f32	 $s3, $s2, $s3, 0F3f000000 ;
	mul_f32	 $s4, $s2, $s2 ;
	mad_f32	 $s2, $s4, $s3, $s2 ;
	and_b32	 $s3, $s1, 63 ;
	shl_u32	 $s3, $s3, 3 ;
	//ldas_global_u32	$s4, [&__math32_EXP_TBL_EP] ;
	add_u32	 $s3, $s4, $s3 ;
	ld_readonly_f32	$s4, [$s3 + 4] ;
	shl_u32	 $s5, $s1, 17 ;
	add_u32	 $s5, $s5, 1065353216 ;
	and_b32	 $s5, $s5, -8388608 ;
	mul_f32	 $s4, $s4, $s5 ;
	ld_readonly_f32	$s3, [$s3] ;
	mul_f32	 $s3, $s3, $s5 ;
	add_f32	 $s5, $s3, $s4 ;
	mad_f32	 $s2, $s2, $s5, $s4 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	add_f32	 $s2, $s2, $s3 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fc2ce8ed0 ;
	shr_s32	 $s1, $s1, 6 ;
	cmp_lt_b1_s32	 $c1, $s1, -24 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s1, $c0, 0Fbf800000, $s2 ;
	cmp_gt_b1_f32	 $c0, $s0, 0F42b17217 ;
	cmov_b32	 $s1, $c0, 0F7f800000, $s1 ;
	mov_b32	$s2, $s0 ;
	and_b32	 $s2, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pexpm1_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[4];
@__amd_amp_Pexpm1_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	and_b64	 $d1, $d1, -16777216 ;
	add_f64	 $d2, $d1, $d0 ;
	sub_f64	 $d3, $d0, $d1 ;
	mul_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d2, $d2, 0D3fe0000000000000 ;
	add_f64	 $d3, $d3, $d2 ;
	mul_f64	 $d4, $d0, $d0 ;
	mul_f64	 $d4, $d4, $d0 ;
	fma_f64	 $d5, $d0, 0D3e5a2836aa646b96, 0D3e928295484734ea ;
	fma_f64	 $d5, $d0, $d5, 0D3ec71e14bfe3db59 ;
	fma_f64	 $d5, $d0, $d5, 0D3efa019f635825c4 ;
	fma_f64	 $d5, $d0, $d5, 0D3f2a01a01159dd2d ;
	fma_f64	 $d5, $d0, $d5, 0D3f56c16c16ce14c6 ;
	fma_f64	 $d5, $d0, $d5, 0D3f8111111111a9f3 ;
	fma_f64	 $d5, $d0, $d5, 0D3fa55555555554b6 ;
	fma_f64	 $d5, $d0, $d5, 0D3fc5555555555549 ;
	mul_f64	 $d4, $d5, $d4 ;
	add_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d5, $d1, $d1 ;
	mul_f64	 $d5, $d5, 0D3fe0000000000000 ;
	add_f64	 $d1, $d1, $d5 ;
	add_f64	 $d1, $d1, $d3 ;
	add_f64	 $d2, $d4, $d2 ;
	add_f64	 $d2, $d5, $d2 ;
	add_f64	 $d2, $d2, $d0 ;
	cmp_ltu_b1_f64	 $c0, $d5, 0D3f80000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	st_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d0, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d2 ;
	neg_s32	 $s1, $s0 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, $d2, 0D3f862e42fefa0000, $d0 ;
	fma_f64	 $d2, $d2, 0D3d1cf79abc9e3b39, $d3 ;
	fma_f64	 $d3, $d2, 0D3f56c1728d739765, 0D3f811115b7aa905e ;
	fma_f64	 $d3, $d2, $d3, 0D3fa5555555545d4e ;
	fma_f64	 $d3, $d2, $d3, 0D3fc5555555548f7c ;
	fma_f64	 $d3, $d2, $d3, 0D3fe0000000000000 ;
	mul_f64	 $d4, $d2, $d2 ;
	fma_f64	 $d2, $d4, $d3, $d2 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d1, $d4, $d3 ;
	st_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d5, $d1, $d2 ;
	add_f64	 $d5, $d5, $d3 ;
	add_f64	 $d5, $d4, $d5 ;
	mul_f64	 $d5, $d5, 0D7fe0000000000000 ;
	and_b64	 $d6, $d5, 4503599627370495 ;
	shr_u64	 $d5, $d5, 52 ;
	cvt_u32_u64	$s1, $d5 ;
	add_u32	 $s1, $s1, 1 ;
	cvt_u64_u32	$d5, $s1 ;
	shl_u64	 $d5, $d5, 52 ;
	or_b64	 $d5, $d5, $d6 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d5, $c0, 0D7ff0000000000000, $d5 ;
	shr_s32	 $s0, $s0, 6 ;
	sub_u32	 $s1, 1023, $s0 ;
	cvt_u64_u32	$d6, $s1 ;
	shl_u64	 $d6, $d6, 52 ;
	sub_f64	 $d7, $d3, $d6 ;
	fma_f64	 $d7, $d1, $d2, $d7 ;
	add_f64	 $d7, $d4, $d7 ;
	add_u32	 $s1, $s0, 1023 ;
	cvt_u64_u32	$d1, $s1 ;
	shl_u64	 $d1, $d1, 52 ;
	mul_f64	 $d7, $d1, $d7 ;
	cmp_eq_b1_u32	 $c0, $s0, 1024 ;
	cmov_b64	 $d5, $c0, $d5, $d7 ;
	add_f64	 $d7, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d7, $d3, $d7 ;
	fma_f64	 $d7, $d4, $d2, $d7 ;
	sub_f64	 $d6, $d4, $d6 ;
	add_f64	 $d6, $d6, $d7 ;
	mul_f64	 $d6, $d1, $d6 ;
	cmp_lt_b1_s32	 $c0, $s0, 53 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	ld_spill_u64	$d6, [%stack][8] ; // 8-byte Folded Reload
	fma_f64	 $d2, $d6, $d2, $d3 ;
	add_f64	 $d2, $d4, $d2 ;
	fma_f64	 $d1, $d1, $d2, 0Dbff0000000000000 ;
	cmp_lt_b1_s32	 $c0, $s0, -7 ;
	cmov_b64	 $d1, $c0, $d1, $d5 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D3fcc8ff7c79a9a22 ;
	cmp_gt_b1_f64	 $c1, $d0, 0Dbfd269621134db93 ;
	and_b1	 $c0, $c1, $c0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D40862e6666666666 ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dc042b708872320e1 ;
	cmov_b64	 $d0, $c0, 0Dbff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfabs_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pfabs_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	abs_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfabs_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pfabs_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d0, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfdim_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pfdim_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	sub_f32	 $s2, $s1, $s0 ;
	cmp_gt_b1_f32	 $c0, $s1, $s0 ;
	cmov_b32	 $s3, $c0, -1, 0 ;
	and_b32	 $s2, $s3, $s2 ;
	cmp_nan_b1_f32	 $c0, $s1, $s0 ;
	cmov_b32	 $s0, $c0, -1, 0 ;
	and_b32	 $s0, $s0, 2143289344 ;
	or_b32	 $s0, $s0, $s2 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfdim_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pfdim_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	ld_arg_f64	$d1, [%arg_val0] ;
	sub_f64	 $d2, $d1, $d0 ;
	cmp_gt_b1_f64	 $c0, $d1, $d0 ;
	cmov_b64	 $d3, $c0, -1, 0 ;
	and_b64	 $d2, $d3, $d2 ;
	cmp_nan_b1_f64	 $c0, $d1, $d0 ;
	cmov_b64	 $d0, $c0, -1, 0 ;
	and_b64	 $d0, $d0, 9221120237041090560 ;
	or_b64	 $d0, $d0, $d2 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfloor_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pfloor_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_downi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfloor_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pfloor_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	cvt_downi_f64_f64	 $d0, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfma_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1, 
	arg_f32 %arg_val2)
{
@__amd_amp_Pfma_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val2] ;
	ld_arg_f32	$s1, [%arg_val1] ;
	ld_arg_f32	$s2, [%arg_val0] ;
	fma_f32	 $s0, $s2, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfma_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1, 
	arg_f64 %arg_val2)
{
@__amd_amp_Pfma_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val2] ;
	ld_arg_f64	$d1, [%arg_val1] ;
	ld_arg_f64	$d2, [%arg_val0] ;
	fma_f64	 $d0, $d2, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmax_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pfmax_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	max_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmax_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pfmax_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	ld_arg_f64	$d1, [%arg_val0] ;
	max_f64	 $d0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pfmin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	ld_arg_f32	$s1, [%arg_val0] ;
	min_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmin_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pfmin_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	ld_arg_f64	$d1, [%arg_val0] ;
	min_f64	 $d0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmod_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pfmod_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	and_b32	 $s1, $s0, 2147483647 ;
	shr_u32	 $s2, $s1, 23 ;
	ld_arg_f32	$s3, [%arg_val0] ;
	add_ftz_f32	$s3, $s3, 0F00000000 ;
	and_b32	 $s4, $s3, 2147483647 ;
	shr_u32	 $s5, $s4, 23 ;
	sub_u32	 $s6, $s5, $s2 ;
	cmp_le_b1_s32	 $c0, $s6, 3 ;
	and_b32	 $s7, $s0, 8388607 ;
	or_b32	 $s7, $s7, 1065353216 ;
	and_b32	 $s8, $s3, 8388607 ;
	or_b32	 $s8, $s8, 1065353216 ;
	cbr	$c0, @BB89_2 ;
@BB89_1:                                // %.preheader1
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -4 ;
	cmp_gt_b1_s32	 $c0, $s6, 3 ;
	cbr	$c0, @BB89_1 ;
@BB89_2:                                // %.loopexit
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	cmp_le_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB89_4 ;
@BB89_3:                                // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_u32	 $s6, $s6, -1 ;
	cmp_gt_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB89_3 ;
@BB89_4:                                // %__fmod_f32.exit
	mov_b32	$s6, $s4 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cmov_b32	 $s2, $c0, $s6, $s8 ;
	and_b32	 $s0, $s0, 2139095040 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s0 ;
	mul_f32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s4, $s1 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	xor_b32	 $s2, $s4, $s3 ;
	xor_b32	 $s0, $s2, $s0 ;
	cmp_lt_b1_u32	 $c0, $s4, 2139095040 ;
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_lt_b1_u32	 $c1, $s1, 2139095041 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfmod_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
	spill_u32 %stack[8];
@__amd_amp_Pfmod_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	cvt_u32_u64	$s0, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	add_u32	 $s0, $s0, 32 ;
	cmov_b32	 $s0, $c0, 64, $s0 ;
	shr_u64	 $d1, $d0, 32 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 1048575 ;
	firstbit_b32	 $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s1, $c0, 32, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 32 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	sub_u32	 $s0, 11, $s0 ;
	and_b64	 $d1, $d0, 9223372036854775807 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	ld_arg_f64	$d2, [%arg_val0] ;
	st_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	st_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cvt_u32_u64	$s2, $d2 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	firstbit_b32	 $s2, $s2 ;
	add_u32	 $s2, $s2, 32 ;
	cmov_b32	 $s2, $c0, 64, $s2 ;
	shr_u64	 $d3, $d2, 32 ;
	cvt_u32_u64	$s3, $d3 ;
	and_b32	 $s3, $s3, 1048575 ;
	firstbit_b32	 $s4, $s3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, 32, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 32 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s2, 11, $s2 ;
	and_b64	 $d2, $d2, 9223372036854775807 ;
	st_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s3, $d3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s0, $s2, $s0 ;
	cvt_s64_s32	$d3, $s0 ;
	mul_u64	 $d3, $d3, 1296593901 ;
	shr_u64	 $d4, $d3, 63 ;
	cvt_u32_u64	$s0, $d4 ;
	shr_u64	 $d3, $d3, 32 ;
	cvt_u32_u64	$s2, $d3 ;
	shr_s32	 $s2, $s2, 4 ;
	add_u32	 $s0, $s2, $s0 ;
	max_s32	 $s0, 0, $s0 ;
	mul_u32	 $s2, $s0, 53 ;
	shr_s32	 $s4, $s2, 1 ;
	sub_u32	 $s5, 2147483647, $s4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s6, $d3 ;
	and_b32	 $s6, $s6, 2047 ;
	cmp_lt_b1_s32	 $c0, $s5, $s6 ;
	cmp_gt_b1_s32	 $c1, $s4, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	sub_u32	 $s5, -2147483648, $s4 ;
	cmp_gt_b1_s32	 $c1, $s5, $s6 ;
	cmp_lt_b1_s32	 $c2, $s4, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	add_u32	 $s5, $s4, $s6 ;
	cmov_b32	 $s5, $c1, -2147483648, $s5 ;
	cmov_b32	 $s5, $c0, 2147483647, $s5 ;
	max_s32	 $s5, $s5, 0 ;
	min_s32	 $s5, $s5, 2047 ;
	cvt_u64_u32	$d3, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 2047 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d0, 52, 11 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cvt_u32_u64	$s7, $d3 ;
	and_b32	 $s7, $s7, 2047 ;
	sub_u32	 $s2, $s2, $s4 ;
	add_u32	 $s4, $s7, $s2 ;
	sub_u32	 $s8, -2147483648, $s2 ;
	cmp_gt_b1_s32	 $c1, $s8, $s7 ;
	cmp_lt_b1_s32	 $c2, $s2, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s4, $c1, -2147483648, $s4 ;
	sub_u32	 $s8, 2147483647, $s2 ;
	cmp_lt_b1_s32	 $c1, $s8, $s7 ;
	cmp_gt_b1_s32	 $c2, $s2, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, 2147483647, $s4 ;
	max_s32	 $s2, $s2, 0 ;
	min_s32	 $s2, $s2, 2047 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmp_eq_b1_u32	 $c2, $s2, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s7, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	cmp_ne_b1_u32	 $c3, $s5, 2047 ;
	cmp_ne_b1_u32	 $c4, $s6, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	cmp_ne_b1_u32	 $c4, $s5, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	and_b64	 $d0, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d0, 0 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cmov_b64	 $d4, $c1, $d0, 0 ;
	cmp_eq_b1_u32	 $c0, $s7, 2047 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cvt_u64_u32	$d4, $s2 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	and_b64	 $d5, $d3, 2047 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d4, $d3 ;
	or_b64	 $d0, $d3, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	div_f64	 $d3, $d2, $d0 ;
	cmp_ge_b1_s32	 $c1, $s0, 1 ;
	cbr	$c1, @BB90_2 ;
// BB#1:
	mov_b64	$d4, $d2 ;
	brn	@BB90_4 ;
@BB90_2:
	cmov_b64	 $d5, $c0, 0D3ff0000000000000, 0D3ca0000000000000 ;
	mov_b32	$s2, 0 ;
	mov_b64	$d4, $d2 ;
@BB90_3:                                // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	cvt_zeroi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d6, $d0, $d3 ;
	sub_f64	 $d7, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d7 ;
	sub_f64	 $d4, $d4, $d6 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d3, $d0, $d3, $d6 ;
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d3, $d7, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D0000000000000000 ;
	cmov_b64	 $d4, $c0, $d0, 0D0000000000000000 ;
	add_f64	 $d4, $d3, $d4 ;
	mul_f64	 $d0, $d0, $d5 ;
	div_f64	 $d3, $d4, $d0 ;
	add_u32	 $s2, $s2, 1 ;
	cmp_lt_b1_s32	 $c0, $s2, $s0 ;
	cbr	$c0, @BB90_3 ;
@BB90_4:                                // %__fmod_f64.exit
	cvt_downi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d5, $d0, $d3 ;
	sub_f64	 $d6, $d4, $d5 ;
	sub_f64	 $d4, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d5 ;
	neg_f64	 $d5, $d5 ;
	fma_f64	 $d3, $d0, $d3, $d5 ;
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d3, $d6, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	add_f64	 $d0, $d3, $d0 ;
	cmp_eq_b1_f64	 $c0, $d2, $d1 ;
	cmov_b64	 $d0, $c0, 0, $d0 ;
	ld_spill_u64	$d4, [%stack][24] ; // 8-byte Folded Reload
	ld_spill_u64	$d3, [%stack][16] ; // 8-byte Folded Reload
	xor_b64	 $d3, $d3, $d4 ;
	xor_b64	 $d0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d2, $d1 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	cmp_num_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cmp_eq_b1_u32	 $c0, $s3, 2047 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfpclassify_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pfpclassify_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 1 ;
	class_f32	 $c1, $s0, 2 ;
	cvt_u32_b1	$s1, $c1 ;
	shl_u32	 $s1, $s1, 1 ;
	cvt_u32_b1	$s2, $c0 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 4 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 2 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 8 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 3 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 16 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 4 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 32 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 5 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 64 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 6 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 128 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 7 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 256 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 8 ;
	or_b32	 $s1, $s1, $s2 ;
	class_f32	 $c0, $s0, 512 ;
	cvt_u32_b1	$s0, $c0 ;
	shl_u32	 $s0, $s0, 9 ;
	or_b32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfpclassify_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pfpclassify_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	class_f64	 $c0, $d0, 1 ;
	class_f64	 $c1, $d0, 2 ;
	cvt_u32_b1	$s0, $c1 ;
	shl_u32	 $s0, $s0, 1 ;
	cvt_u32_b1	$s1, $c0 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 4 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 2 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 8 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 3 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 16 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 4 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 32 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 5 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 64 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 6 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 128 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 7 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 256 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 8 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 512 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 9 ;
	or_b32	 $s0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfrexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Pfrexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s2, 8388608 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -152, -126 ;
	or_b32	 $s4, $s2, 226492416 ;
	add_f32	 $s4, $s4, 0F8d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	shr_s32	 $s4, $s2, 23 ;
	add_u32	 $s3, $s4, $s3 ;
	cmp_ne_b1_u32	 $c0, $s3, 129 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s3, $c0, $s3, 0 ;
	ld_arg_u32	$s4, [%arg_val1] ;
	st_global_u32	$s3, [$s4] ;
	and_b32	 $s2, $s2, 8388607 ;
	and_b32	 $s1, $s1, -2147483648 ;
	or_b32	 $s1, $s1, $s2 ;
	or_b32	 $s1, $s1, 1056964608 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pfrexp_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Pfrexp_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	and_b64	 $d2, $d1, 9223372036854775807 ;
	cmp_lt_b1_u64	 $c0, $d2, 4503599627370496 ;
	cmp_ne_b1_u64	 $c1, $d2, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, -1076, -1022 ;
	or_b64	 $d3, $d2, 247697979505377280 ;
	add_f64	 $d3, $d3, 0D8370000000000000 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	shr_s64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	add_u32	 $s0, $s1, $s0 ;
	cmp_ne_b1_u32	 $c0, $s0, 1025 ;
	cmp_ne_b1_u64	 $c1, $d2, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s0, $c0, $s0, 0 ;
	ld_arg_u32	$s1, [%arg_val1] ;
	st_global_u32	$s0, [$s1] ;
	and_b64	 $d2, $d2, 4503599627370495 ;
	and_b64	 $d1, $d1, -9223372036854775808 ;
	or_b64	 $d1, $d1, $d2 ;
	or_b64	 $d1, $d1, 4602678819172646912 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Phypot_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Phypot_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	and_b32	 $s0, $s0, 2147483647 ;
	ld_arg_f32	$s1, [%arg_val0] ;
	and_b32	 $s1, $s1, 2147483647 ;
	max_u32	 $s2, $s1, $s0 ;
	mov_b32	$s3, $s2 ;
	shr_u32	 $s4, $s2, 23 ;
	add_u32	 $s4, $s4, -127 ;
	max_s32	 $s4, $s4, -126 ;
	min_s32	 $s4, $s4, 126 ;
	sub_u32	 $s5, 127, $s4 ;
	shl_u32	 $s5, $s5, 23 ;
	mul_f32	 $s6, $s3, $s5 ;
	min_u32	 $s0, $s1, $s0 ;
	mov_b32	$s1, $s0 ;
	mul_f32	 $s1, $s1, $s5 ;
	mul_f32	 $s1, $s1, $s1 ;
	mad_f32	 $s1, $s6, $s6, $s1 ;
	sqrt_f32	 $s1, $s1 ;
	shl_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, 1065353216 ;
	mul_f32	 $s1, $s1, $s4 ;
	cmp_ne_b1_u32	 $c0, $s0, 0 ;
	cmp_lt_b1_u32	 $c1, $s2, 2139095041 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmp_ne_b1_u32	 $c0, $s0, 2139095040 ;
	cmp_ne_b1_u32	 $c1, $s2, 2139095040 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, $s1, 0F7f800000 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Phypot_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Phypot_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	and_b64	 $d0, $d0, 9223372036854775807 ;
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s0, $d1 ;
	cmp_gt_b1_u32	 $c0, $s0, 522 ;
	ld_arg_f64	$d1, [%arg_val1] ;
	and_b64	 $d1, $d1, 9223372036854775807 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	cmp_gt_b1_u32	 $c1, $s1, 522 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_lt_b1_u32	 $c1, $s0, 1524 ;
	cmp_lt_b1_u32	 $c2, $s1, 1524 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b64	 $d2, $c1, 0D3ff0000000000000, 0D1a70000000000000 ;
	cmov_b64	 $d2, $c0, $d2, 0D6570000000000000 ;
	mul_f64	 $d3, $d0, $d2 ;
	mul_f64	 $d2, $d1, $d2 ;
	mul_f64	 $d2, $d2, $d2 ;
	fma_f64	 $d2, $d3, $d3, $d2 ;
	sqrt_f64	 $d2, $d2 ;
	cmov_b64	 $d3, $c1, 0D3ff0000000000000, 0D6570000000000000 ;
	cmov_b64	 $d3, $c0, $d3, 0D1a70000000000000 ;
	mul_f64	 $d2, $d2, $d3 ;
	sub_u32	 $s0, $s0, $s1 ;
	shr_s32	 $s1, $s0, 31 ;
	add_u32	 $s0, $s1, $s0 ;
	xor_b32	 $s0, $s0, $s1 ;
	cmp_gt_b1_u32	 $c0, $s0, 54 ;
	add_f64	 $d3, $d0, $d1 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	cmp_nan_b1_f64	 $c0, $d0, $d1 ;
	cmov_b64	 $d2, $c0, 0D7ff8000000000000, $d2 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D7ff0000000000000 ;
	cmp_eq_b1_f64	 $c1, $d0, 0D7ff0000000000000 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d2 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pilogb_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pilogb_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, 2147483647 ;
	cmp_ne_b1_u32	 $c0, $s1, 0 ;
	cmp_lt_b1_u32	 $c1, $s1, 2139095041 ;
	and_b1	 $c0, $c1, $c0 ;
	and_b32	 $s0, $s0, 8388607 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	sub_u32	 $s0, -118, $s0 ;
	cmov_b32	 $s0, $c1, -150, $s0 ;
	cmp_lt_b1_u32	 $c1, $s1, 8388608 ;
	shr_u32	 $s2, $s1, 23 ;
	add_u32	 $s2, $s2, -127 ;
	cmov_b32	 $s0, $c1, $s0, $s2 ;
	cvt_near_f32_s32	$s0, $s0 ;
	cmov_b32	 $s0, $c0, $s0, 0Fcf000000 ;
	cmp_eq_b1_u32	 $c0, $s1, 2139095040 ;
	cmov_b32	 $s0, $c0, 0F4f000000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pilogb_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pilogb_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	cvt_u32_u64	$s0, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	add_u32	 $s0, $s0, 32 ;
	cmov_b32	 $s0, $c0, 64, $s0 ;
	shr_u64	 $d1, $d0, 32 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 1048575 ;
	firstbit_b32	 $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s1, $c0, 32, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 32 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	sub_u32	 $s0, -1011, $s0 ;
	and_b64	 $d0, $d0, 9223372036854775807 ;
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	add_u32	 $s1, $s1, -1023 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	cmp_ne_b1_u64	 $c0, $d0, 0 ;
	cmp_lt_b1_u64	 $c1, $d0, 9218868437227405313 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0Dc1e0000000000000 ;
	cmp_eq_b1_u64	 $c0, $d0, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, 0D41dfffffffc00000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisfinite_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pisfinite_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 504 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisfinite_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pisfinite_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	class_f64	 $c0, $d0, 504 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisinf_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pisinf_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisinf_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pisinf_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisnan_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pisnan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisnan_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pisnan_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisnormal_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pisnormal_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	class_f32	 $c0, $s0, 264 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pisnormal_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pisnormal_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	class_f64	 $c0, $d0, 264 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pldexp_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pldexp_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	cvt_zeroi_s32_f32	$s0, $s0 ;
	ld_arg_f32	$s1, [%arg_val0] ;
	extract_u32	 $s2, $s1, 23, 8 ;
	add_u32	 $s3, $s2, $s0 ;
	sub_u32	 $s4, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s4, $s2 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s3, $c0, -2147483648, $s3 ;
	sub_u32	 $s4, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s4, $s2 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s3 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 255 ;
	cmp_ne_b1_u32	 $c0, $s0, 255 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmp_ne_b1_u32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	and_b32	 $s3, $s1, 8388607 ;
	cmov_b32	 $s4, $c0, $s3, 0 ;
	cmp_eq_b1_u32	 $c0, $s2, 255 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	shl_u32	 $s0, $s0, 23 ;
	cmov_b32	 $s0, $c0, 2139095040, $s0 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	and_b32	 $s1, $s1, -2147483648 ;
	or_b32	 $s0, $s0, $s1 ;
	or_b32	 $s0, $s0, $s3 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pldexp_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pldexp_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	cvt_zeroi_s32_f64	$s0, $d0 ;
	ld_arg_f64	$d0, [%arg_val0] ;
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_ne_b1_u32	 $c0, $s0, 2047 ;
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	cmp_ne_b1_u32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c0, $c1 ;
	and_b64	 $d1, $d0, 4503599627370495 ;
	cmov_b64	 $d2, $c0, $d1, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d1, $c0, $d1, $d2 ;
	cvt_u64_u32	$d2, $s0 ;
	cmov_b64	 $d2, $c0, 2047, $d2 ;
	extract_u64	 $d3, $d0, 52, 11 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	shl_u64	 $d2, $d2, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d2, $d0 ;
	or_b64	 $d0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plgamma_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plgamma_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095039 ;
	cbr	$c0, @BB109_18 ;
// BB#1:
	mov_b32	$s3, $s2 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F1c800000 ;
	cbr	$c0, @BB109_19 ;
// BB#2:
	cmp_eq_b1_f32	 $c0, $s3, 0F40000000 ;
	cmp_eq_b1_f32	 $c1, $s3, 0F3f800000 ;
	or_b1	 $c0, $c1, $c0 ;
	mov_b32	$s4, 0F00000000 ;
	not_b1	 $c0, $c0 ;
	cbr	$c0, @BB109_5 ;
@BB109_3:
	cmp_lt_b1_f32	 $c0, $s0, 0F00000000 ;
	cbr	$c0, @BB109_17 ;
// BB#4:
	mov_b32	$s0, $s4 ;
	brn	@BB109_18 ;
@BB109_5:
	cmp_geu_b1_f32	 $c0, $s3, 0F40000000 ;
	cbr	$c0, @BB109_12 ;
// BB#6:
	shr_u32	 $s4, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s5, $s2, 1065353216 ;
	add_f32	 $s5, $s5, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s5, $s2 ;
	and_b32	 $s7, $s6, 8323072 ;
	shl_u32	 $s8, $s6, 1 ;
	and_b32	 $s8, $s8, 65536 ;
	add_u32	 $s7, $s8, $s7 ;
	or_b32	 $s8, $s7, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s8, $s6 ;
	shr_u32	 $s8, $s7, 14 ;
	//ldas_global_u32	$s9, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s8, [$s8] ;
	mul_f32	 $s6, $s6, $s8 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s5, -253 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s5, $s4, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s7, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	add_f32	 $s5, $s5, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s6 ;
	add_f32	 $s4, $s4, $s5 ;
	add_f32	 $s5, $s3, 0Fbf800000 ;
	add_f32	 $s6, $s5, 0F40000000 ;
	div_f32	 $s6, $s5, $s6 ;
	add_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s7, $s7 ;
	mad_f32	 $s9, $s8, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	mul_f32	 $s6, $s6, $s5 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	add_f32	 $s6, $s6, $s5 ;
	abs_f32	 $s7, $s5 ;
	cmp_lt_b1_f32	 $c0, $s7, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s4 ;
	neg_f32	 $s2, $s2 ;
	cmp_le_b1_f32	 $c0, $s3, 0F3f666666 ;
	cmov_b32	 $s4, $c0, $s2, 0F00000000 ;
	sub_f32	 $s2, 0F40000000, $s3 ;
	add_f32	 $s6, $s3, 0Fbfbb16c3 ;
	cmp_lt_b1_f32	 $c1, $s3, 0F3fdda618 ;
	cmov_b32	 $s2, $c1, $s6, $s2 ;
	cmp_lt_b1_f32	 $c2, $s3, 0F3f9da620 ;
	cmov_b32	 $s2, $c2, $s5, $s2 ;
	sub_f32	 $s5, 0F3f800000, $s3 ;
	cmov_b32	 $s2, $c0, $s5, $s2 ;
	add_f32	 $s5, $s3, 0Fbeec5b0c ;
	cmp_lt_b1_f32	 $c3, $s3, 0F3f3b4a20 ;
	cmov_b32	 $s2, $c3, $s5, $s2 ;
	cmp_lt_b1_f32	 $c4, $s3, 0F3e6d3308 ;
	cmov_b32	 $s2, $c4, $s3, $s2 ;
	cvt_u32_b1	$s3, $c1 ;
	cmov_b32	 $s3, $c2, 2, $s3 ;
	cmov_b32	 $s3, $c0, 0, $s3 ;
	cmov_b32	 $s3, $c3, 1, $s3 ;
	cmov_b32	 $s3, $c4, 2, $s3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cbr	$c0, @BB109_10 ;
// BB#7:
	cmp_eq_b1_u32	 $c0, $s3, 1 ;
	cbr	$c0, @BB109_11 ;
// BB#8:
	cmp_ne_b1_u32	 $c0, $s3, 2 ;
	cbr	$c0, @BB109_3 ;
// BB#9:
	mad_f32	 $s3, $s2, 0F3b52d5db, 0F3dd572af ;
	mad_f32	 $s3, $s2, $s3, 0F3f44efdf ;
	mad_f32	 $s3, $s2, $s3, 0F4008392d ;
	mad_f32	 $s3, $s2, $s3, 0F401d2ebe ;
	mad_f32	 $s3, $s2, $s3, 0F3f800000 ;
	mad_f32	 $s5, $s2, 0F3c5b3c5e, 0F3e6a7578 ;
	mad_f32	 $s5, $s2, $s5, 0F3f7a4bb2 ;
	mad_f32	 $s5, $s2, $s5, 0F3fba3ae7 ;
	mad_f32	 $s5, $s2, $s5, 0F3f2200f4 ;
	mad_f32	 $s5, $s2, $s5, 0Fbd9e233f ;
	mul_f32	 $s5, $s2, $s5 ;
	div_f32	 $s3, $s5, $s3 ;
	mad_f32	 $s2, $s2, 0Fbf000000, $s3 ;
	add_f32	 $s4, $s4, $s2 ;
	brn	@BB109_3 ;
@BB109_10:
	mul_f32	 $s3, $s2, $s2 ;
	mad_f32	 $s5, $s3, 0F37d383a2, 0F39679767 ;
	mad_f32	 $s5, $s3, $s5, 0F3a9c54a1 ;
	mad_f32	 $s5, $s3, $s5, 0F3bf2027e ;
	mad_f32	 $s5, $s3, $s5, 0F3d89f001 ;
	mad_f32	 $s5, $s3, $s5, 0F3d9e233f ;
	mad_f32	 $s6, $s3, 0F383c2c75, 0F38e28445 ;
	mad_f32	 $s6, $s3, $s6, 0F3a05b634 ;
	mad_f32	 $s6, $s3, $s6, 0F3b3d6ec6 ;
	mad_f32	 $s6, $s3, $s6, 0F3ca89915 ;
	mad_f32	 $s6, $s3, $s6, 0F3ea51a66 ;
	mul_f32	 $s3, $s3, $s6 ;
	mad_f32	 $s3, $s2, $s5, $s3 ;
	mad_f32	 $s2, $s2, 0Fbf000000, $s3 ;
	add_f32	 $s4, $s4, $s2 ;
	brn	@BB109_3 ;
@BB109_11:
	mul_f32	 $s3, $s2, $s2 ;
	mul_f32	 $s5, $s3, $s2 ;
	mad_f32	 $s6, $s5, 0Fb9a3f927, 0F3a66f867 ;
	mad_f32	 $s6, $s5, $s6, 0Fbb7177fe ;
	mad_f32	 $s6, $s5, $s6, 0F3c93373d ;
	mad_f32	 $s6, $s5, $s6, 0Fbe17213c ;
	mad_f32	 $s7, $s5, 0F39afe9f7, 0Fba0d3085 ;
	mad_f32	 $s7, $s5, $s7, 0F3b141699 ;
	mad_f32	 $s7, $s5, $s7, 0Fbc28fcfe ;
	mad_f32	 $s7, $s5, $s7, 0F3d845a15 ;
	mad_f32	 $s2, $s2, $s7, $s6 ;
	neg_f32	 $s2, $s2 ;
	mad_f32	 $s2, $s5, $s2, 0F31e61c52 ;
	neg_f32	 $s2, $s2 ;
	mad_f32	 $s6, $s5, 0F39a57b6b, 0Fbab7f476 ;
	mad_f32	 $s6, $s5, $s6, 0F3bc7e707 ;
	mad_f32	 $s6, $s5, $s6, 0Fbd064d47 ;
	mad_f32	 $s5, $s5, $s6, 0F3ef7b95e ;
	mad_f32	 $s2, $s3, $s5, $s2 ;
	add_f32	 $s2, $s2, 0Fbdf8cdcd ;
	add_f32	 $s4, $s4, $s2 ;
	brn	@BB109_3 ;
@BB109_12:
	cmp_ge_b1_f32	 $c0, $s3, 0F41000000 ;
	cbr	$c0, @BB109_14 ;
// BB#13:
	cvt_zeroi_s32_f32	$s2, $s3 ;
	cvt_near_f32_s32	$s4, $s2 ;
	sub_f32	 $s3, $s3, $s4 ;
	add_f32	 $s4, $s3, 0F40a00000 ;
	cmp_gt_b1_s32	 $c0, $s2, 5 ;
	cmov_b32	 $s4, $c0, $s4, 0F3f800000 ;
	add_f32	 $s5, $s3, 0F40c00000 ;
	cmp_gt_b1_s32	 $c0, $s2, 6 ;
	cmov_b32	 $s5, $c0, $s5, 0F3f800000 ;
	mul_f32	 $s4, $s5, $s4 ;
	add_f32	 $s5, $s3, 0F40800000 ;
	cmp_gt_b1_s32	 $c0, $s2, 4 ;
	cmov_b32	 $s5, $c0, $s5, 0F3f800000 ;
	mul_f32	 $s4, $s4, $s5 ;
	add_f32	 $s5, $s3, 0F40400000 ;
	cmp_gt_b1_s32	 $c0, $s2, 3 ;
	cmov_b32	 $s5, $c0, $s5, 0F3f800000 ;
	mul_f32	 $s4, $s4, $s5 ;
	add_f32	 $s5, $s3, 0F40000000 ;
	cmp_gt_b1_s32	 $c0, $s2, 2 ;
	cmov_b32	 $s2, $c0, $s5, 0F3f800000 ;
	mul_f32	 $s2, $s4, $s2 ;
	mov_b32	$s4, $s2 ;
	shr_u32	 $s5, $s4, 23 ;
	cmp_eq_b1_u32	 $c0, $s5, 0 ;
	or_b32	 $s6, $s4, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c0, $s6, $s4 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s5, $s5, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s5, $c0, $s6, $s5 ;
	cvt_near_f32_s32	$s5, $s5 ;
	mad_f32	 $s6, $s5, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s5, $s5, 0F3f317000, $s7 ;
	add_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s2, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c0, $s6, 0F3d800000 ;
	cmov_b32	 $s5, $c0, $s7, $s5 ;
	and_b32	 $s6, $s4, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s6, 2139095039 ;
	cmov_b32	 $s2, $c0, $s2, $s5 ;
	cmp_eq_b1_u32	 $c0, $s4, $s6 ;
	cmov_b32	 $s2, $c0, $s2, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s2 ;
	mad_f32	 $s4, $s3, 0F36f5d7bd, 0F3a4beed6 ;
	mad_f32	 $s4, $s3, $s4, 0F3c98bf54 ;
	mad_f32	 $s4, $s3, $s4, 0F3e300f6e ;
	mad_f32	 $s4, $s3, $s4, 0F3f38d0c5 ;
	mad_f32	 $s4, $s3, $s4, 0F3fb22d3b ;
	mad_f32	 $s4, $s3, $s4, 0F3f800000 ;
	mad_f32	 $s5, $s3, 0F3805ff67, 0F3af135b4 ;
	mad_f32	 $s5, $s3, $s5, 0F3cda40e4 ;
	mad_f32	 $s5, $s3, $s5, 0F3e15dce6 ;
	mad_f32	 $s5, $s3, $s5, 0F3ea6cc7a ;
	mad_f32	 $s5, $s3, $s5, 0F3e5c245a ;
	mad_f32	 $s5, $s3, $s5, 0Fbd9e233f ;
	mul_f32	 $s5, $s3, $s5 ;
	div_f32	 $s4, $s5, $s4 ;
	mad_f32	 $s3, $s3, 0F3f000000, $s4 ;
	add_f32	 $s4, $s3, $s2 ;
	brn	@BB109_3 ;
@BB109_14:
	shr_u32	 $s4, $s2, 23 ;
	cmp_geu_b1_f32	 $c0, $s3, 0F5c800000 ;
	cbr	$c0, @BB109_16 ;
// BB#15:
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s5, $s2, 1065353216 ;
	add_f32	 $s5, $s5, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s5, $s2 ;
	and_b32	 $s7, $s6, 8323072 ;
	shl_u32	 $s8, $s6, 1 ;
	and_b32	 $s8, $s8, 65536 ;
	add_u32	 $s7, $s8, $s7 ;
	or_b32	 $s8, $s7, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s8, $s6 ;
	shr_u32	 $s8, $s7, 14 ;
	//ldas_global_u32	$s9, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s8, [$s8] ;
	mul_f32	 $s6, $s6, $s8 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s5, -253 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s5, $s4, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s7, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	add_f32	 $s5, $s5, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s6 ;
	add_f32	 $s4, $s4, $s5 ;
	add_f32	 $s5, $s3, 0Fbf800000 ;
	add_f32	 $s6, $s5, 0F40000000 ;
	div_f32	 $s6, $s5, $s6 ;
	add_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s7, $s7 ;
	mad_f32	 $s9, $s8, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	mul_f32	 $s6, $s6, $s5 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	add_f32	 $s6, $s6, $s5 ;
	abs_f32	 $s5, $s5 ;
	cmp_lt_b1_f32	 $c0, $s5, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s4 ;
	add_f32	 $s2, $s2, 0Fbf800000 ;
	div_f32	 $s4, 0F3f800000, $s3 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0Fbad5c4e8, 0F3a5b3dd2 ;
	mad_f32	 $s6, $s5, $s6, 0Fba1c065c ;
	mad_f32	 $s6, $s5, $s6, 0F3a500cfd ;
	mad_f32	 $s6, $s5, $s6, 0Fbb360b61 ;
	mad_f32	 $s5, $s5, $s6, 0F3daaaaab ;
	mad_f32	 $s4, $s4, $s5, 0F3ed67f1d ;
	add_f32	 $s3, $s3, 0Fbf000000 ;
	mad_f32	 $s4, $s3, $s2, $s4 ;
	brn	@BB109_3 ;
@BB109_16:
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s5, $s2, 1065353216 ;
	add_f32	 $s5, $s5, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s5, $s2 ;
	and_b32	 $s7, $s6, 8323072 ;
	shl_u32	 $s8, $s6, 1 ;
	and_b32	 $s8, $s8, 65536 ;
	add_u32	 $s7, $s8, $s7 ;
	or_b32	 $s8, $s7, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s8, $s6 ;
	shr_u32	 $s8, $s7, 14 ;
	//ldas_global_u32	$s9, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s8, [$s8] ;
	mul_f32	 $s6, $s6, $s8 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s5, -253 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s5, $s4, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s7, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	add_f32	 $s5, $s5, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s6 ;
	add_f32	 $s4, $s4, $s5 ;
	add_f32	 $s5, $s3, 0Fbf800000 ;
	add_f32	 $s6, $s5, 0F40000000 ;
	div_f32	 $s6, $s5, $s6 ;
	add_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s7, $s7 ;
	mad_f32	 $s9, $s8, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	mul_f32	 $s6, $s6, $s5 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	add_f32	 $s6, $s6, $s5 ;
	abs_f32	 $s5, $s5 ;
	cmp_lt_b1_f32	 $c0, $s5, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s4, $c0, 0Fff800000, $s4 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	mul_f32	 $s4, $s3, $s4 ;
	brn	@BB109_3 ;
@BB109_17:
	and_b32	 $s2, $s1, -2147483648 ;
	xor_b32	 $s1, $s2, $s1 ;
	mov_b32	$s3, $s1 ;
	cvt_zeroi_s32_f32	$s5, $s3 ;
	cvt_near_f32_s32	$s6, $s5 ;
	sub_f32	 $s3, $s3, $s6 ;
	sub_f32	 $s6, 0F3f800000, $s3 ;
	add_f32	 $s7, $s3, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s3, 0F3f400000 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	sub_f32	 $s7, 0F3f000000, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3f000000 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	cmp_le_b1_f32	 $c0, $s3, 0F3e800000 ;
	cmov_b32	 $s6, $c0, $s3, $s6 ;
	mul_f32	 $s6, $s6, 0F40490fdb ;
	mul_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s6, $s7 ;
	mad_f32	 $s9, $s7, 0F3636df25, 0Fb95009d4 ;
	mad_f32	 $s9, $s7, $s9, 0F3c088887 ;
	mad_f32	 $s9, $s7, $s9, 0Fbe2aaaab ;
	mad_f32	 $s6, $s8, $s9, $s6 ;
	mad_f32	 $s8, $s7, 0Fb492923a, 0F37d00ae3 ;
	mad_f32	 $s8, $s7, $s8, 0Fbab60b60 ;
	mad_f32	 $s8, $s7, $s8, 0F3d2aaaab ;
	mad_f32	 $s9, $s7, 0Fbf000000, 0F3f800000 ;
	mul_f32	 $s7, $s7, $s7 ;
	mad_f32	 $s7, $s7, $s8, $s9 ;
	cmp_gtu_b1_f32	 $c1, $s3, 0F3f400000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s3, $c0, $s6, $s7 ;
	shl_u32	 $s5, $s5, 31 ;
	xor_b32	 $s5, $s5, $s2 ;
	xor_b32	 $s3, $s5, $s3 ;
	cmp_lt_b1_s32	 $c0, $s1, 2139095040 ;
	cmov_b32	 $s2, $c0, $s2, 2143289344 ;
	cmp_lt_b1_s32	 $c0, $s1, 1258291200 ;
	cmov_b32	 $s1, $c0, $s3, $s2 ;
	mul_f32	 $s0, $s1, $s0 ;
	abs_f32	 $s0, $s0 ;
	div_f32	 $s0, 0F40490fdb, $s0 ;
	mov_b32	$s2, $s0 ;
	shr_u32	 $s3, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	or_b32	 $s5, $s2, 1065353216 ;
	add_f32	 $s5, $s5, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s5, $s2 ;
	and_b32	 $s7, $s6, 8323072 ;
	shl_u32	 $s8, $s6, 1 ;
	and_b32	 $s8, $s8, 65536 ;
	add_u32	 $s7, $s8, $s7 ;
	or_b32	 $s8, $s7, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s8, $s6 ;
	shr_u32	 $s8, $s7, 14 ;
	//ldas_global_u32	$s9, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s8, [$s8] ;
	mul_f32	 $s6, $s6, $s8 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s3, $s3, -127 ;
	shr_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s5, -253 ;
	cmov_b32	 $s3, $c0, $s5, $s3 ;
	cvt_near_f32_s32	$s3, $s3 ;
	mad_f32	 $s5, $s3, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s7, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	add_f32	 $s5, $s5, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s3, $s3, 0F3f317000, $s6 ;
	add_f32	 $s3, $s3, $s5 ;
	add_f32	 $s5, $s0, 0Fbf800000 ;
	add_f32	 $s6, $s5, 0F40000000 ;
	div_f32	 $s6, $s5, $s6 ;
	add_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s7, $s7 ;
	mad_f32	 $s9, $s8, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	mul_f32	 $s6, $s6, $s5 ;
	neg_f32	 $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	add_f32	 $s6, $s6, $s5 ;
	abs_f32	 $s5, $s5 ;
	cmp_lt_b1_f32	 $c0, $s5, 0F3d800000 ;
	cmov_b32	 $s3, $c0, $s6, $s3 ;
	and_b32	 $s5, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s5, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s3 ;
	cmp_eq_b1_u32	 $c0, $s2, $s5 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s5, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	sub_f32	 $s0, $s0, $s4 ;
	cmp_eq_b1_f32	 $c0, $s1, 0F00000000 ;
	cmov_b32	 $s0, $c0, 0F7f800000, $s0 ;
	brn	@BB109_18 ;
@BB109_19:
	shr_u32	 $s0, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	or_b32	 $s1, $s2, 1065353216 ;
	add_f32	 $s1, $s1, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s1, $s2 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s0, $s0, -127 ;
	shr_u32	 $s1, $s1, 23 ;
	add_u32	 $s1, $s1, -253 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	cvt_near_f32_s32	$s0, $s0 ;
	mad_f32	 $s1, $s0, 0F3805fdf4, $s4 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s1, $s1, $s5 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s0, $s0, 0F3f317000, $s4 ;
	add_f32	 $s0, $s0, $s1 ;
	add_f32	 $s1, $s3, 0Fbf800000 ;
	add_f32	 $s3, $s1, 0F40000000 ;
	div_f32	 $s3, $s1, $s3 ;
	add_f32	 $s4, $s3, $s3 ;
	mul_f32	 $s5, $s4, $s4 ;
	mad_f32	 $s6, $s5, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s5, $s6, $s5 ;
	mul_f32	 $s3, $s3, $s1 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s4, $s5, $s3 ;
	add_f32	 $s3, $s3, $s1 ;
	abs_f32	 $s1, $s1 ;
	cmp_lt_b1_f32	 $c0, $s1, 0F3d800000 ;
	cmov_b32	 $s0, $c0, $s3, $s0 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	neg_f32	 $s0, $s0 ;
@BB109_18:                              // %__lgamma_f32.exit
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plgamma_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[10];
@__amd_amp_Plgamma_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	and_b64	 $d0, $d0, 9223372036854775807 ;
	mov_b64	$d1, $d0 ;
	cmp_gt_b1_u64	 $c0, $d0, 9218868437227405311 ;
	cbr	$c0, @BB110_11 ;
// BB#1:
	cmp_lt_b1_f64	 $c0, $d1, 0D3b90000000000000 ;
	cbr	$c0, @BB110_7 ;
// BB#2:
	cmp_ge_b1_f64	 $c0, $d1, 0D4000000000000000 ;
	cbr	$c0, @BB110_14 ;
// BB#3:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d3, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	neg_f64	 $d0, $d0 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3feccccc00000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	sub_f64	 $d3, 0D4000000000000000, $d1 ;
	add_f64	 $d4, $d1, 0Dbff762d86356be3f ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3ffbb4c300000000 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D3ff3b4c400000000 ;
	cmov_b64	 $d2, $c2, $d2, $d3 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d1 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	add_f64	 $d3, $d1, 0Dbfdd8b618d5af8fc ;
	cmp_lt_b1_f64	 $c3, $d1, 0D3fe7694400000000 ;
	cmov_b64	 $d2, $c3, $d3, $d2 ;
	cmp_lt_b1_f64	 $c4, $d1, 0D3fcda66100000000 ;
	cmov_b64	 $d1, $c4, $d1, $d2 ;
	cvt_u32_b1	$s0, $c1 ;
	cmov_b32	 $s0, $c2, 2, $s0 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	cmov_b32	 $s0, $c3, 1, $s0 ;
	cmov_b32	 $s0, $c4, 2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cbr	$c0, @BB110_8 ;
// BB#4:
	cmp_eq_b1_u32	 $c0, $s0, 1 ;
	cbr	$c0, @BB110_12 ;
// BB#5:
	cmp_eq_b1_u32	 $c0, $s0, 2 ;
	cbr	$c0, @BB110_13 ;
// BB#6:
	mov_b64	$d1, $d0 ;
	brn	@BB110_9 ;
@BB110_7:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	neg_f64	 $d1, $d0 ;
	brn	@BB110_11 ;
@BB110_8:
	fma_f64	 $d2, $d1, 0D3f07858e90a45837, 0D3efa7074428cfa52 ;
	fma_f64	 $d2, $d1, $d2, 0D3f1c5088987dfb07 ;
	fma_f64	 $d2, $d1, $d2, 0D3f2cf2eced10e54d ;
	fma_f64	 $d2, $d1, $d2, 0D3f40b6c689b99c00 ;
	fma_f64	 $d2, $d1, $d2, 0D3f538a94116f3f5d ;
	fma_f64	 $d2, $d1, $d2, 0D3f67add8ccb7926b ;
	fma_f64	 $d2, $d1, $d2, 0D3f7e404fb68fefe8 ;
	fma_f64	 $d2, $d1, $d2, 0D3f951322ac92547b ;
	fma_f64	 $d2, $d1, $d2, 0D3fb13e001a5562a7 ;
	fma_f64	 $d2, $d1, $d2, 0D3fd4a34cc4a60fad ;
	fma_f64	 $d2, $d1, $d2, 0D3fb3c467e37db0c8 ;
	add_f64	 $d2, $d2, 0Dbfe0000000000000 ;
	fma_f64	 $d1, $d1, $d2, $d0 ;
@BB110_9:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cbr	$c0, @BB110_11 ;
// BB#10:
	mov_b64	$d2, $d0 ;
	and_b64	 $d0, $d2, -9223372036854775808 ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	xor_b64	 $d2, $d0, $d2 ;
	st_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d0, $d2 ;
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cvt_zeroi_s64_f64	$d2, $d0 ;
	st_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d3, $d2 ;
	sub_f64	 $d3, $d0, $d3 ;
	sub_f64	 $d4, 0D3ff0000000000000, $d3 ;
	add_f64	 $d5, $d3, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d3, 0D3fe8000000000000 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	sub_f64	 $d5, 0D3fe0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D3fe0000000000000 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	cmp_le_b1_f64	 $c0, $d3, 0D3fd0000000000000 ;
	cmov_b64	 $d4, $c0, $d3, $d4 ;
	mul_f64	 $d4, $d4, 0D400921fb54442d18 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, 0D3fe0000000000000 ;
	sub_f64	 $d7, 0D3ff0000000000000, $d6 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d7 ;
	sub_f64	 $d0, $d0, $d6 ;
	fma_f64	 $d0, $d4, 0D0000000000000000, $d0 ;
	fma_f64	 $d6, 0Dbda907db46cc5e42, $d5, 0D3e21eeb69037ab78 ;
	fma_f64	 $d6, $d6, $d5, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d6, $d6, $d5, 0D3efa01a019f4ec90 ;
	fma_f64	 $d6, $d6, $d5, 0Dbf56c16c16c16967 ;
	fma_f64	 $d6, $d6, $d5, 0D3fa5555555555555 ;
	mul_f64	 $d2, $d5, $d5 ;
	fma_f64	 $d0, $d6, $d2, $d0 ;
	add_f64	 $d0, $d7, $d0 ;
	fma_f64	 $d2, 0D3de5e0b2f9a43bb8, $d5, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d2, $d2, $d5, 0D3ec71de3796cde01 ;
	fma_f64	 $d2, $d2, $d5, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d2, $d2, $d5, 0D3f81111111110bb3 ;
	mul_f64	 $d6, $d5, $d4 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d2, $d6, $d2, 0D0000000000000000 ;
	fma_f64	 $d2, $d2, $d5, 0D8000000000000000 ;
	fma_f64	 $d2, $d6, 0Dbfc5555555555555, $d2 ;
	sub_f64	 $d2, $d4, $d2 ;
	cmp_gtu_b1_f64	 $c1, $d3, 0D3fe8000000000000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	shl_u64	 $d2, $d2, 63 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	xor_b64	 $d2, $d2, $d3 ;
	xor_b64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	cmp_lt_b1_s64	 $c0, $d2, 9218868437227405312 ;
	cmov_b64	 $d2, $c0, $d3, 9221120237041090560 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d3, 0D4330000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d0, $d2 ;
	abs_f64	 $d2, $d2 ;
	div_f64	 $d2, 0D400921fb54442d18, $d2 ;
	mov_b64	$d3, $d2 ;
	cmp_lt_b1_u64	 $c0, $d3, 4503599627370496 ;
	or_b64	 $d4, $d3, 274719577269600256 ;
	add_f64	 $d4, $d4, 0D83d0000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	shr_s64	 $d4, $d3, 45 ;
	cvt_u32_u64	$s0, $d4 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	mul_f64	 $d4, $d4, 0D3f80000000000000 ;
	and_b64	 $d5, $d3, 4503599627370495 ;
	or_b64	 $d5, $d5, 4602678819172646912 ;
	sub_f64	 $d5, $d5, $d4 ;
	fma_f64	 $d4, $d5, 0D3fe0000000000000, $d4 ;
	div_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d5, $d4, $d4 ;
	fma_f64	 $d6, $d5, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d6, $d5, $d6, 0D3fb5555555555557 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d4, $d4, $d5, $d4 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d4, $d5, $d4 ;
	shr_u64	 $d3, $d3, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d3, $s1 ;
	fma_f64	 $d4, $d3, 0D3e6efa39ef35793c, $d4 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d5, [$s0] ;
	fma_f64	 $d3, $d3, 0D3fe62e42e0000000, $d5 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d2, 0Dbff0000000000000 ;
	add_f64	 $d5, $d4, 0D4000000000000000 ;
	div_f64	 $d5, $d4, $d5 ;
	add_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, $d6 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d0, $d7, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d0, $d7, $d0, 0D3f89999999bac6d4 ;
	fma_f64	 $d0, $d7, $d0, 0D3fb55555555554e6 ;
	mul_f64	 $d5, $d4, $d5 ;
	neg_f64	 $d5, $d5 ;
	fma_f64	 $d0, $d6, $d0, $d5 ;
	add_f64	 $d0, $d4, $d0 ;
	cmp_le_b1_f64	 $c0, $d2, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d2, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d3 ;
	class_f64	 $c0, $d2, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d2, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	sub_f64	 $d1, $d0, $d1 ;
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
	brn	@BB110_11 ;
@BB110_12:
	fma_f64	 $d2, $d1, 0D3f35fd3ee8c2d3f4, 0Dbf347f24ecc38c38 ;
	fma_f64	 $d2, $d1, $d2, 0D3f34af6d6c0ebbf7 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf41a6109c73e0ec ;
	fma_f64	 $d2, $d1, $d2, 0D3f4cdf0cef61a8e9 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf56fe8ebf2d1af1 ;
	fma_f64	 $d2, $d1, $d2, 0D3f6282d32e15c915 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf6e2effb3e914d7 ;
	fma_f64	 $d2, $d1, $d2, 0D3f78fce0e370e344 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf851f9fba91ec6a ;
	fma_f64	 $d2, $d1, $d2, 0D3f9266e7970af9ec ;
	fma_f64	 $d2, $d1, $d2, 0Dbfa0c9a8df35b713 ;
	fma_f64	 $d2, $d1, $d2, 0D3fb08b4294d5419b ;
	fma_f64	 $d2, $d1, $d2, 0Dbfc2e4278dc6c509 ;
	fma_f64	 $d2, $d1, $d2, 0D3fdef72bc8ee38a2 ;
	mul_f64	 $d1, $d1, $d1 ;
	fma_f64	 $d1, $d1, $d2, 0D3c50c7caa48a971f ;
	add_f64	 $d1, $d1, 0Dbfbf19b9bcc38a42 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB110_9 ;
@BB110_13:
	fma_f64	 $d2, $d1, 0D3f6a5abb57d0cf61, 0D3fbaae55d6537c88 ;
	fma_f64	 $d2, $d1, $d2, 0D3fe89dfbe45050af ;
	fma_f64	 $d2, $d1, $d2, 0D40010725a42b18f5 ;
	fma_f64	 $d2, $d1, $d2, 0D4003a5d7c2bd619c ;
	fma_f64	 $d2, $d1, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, $d1, 0D3f8b678bbf2bab09, 0D3fcd4eaef6010924 ;
	fma_f64	 $d3, $d1, $d3, 0D3fef497644ea8450 ;
	fma_f64	 $d3, $d1, $d3, 0D3ff7475cd119bd6f ;
	fma_f64	 $d3, $d1, $d3, 0D3fe4401e8b005dff ;
	fma_f64	 $d3, $d1, $d3, 0Dbfb3c467e37db0c8 ;
	mul_f64	 $d3, $d1, $d3 ;
	div_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d1, 0Dbfe0000000000000, $d1, $d2 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB110_9 ;
@BB110_14:
	cmp_ge_b1_f64	 $c0, $d1, 0D4020000000000000 ;
	cbr	$c0, @BB110_16 ;
// BB#15:
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d0, $s0 ;
	sub_f64	 $d0, $d1, $d0 ;
	add_f64	 $d1, $d0, 0D4014000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 5 ;
	cmov_b64	 $d1, $c0, $d1, 0D3ff0000000000000 ;
	add_f64	 $d2, $d0, 0D4018000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 6 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	add_f64	 $d2, $d0, 0D4010000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 4 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0D4008000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 3 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0D4000000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 2 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	mov_b64	$d2, $d1 ;
	cmp_lt_b1_u64	 $c0, $d2, 4503599627370496 ;
	or_b64	 $d3, $d2, 274719577269600256 ;
	add_f64	 $d3, $d3, 0D83d0000000000000 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	shr_s64	 $d3, $d2, 45 ;
	cvt_u32_u64	$s0, $d3 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d3, $s0 ;
	mul_f64	 $d3, $d3, 0D3f80000000000000 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	sub_f64	 $d4, $d4, $d3 ;
	fma_f64	 $d3, $d4, 0D3fe0000000000000, $d3 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	fma_f64	 $d5, $d4, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d5, $d4, $d5, 0D3fb5555555555557 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d3, $d3, $d4, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d3, $d4, $d3 ;
	shr_u64	 $d2, $d2, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, $d2, 0D3e6efa39ef35793c, $d3 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d2, $d2, 0D3fe62e42e0000000, $d4 ;
	add_f64	 $d2, $d2, $d3 ;
	add_f64	 $d3, $d1, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, 0D4000000000000000 ;
	div_f64	 $d4, $d3, $d4 ;
	add_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d7, $d6, $d7, 0D3f89999999bac6d4 ;
	fma_f64	 $d6, $d6, $d7, 0D3fb55555555554e6 ;
	mul_f64	 $d4, $d3, $d4 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, $d5, $d6, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0Dfff0000000000000, $d2 ;
	fma_f64	 $d2, $d0, 0D3edebaf7a5b38140, 0D3f497ddaca41a95b ;
	fma_f64	 $d2, $d0, $d2, 0D3f9317ea742ed475 ;
	fma_f64	 $d2, $d0, $d2, 0D3fc601edccfbdf27 ;
	fma_f64	 $d2, $d0, $d2, 0D3fe71a1893d3dcdc ;
	fma_f64	 $d2, $d0, $d2, 0D3ff645a762c4ab74 ;
	fma_f64	 $d2, $d0, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, $d0, 0D3f00bfecdd17e945, 0D3f5e26b67368f239 ;
	fma_f64	 $d3, $d0, $d3, 0D3f9b481c7e939961 ;
	fma_f64	 $d3, $d0, $d3, 0D3fc2bb9cbee5f2f7 ;
	fma_f64	 $d3, $d0, $d3, 0D3fd4d98f4f139f59 ;
	fma_f64	 $d3, $d0, $d3, 0D3fcb848b36e20878 ;
	fma_f64	 $d3, $d0, $d3, 0Dbfb3c467e37db0c8 ;
	mul_f64	 $d3, $d0, $d3 ;
	div_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d0, 0D3fe0000000000000, $d0, $d2 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB110_9 ;
@BB110_16:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	add_f64	 $d0, $d0, 0Dbff0000000000000 ;
	add_f64	 $d2, $d1, 0Dbfe0000000000000 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d1, 0D3ff0000000000000, $d1 ;
	mul_f64	 $d2, $d1, $d1 ;
	fma_f64	 $d3, $d2, 0Dbf5ab89d0b9e43e4, 0D3f4b67ba4cdad5d1 ;
	fma_f64	 $d3, $d2, $d3, 0Dbf4380cb8c0fe741 ;
	fma_f64	 $d3, $d2, $d3, 0D3f4a019f98cf38b6 ;
	fma_f64	 $d3, $d2, $d3, 0Dbf66c16c16b02e5c ;
	fma_f64	 $d2, $d2, $d3, 0D3fb555555555553b ;
	fma_f64	 $d1, $d1, $d2, 0D3fdacfe390c97d69 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB110_9 ;
@BB110_11:                              // %__lgamma_f64.exit
	st_arg_f64 $d1, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plog_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s3, $s2, 0F3805fdf4, $s4 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	add_f32	 $s4, $s4, $s3 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Plog_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog10_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plog10_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mul_f32	 $s3, $s2, 0F39826a13 ;
	mad_f32	 $s3, $s4, 0Fbede5bd9, $s3 ;
	shr_u32	 $s4, $s5, 13 ;
	//ldas_global_u32	$s5, [&__math32_LOG10_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3e9a0000, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s5, $s5, -65536 ;
	sub_f32	 $s6, $s3, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, 0F3a37b152 ;
	mad_f32	 $s6, $s5, 0F3a37b152, $s6 ;
	mad_f32	 $s4, $s4, 0F3ede0000, $s6 ;
	mad_f32	 $s4, $s5, 0F3ede0000, $s4 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog10_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Plog10_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d1, $s1 ;
	fma_f64	 $d2, $d1, 0D3e6efa39ef35793c, $d2 ;
	mul_f64	 $d3, $d2, 0D3ea8a93728719535 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d1, $d1, 0D3fe62e42e0000000, $d4 ;
	fma_f64	 $d3, 0D3ea8a93728719535, $d1, $d3 ;
	fma_f64	 $d2, 0D3fdbcb7800000000, $d2, $d3 ;
	fma_f64	 $d1, 0D3fdbcb7800000000, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	mov_b64	$d4, $d2 ;
	and_b64	 $d4, $d4, -4294967296 ;
	sub_f64	 $d2, $d2, $d4 ;
	add_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, 0D3ea8a93728719535 ;
	fma_f64	 $d3, 0D3ea8a93728719535, $d4, $d3 ;
	fma_f64	 $d2, 0D3fdbcb7800000000, $d2, $d3 ;
	fma_f64	 $d2, 0D3fdbcb7800000000, $d4, $d2 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog1p_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plog1p_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	add_f32	 $s1, $s0, 0F3f800000 ;
	and_b32	 $s2, $s1, 8323072 ;
	shl_u32	 $s3, $s1, 1 ;
	and_b32	 $s3, $s3, 65536 ;
	add_u32	 $s2, $s3, $s2 ;
	or_b32	 $s3, $s2, 1056964608 ;
	and_b32	 $s4, $s1, 8355840 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s3, $s4 ;
	and_b32	 $s5, $s1, -32768 ;
	sub_f32	 $s5, 0F3f800000, $s5 ;
	add_f32	 $s5, $s5, $s0 ;
	or_b32	 $s6, $s1, 8388607 ;
	xor_b32	 $s6, $s6, 2139095040 ;
	add_u32	 $s6, $s6, 2139095040 ;
	and_b32	 $s6, $s6, 2139095040 ;
	mul_f32	 $s5, $s5, $s6 ;
	mul_f32	 $s5, $s5, 0F3f000000 ;
	sub_f32	 $s4, $s4, $s5 ;
	and_b32	 $s5, $s1, 8388607 ;
	or_b32	 $s5, $s5, 1056964608 ;
	sub_f32	 $s3, $s3, $s5 ;
	extract_u32	 $s1, $s1, 23, 8 ;
	add_u32	 $s1, $s1, -127 ;
	cvt_near_f32_s32	$s1, $s1 ;
	cmp_gt_b1_f32	 $c0, $s1, 0F41c00000 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	shr_u32	 $s4, $s2, 14 ;
	//ldas_global_u32	$s5, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s4, $s5, $s4 ;
	ld_readonly_f32	$s4, [$s4] ;
	mul_f32	 $s3, $s3, $s4 ;
	mul_f32	 $s4, $s3, $s3 ;
	mad_f32	 $s5, $s3, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s3, $s5, $s4, $s3 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s1, 0F3805fdf4, $s3 ;
	shr_u32	 $s2, $s2, 13 ;
	//ldas_global_u32	$s4, [&__math32_LOGE_TBL] ;
	add_u32	 $s2, $s4, $s2 ;
	ld_readonly_f32	$s4, [$s2 + 4] ;
	add_f32	 $s3, $s3, $s4 ;
	ld_readonly_f32	$s2, [$s2] ;
	mad_f32	 $s1, $s1, 0F3f317000, $s2 ;
	add_f32	 $s1, $s1, $s3 ;
	add_f32	 $s2, $s0, 0F40000000 ;
	div_f32	 $s2, $s0, $s2 ;
	add_f32	 $s3, $s2, $s2 ;
	mul_f32	 $s4, $s3, $s3 ;
	mad_f32	 $s5, $s4, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s4, $s5, $s4 ;
	mul_f32	 $s3, $s4, $s3 ;
	neg_f32	 $s2, $s2 ;
	mad_f32	 $s2, $s2, $s0, $s3 ;
	add_f32	 $s2, $s2, $s0 ;
	mov_b32	$s3, $s0 ;
	and_b32	 $s3, $s3, 2147483647 ;
	cmp_lt_b1_u32	 $c0, $s3, 1031798784 ;
	cmov_b32	 $s1, $c0, $s2, $s1 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s1, $c0, $s0, $s1 ;
	cmp_lt_b1_f32	 $c0, $s0, 0Fbf800000 ;
	cmov_b32	 $s1, $c0, 0F7fc00000, $s1 ;
	cmp_eq_b1_f32	 $c0, $s0, 0Fbf800000 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog1p_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Plog1p_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	add_f64	 $d1, $d0, 0D3ff0000000000000 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f90000000000000 ;
	shr_u64	 $d3, $d1, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	sub_u32	 $s2, 2046, $s1 ;
	cvt_u64_u32	$d3, $s2 ;
	shl_u64	 $d3, $d3, 52 ;
	sub_f64	 $d4, $d3, $d2 ;
	fma_f64	 $d4, $d3, $d0, $d4 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d5, $d3, $d0, $d5 ;
	add_f64	 $d3, $d5, $d3 ;
	add_u32	 $s2, $s1, -1023 ;
	cmp_lt_b1_s32	 $c0, $s2, 53 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	and_b64	 $d1, $d1, 4503599627370495 ;
	or_b64	 $d1, $d1, 4607182418800017408 ;
	sub_f64	 $d1, $d1, $d2 ;
	add_u32	 $s1, $s1, -1022 ;
	cmp_gt_b1_u32	 $c0, $s1, 61 ;
	cmov_b64	 $d1, $c0, $d1, $d3 ;
	fma_f64	 $d2, 0D3fe0000000000000, $d1, $d2 ;
	div_f64	 $d1, $d1, $d2 ;
	mul_f64	 $d2, $d1, $d1 ;
	fma_f64	 $d3, $d2, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d3, $d2, $d3, 0D3fb5555555555557 ;
	mul_f64	 $d2, $d2, $d3 ;
	fma_f64	 $d1, $d1, $d2, $d1 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d1, $d2, $d1 ;
	cvt_near_f64_s32	$d2, $s2 ;
	fma_f64	 $d1, $d2, 0D3e6efa39ef35793c, $d1 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d2, $d2, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d1, $d2, $d1 ;
	add_f64	 $d2, $d0, 0D4000000000000000 ;
	div_f64	 $d2, $d0, $d2 ;
	add_f64	 $d3, $d2, $d2 ;
	mul_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d5, $d4, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d5, $d4, $d5, 0D3f89999999bac6d4 ;
	fma_f64	 $d4, $d4, $d5, 0D3fb55555555554e6 ;
	mul_f64	 $d2, $d2, $d0 ;
	neg_f64	 $d2, $d2 ;
	fma_f64	 $d2, $d3, $d4, $d2 ;
	add_f64	 $d2, $d2, $d0 ;
	cmp_gt_b1_f64	 $c0, $d0, 0D3fb082b577d34ed8 ;
	cmp_lt_b1_f64	 $c1, $d0, 0Dbfaf0540438fd5c3 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d1, $d2 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, $d0 ;
	cmp_lt_b1_f64	 $c0, $d0, 0Dbff0000000000000 ;
	cmov_b64	 $d1, $c0, 0D7ff8000000000000, $d1 ;
	cmp_eq_b1_f64	 $c0, $d0, 0Dbff0000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog2_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plog2_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s6, $s5, 14 ;
	//ldas_global_u32	$s7, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s4, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s4, $s7, $s6, $s4 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOG2_TBL] ;
	add_u32	 $s5, $s6, $s5 ;
	ld_readonly_f32	$s6, [$s5 + 4] ;
	mad_f32	 $s4, $s4, 0Fbfb8aa3b, $s6 ;
	ld_readonly_f32	$s5, [$s5] ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	add_f32	 $s2, $s5, $s2 ;
	add_f32	 $s2, $s2, $s4 ;
	add_f32	 $s3, $s0, 0Fbf800000 ;
	add_f32	 $s4, $s3, 0F40000000 ;
	div_f32	 $s4, $s3, $s4 ;
	add_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s5, $s5 ;
	mad_f32	 $s7, $s6, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s4, $s4, $s3 ;
	neg_f32	 $s4, $s4 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s5, $s5, -65536 ;
	sub_f32	 $s6, $s3, $s5 ;
	add_f32	 $s4, $s4, $s6 ;
	mul_f32	 $s6, $s4, 0F3baa3b29 ;
	mad_f32	 $s6, $s5, 0F3baa3b29, $s6 ;
	mad_f32	 $s4, $s4, 0F3fb80000, $s6 ;
	mad_f32	 $s4, $s5, 0F3fb80000, $s4 ;
	abs_f32	 $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, $s3 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plog2_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Plog2_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	cmp_lt_b1_u64	 $c0, $d1, 4503599627370496 ;
	or_b64	 $d2, $d1, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	shr_s64	 $d2, $d1, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d1, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, 0D3ecb295c17f0bbbe ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d3, 0D3ecb295c17f0bbbe, $d4, $d3 ;
	fma_f64	 $d2, 0D3ff7154400000000, $d2, $d3 ;
	shr_u64	 $d1, $d1, 52 ;
	cvt_u32_u64	$s0, $d1 ;
	and_b32	 $s0, $s0, 2047 ;
	cmov_b32	 $s1, $c0, -1083, -1023 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d1, 0D3ff7154400000000, $d4, $d1 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	mov_b64	$d4, $d2 ;
	and_b64	 $d4, $d4, -4294967296 ;
	sub_f64	 $d2, $d2, $d4 ;
	add_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, 0D3ecb295c17f0bbbe ;
	fma_f64	 $d3, 0D3ecb295c17f0bbbe, $d4, $d3 ;
	fma_f64	 $d2, 0D3ff7154400000000, $d2, $d3 ;
	fma_f64	 $d2, 0D3ff7154400000000, $d4, $d2 ;
	cmp_le_b1_f64	 $c0, $d0, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d0, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d1, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plogb_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Plogb_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095039 ;
	shr_u32	 $s2, $s0, 23 ;
	add_u32	 $s2, $s2, -127 ;
	cvt_near_f32_s32	$s2, $s2 ;
	cmov_b32	 $s1, $c0, $s1, $s2 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s2, $s0 ;
	sub_u32	 $s2, -118, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	cmov_b32	 $s2, $c0, 0Fc3160000, $s2 ;
	cmp_lt_b1_u32	 $c1, $s0, 8388608 ;
	cmov_b32	 $s0, $c1, $s2, $s1 ;
	cmov_b32	 $s0, $c0, 0Fff800000, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Plogb_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Plogb_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	cvt_u32_u64	$s0, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	add_u32	 $s0, $s0, 32 ;
	cmov_b32	 $s0, $c0, 64, $s0 ;
	and_b64	 $d0, $d0, 9223372036854775807 ;
	shr_u64	 $d1, $d0, 32 ;
	cvt_u32_u64	$s1, $d1 ;
	firstbit_b32	 $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s1, $c0, 32, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 32 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	cvt_u64_u32	$d1, $s0 ;
	sub_u64	 $d1, -1011, $d1 ;
	cvt_near_f64_s64	$d1, $d1 ;
	mov_b64	$d2, $d0 ;
	cmp_gt_b1_u64	 $c0, $d0, 9218868437227405311 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s0, $d3 ;
	add_u32	 $s0, $s0, -1023 ;
	cvt_near_f64_s32	$d3, $s0 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	cmov_b64	 $d1, $c0, $d1, $d2 ;
	cmp_eq_b1_u64	 $c0, $d0, 0 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pmodf_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Pmodf_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	shr_u32	 $s2, $s1, 23 ;
	sub_u32	 $s2, 150, $s2 ;
	shl_u32	 $s2, -1, $s2 ;
	and_b32	 $s2, $s2, $s1 ;
	and_b32	 $s3, $s1, -2147483648 ;
	extract_u32	 $s4, $s1, 23, 8 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s5, $s4, 31 ;
	cvt_b1_u32	$c0, $s5 ;
	cmov_b32	 $s5, $c0, $s3, $s2 ;
	cmp_gt_b1_s32	 $c1, $s4, 22 ;
	cmov_b32	 $s4, $c1, $s1, $s5 ;
	ld_arg_u32	$s5, [%arg_val1] ;
	st_global_u32	$s4, [$s5] ;
	sub_f32	 $s0, $s0, $s2 ;
	or_b32	 $s0, $s0, $s3 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	cmov_b32	 $s0, $c1, $s3, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pmodf_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Pmodf_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s0, $d2 ;
	sub_u32	 $s1, 1075, $s0 ;
	///shl_u64	 $d2, -1, $s1 ;
	and_b64	 $d2, $d2, $d1 ;
	and_b64	 $d3, $d1, -9223372036854775808 ;
	and_b32	 $s0, $s0, 2047 ;
	add_u32	 $s0, $s0, -1023 ;
	shr_u32	 $s1, $s0, 31 ;
	cvt_b1_u32	$c0, $s1 ;
	cmov_b64	 $d4, $c0, $d3, $d2 ;
	cmp_gt_b1_s32	 $c1, $s0, 51 ;
	cmov_b64	 $d4, $c1, $d1, $d4 ;
	ld_arg_u32	$s0, [%arg_val1] ;
	st_global_u64	$d4, [$s0] ;
	sub_f64	 $d0, $d0, $d2 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cmov_b64	 $d0, $c1, $d3, $d0 ;
	and_b64	 $d2, $d1, 9223372036854775807 ;
	cmp_gt_b1_u64	 $c0, $d2, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnan_f32(arg_f32 %ret_r0) (
	arg_u32 %arg_val0)
{
@__amd_amp_Pnan_f32_entry:
// BB#0:
	ld_arg_u32	$s0, [%arg_val0] ;
	and_b32	 $s0, $s0, 1048575 ;
	or_b32	 $s0, $s0, 2143289344 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnan_f64(arg_f64 %ret_r0) (
	arg_u32 %arg_val0)
{
@__amd_amp_Pnan_f64_entry:
// BB#0:
	ld_arg_u32	$s0, [%arg_val0] ;
	cvt_s64_s32	$d0, $s0 ;
	and_b64	 $d0, $d0, 2251799813685247 ;
	or_b64	 $d0, $d0, 9221120237041090560 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnearbyint_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pnearbyint_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, -2147483648 ;
	or_b32	 $s3, $s2, 1258291200 ;
	add_f32	 $s4, $s3, $s0 ;
	sub_f32	 $s3, $s4, $s3 ;
	and_b32	 $s3, $s3, 2147483647 ;
	or_b32	 $s2, $s3, $s2 ;
	and_b32	 $s3, $s1, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 1258291200 ;
	cmov_b32	 $s2, $c0, $s0, $s2 ;
	or_b32	 $s1, $s1, 4194304 ;
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s0, $c0, $s2, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnearbyint_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pnearbyint_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	and_b64	 $d2, $d1, -9223372036854775808 ;
	or_b64	 $d3, $d2, 4841369599423283200 ;
	add_f64	 $d4, $d3, $d0 ;
	sub_f64	 $d3, $d4, $d3 ;
	and_b64	 $d3, $d3, 9223372036854775807 ;
	or_b64	 $d2, $d3, $d2 ;
	and_b64	 $d3, $d1, 9223372036854775807 ;
	cmp_gt_b1_u64	 $c0, $d3, 4841369599423283200 ;
	cmov_b64	 $d2, $c0, $d0, $d2 ;
	or_b64	 $d1, $d1, 2251799813685248 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnextafter_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pnextafter_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	sub_u32	 $s1, -2147483648, $s0 ;
	shr_u32	 $s2, $s0, 31 ;
	cvt_b1_u32	$c0, $s2 ;
	cmov_b32	 $s1, $c0, $s1, $s0 ;
	ld_arg_f32	$s2, [%arg_val0] ;
	sub_u32	 $s3, -2147483648, $s2 ;
	shr_u32	 $s4, $s2, 31 ;
	cvt_b1_u32	$c0, $s4 ;
	cmov_b32	 $s3, $c0, $s3, $s2 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmov_b32	 $s1, $c0, 1, -1 ;
	add_u32	 $s1, $s1, $s3 ;
	sub_u32	 $s3, -2147483648, $s1 ;
	shr_u32	 $s4, $s1, 31 ;
	cvt_b1_u32	$c0, $s4 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	and_b32	 $s3, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095040 ;
	cmov_b32	 $s1, $c0, $s2, $s1 ;
	and_b32	 $s3, $s0, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095040 ;
	cmov_b32	 $s1, $c0, $s0, $s1 ;
	cmp_ne_b1_u32	 $c0, $s2, $s0 ;
	or_b32	 $s2, $s0, $s2 ;
	and_b32	 $s2, $s2, 2147483647 ;
	cmp_ne_b1_u32	 $c1, $s2, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pnextafter_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
@__amd_amp_Pnextafter_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	sub_u64	 $d1, -9223372036854775808, $d0 ;
	shr_u64	 $d2, $d0, 63 ;
	cvt_b1_u64	$c0, $d2 ;
	cmov_b64	 $d1, $c0, $d1, $d0 ;
	ld_arg_f64	$d2, [%arg_val0] ;
	sub_u64	 $d3, -9223372036854775808, $d2 ;
	shr_u64	 $d4, $d2, 63 ;
	cvt_b1_u64	$c0, $d4 ;
	cmov_b64	 $d3, $c0, $d3, $d2 ;
	cmp_lt_b1_s64	 $c0, $d3, $d1 ;
	cmov_b64	 $d1, $c0, 1, -1 ;
	add_u64	 $d1, $d1, $d3 ;
	sub_u64	 $d3, -9223372036854775808, $d1 ;
	shr_u64	 $d4, $d1, 63 ;
	cvt_b1_u64	$c0, $d4 ;
	cmov_b64	 $d1, $c0, $d3, $d1 ;
	and_b64	 $d3, $d2, 9223372036854775807 ;
	cmp_gt_b1_u64	 $c0, $d3, 9218868437227405312 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	and_b64	 $d3, $d0, 9223372036854775807 ;
	cmp_gt_b1_u64	 $c0, $d3, 9218868437227405312 ;
	cmov_b64	 $d1, $c0, $d0, $d1 ;
	cmp_ne_b1_u64	 $c0, $d2, $d0 ;
	or_b64	 $d2, $d0, $d2 ;
	and_b64	 $d2, $d2, 9223372036854775807 ;
	cmp_ne_b1_u64	 $c1, $d2, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ppow_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Ppow_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, 2147483647 ;
	shr_u32	 $s2, $s1, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s3, $s1, 1065353216 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	cmov_b32	 $s4, $c0, $s3, $s1 ;
	and_b32	 $s5, $s4, 8323072 ;
	shl_u32	 $s6, $s4, 1 ;
	and_b32	 $s6, $s6, 65536 ;
	add_u32	 $s5, $s6, $s5 ;
	or_b32	 $s6, $s5, 1056964608 ;
	and_b32	 $s4, $s4, 8388607 ;
	or_b32	 $s4, $s4, 1056964608 ;
	sub_f32	 $s4, $s6, $s4 ;
	shr_u32	 $s5, $s5, 13 ;
	//ldas_global_u32	$s6, [&__math32_LOG_INV_TBL_EP] ;
	add_u32	 $s6, $s6, $s5 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	mul_f32	 $s7, $s4, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s4, $s7 ;
	mad_f32	 $s8, $s6, 0F3e800000, 0F3eaaaaab ;
	mad_f32	 $s8, $s6, $s8, 0F3f000000 ;
	mul_f32	 $s9, $s6, $s6 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s4, $s4, $s6 ;
	add_f32	 $s4, $s4, $s7 ;
	add_f32	 $s4, $s8, $s4 ;
	neg_f32	 $s4, $s4 ;
	add_u32	 $s2, $s2, -127 ;
	shr_s32	 $s3, $s3, 23 ;
	add_u32	 $s3, $s3, -253 ;
	cmov_b32	 $s2, $c0, $s3, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s3, $s2, 0F3805fdf4, $s4 ;
	//ldas_global_u32	$s4, [&__math32_LOGE_TBL] ;
	add_u32	 $s4, $s4, $s5 ;
	ld_readonly_f32	$s5, [$s4 + 4] ;
	add_f32	 $s3, $s3, $s5 ;
	mov_b32	$s5, $s1 ;
	sub_f32	 $s5, 0F3f800000, $s5 ;
	mul_f32	 $s7, $s5, $s5 ;
	mul_f32	 $s8, $s7, $s5 ;
	mad_f32	 $s9, $s5, 0F3e124925, 0F3e2aaaab ;
	mad_f32	 $s9, $s5, $s9, 0F3e4ccccd ;
	mad_f32	 $s9, $s5, $s9, 0F3e800000 ;
	mad_f32	 $s9, $s5, $s9, 0F3eaaaaab ;
	mul_f32	 $s8, $s9, $s8 ;
	neg_f32	 $s9, $s8 ;
	abs_f32	 $s10, $s5 ;
	cmp_lt_b1_f32	 $c0, $s10, 0F3d800000 ;
	cmov_b32	 $s9, $c0, $s9, $s3 ;
	sub_f32	 $s3, $s3, $s6 ;
	mul_f32	 $s7, $s7, 0Fbf000000 ;
	sub_f32	 $s8, $s7, $s8 ;
	cmov_b32	 $s10, $c0, $s8, $s3 ;
	neg_f32	 $s6, $s6 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	sub_f32	 $s6, $s10, $s6 ;
	sub_f32	 $s6, $s9, $s6 ;
	ld_readonly_f32	$s4, [$s4] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s4 ;
	add_f32	 $s3, $s2, $s3 ;
	sub_f32	 $s4, $s8, $s5 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	neg_f32	 $s4, $s5 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	sub_f32	 $s2, $s2, $s3 ;
	add_f32	 $s2, $s2, $s10 ;
	add_f32	 $s2, $s6, $s2 ;
	mov_b32	$s4, $s3 ;
	and_b32	 $s4, $s4, -4096 ;
	sub_f32	 $s3, $s3, $s4 ;
	add_f32	 $s2, $s2, $s3 ;
	ld_arg_f32	$s3, [%arg_val1] ;
	mov_b32	$s5, $s3 ;
	and_b32	 $s6, $s5, -4096 ;
	sub_f32	 $s3, $s3, $s6 ;
	mul_f32	 $s7, $s3, $s2 ;
	mad_f32	 $s3, $s4, $s3, $s7 ;
	mad_f32	 $s2, $s2, $s6, $s3 ;
	mad_f32	 $s3, $s6, $s4, $s2 ;
	neg_f32	 $s7, $s3 ;
	mad_f32	 $s4, $s6, $s4, $s7 ;
	add_f32	 $s2, $s4, $s2 ;
	mul_f32	 $s4, $s3, 0F42b8aa3b ;
	cvt_zeroi_s32_f32	$s4, $s4 ;
	cvt_near_f32_s32	$s6, $s4 ;
	mad_f32	 $s7, $s6, 0Fbc310000, $s3 ;
	mad_f32	 $s6, $s6, 0Fb7e42fef, $s7 ;
	add_f32	 $s6, $s6, $s2 ;
	mad_f32	 $s7, $s6, 0F3d2aaaab, 0F3e2aaaab ;
	mad_f32	 $s7, $s7, $s6, 0F3f000000 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s6, $s7, $s8, $s6 ;
	and_b32	 $s7, $s4, 63 ;
	shl_u32	 $s7, $s7, 3 ;
	//ldas_global_u32	$s8, [&__math32_EXP_TBL_EP] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	mad_f32	 $s8, $s8, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s6, $s7, $s6, $s8 ;
	add_f32	 $s6, $s6, $s7 ;
	shr_s32	 $s7, $s4, 6 ;
	add_u32	 $s8, $s7, 21 ;
	shl_u32	 $s8, 1, $s8 ;
	mul_f32	 $s8, $s6, $s8 ;
	shl_u32	 $s4, $s4, 17 ;
	and_b32	 $s4, $s4, -8388608 ;
	add_u32	 $s4, $s6, $s4 ;
	cmp_lt_b1_s32	 $c0, $s7, -125 ;
	cmov_b32	 $s4, $c0, $s8, $s4 ;
	cmp_gt_b1_f32	 $c0, $s2, 0Fb482e308 ;
	cmp_eq_b1_f32	 $c1, $s3, 0F42b17218 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_gt_b1_f32	 $c1, $s3, 0F42b17218 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, 0F7f800000, $s4 ;
	cmp_lt_b1_f32	 $c0, $s3, 0Fc2ce8ed0 ;
	cmov_b32	 $s2, $c0, 0F00000000, $s2 ;
	and_b32	 $s3, $s5, 2147483647 ;
	shr_u32	 $s4, $s3, 23 ;
	sub_u32	 $s6, 150, $s4 ;
	shl_u32	 $s6, 1, $s6 ;
	and_b32	 $s7, $s6, $s5 ;
	cmp_eq_b1_u32	 $c0, $s7, 0 ;
	cmov_b32	 $s7, $c0, 2, 1 ;
	add_u32	 $s6, $s6, -1 ;
	and_b32	 $s6, $s6, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	cmov_b32	 $s6, $c0, $s7, 0 ;
	add_u32	 $s4, $s4, -126 ;
	cmp_lt_b1_s32	 $c0, $s4, 1 ;
	cmov_b32	 $s6, $c0, 0, $s6 ;
	cmp_gt_b1_s32	 $c0, $s4, 24 ;
	cmov_b32	 $s4, $c0, 2, $s6 ;
	cmp_eq_b1_u32	 $c0, $s4, 1 ;
	cmp_ne_b1_u32	 $c1, $s0, $s1 ;
	and_b1	 $c1, $c0, $c1 ;
	cmov_b32	 $s6, $c1, 0Fbf800000, 0F3f800000 ;
	mul_f32	 $s2, $s2, $s6 ;
	cmp_eq_b1_u32	 $c1, $s0, $s1 ;
	cvt_u32_b1	$s6, $c1 ;
	or_b32	 $s6, $s4, $s6 ;
	cmp_eq_b1_u32	 $c2, $s6, 0 ;
	cmov_b32	 $s2, $c2, 2143289344, $s2 ;
	cmp_eq_b1_u32	 $c2, $s5, -8388608 ;
	cmp_lt_b1_u32	 $c3, $s1, 1065353216 ;
	and_b1	 $c4, $c3, $c2 ;
	cmov_b32	 $s2, $c4, 2139095040, $s2 ;
	cmp_gt_b1_u32	 $c4, $s1, 1065353216 ;
	and_b1	 $c5, $c4, $c2 ;
	cmov_b32	 $s2, $c5, 0, $s2 ;
	cmp_eq_b1_u32	 $c5, $s5, 2139095040 ;
	and_b1	 $c3, $c3, $c5 ;
	cmov_b32	 $s2, $c3, 0, $s2 ;
	and_b1	 $c3, $c4, $c5 ;
	cmov_b32	 $s2, $c3, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c3, $s5, $s3 ;
	cvt_u32_b1	$s6, $c3 ;
	or_b32	 $s6, $s6, $s1 ;
	cmp_eq_b1_u32	 $c4, $s6, 0 ;
	and_b1	 $c5, $c4, $c0 ;
	cmov_b32	 $s6, $c1, 2139095040, -8388608 ;
	cmov_b32	 $s2, $c5, $s6, $s2 ;
	cmp_ne_b1_u32	 $c5, $s4, 1 ;
	and_b1	 $c4, $c4, $c5 ;
	cmov_b32	 $s2, $c4, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c4, $s1, 0 ;
	and_b1	 $c6, $c4, $c3 ;
	and_b1	 $c7, $c6, $c0 ;
	cmov_b32	 $s4, $c1, 0, -2147483648 ;
	cmov_b32	 $s2, $c7, $s4, $s2 ;
	and_b1	 $c1, $c6, $c5 ;
	cmov_b32	 $s2, $c1, 0, $s2 ;
	and_b1	 $c1, $c4, $c2 ;
	cmov_b32	 $s2, $c1, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c1, $s0, -1082130432 ;
	cmp_eq_b1_u32	 $c2, $s3, 2139095040 ;
	and_b1	 $c1, $c1, $c2 ;
	cmov_b32	 $s2, $c1, 1065353216, $s2 ;
	cmp_ne_b1_u32	 $c1, $s5, $s3 ;
	cmp_eq_b1_u32	 $c2, $s0, -8388608 ;
	and_b1	 $c4, $c2, $c1 ;
	and_b1	 $c6, $c4, $c0 ;
	cmov_b32	 $s2, $c6, -2147483648, $s2 ;
	and_b1	 $c4, $c4, $c5 ;
	cmov_b32	 $s2, $c4, 0, $s2 ;
	and_b1	 $c2, $c2, $c3 ;
	and_b1	 $c0, $c2, $c0 ;
	cmov_b32	 $s2, $c0, -8388608, $s2 ;
	and_b1	 $c0, $c2, $c5 ;
	cmov_b32	 $s2, $c0, 2139095040, $s2 ;
	cmp_eq_b1_u32	 $c0, $s0, 2139095040 ;
	and_b1	 $c1, $c0, $c1 ;
	cmov_b32	 $s2, $c1, 0, $s2 ;
	and_b1	 $c0, $c0, $c3 ;
	cmov_b32	 $s2, $c0, 2139095040, $s2 ;
	cmp_gt_b1_u32	 $c0, $s1, 2139095040 ;
	cmov_b32	 $s1, $c0, $s0, $s2 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095040 ;
	cmov_b32	 $s1, $c0, $s5, $s1 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s1, $c0, 0F3f800000, $s1 ;
	cmp_eq_b1_u32	 $c0, $s0, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ppow_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
	spill_u32 %stack[6];
@__amd_amp_Ppow_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	and_b64	 $d1, $d0, 9223372036854775807 ;
	st_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s0, $d2 ;
	cmp_ne_b1_u32	 $c0, $s0, 0 ;
	and_b64	 $d2, $d0, 4503599627370495 ;
	or_b64	 $d3, $d2, 4607182418800017408 ;
	add_f64	 $d3, $d3, 0Dbff0000000000000 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d2, $c0, $d2, $d4 ;
	and_b64	 $d4, $d2, 4486007441326080 ;
	shl_u64	 $d5, $d2, 1 ;
	and_b64	 $d5, $d5, 17592186044416 ;
	add_u64	 $d4, $d5, $d4 ;
	shr_u64	 $d5, $d4, 44 ;
	cvt_u32_u64	$s1, $d5 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_LOG_F_INV_TBL] ;
	add_u32	 $s2, $s2, $s1 ;
	ld_readonly_f64	$d5, [$s2 + 8] ;
	ld_readonly_f64	$d6, [$s2] ;
	add_f64	 $d5, $d6, $d5 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	or_b64	 $d2, $d2, 4602678819172646912 ;
	sub_f64	 $d2, $d4, $d2 ;
	mul_f64	 $d6, $d5, $d2 ;
	and_b64	 $d6, $d6, -134217728 ;
	mul_f64	 $d7, $d6, 0D3fe0000000000000 ;
	mul_f64	 $d7, $d7, $d6 ;
	add_f64	 $d0, $d6, $d7 ;
	sub_f64	 $d1, $d6, $d0 ;
	add_f64	 $d1, $d1, $d7 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d2, $d4, $d6, $d2 ;
	mul_f64	 $d2, $d2, $d5 ;
	add_f64	 $d4, $d6, $d2 ;
	fma_f64	 $d5, $d4, 0D3fc2492492492492, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc999999999999a ;
	fma_f64	 $d5, $d4, $d5, 0D3fd0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3fd5555555555555 ;
	mul_f64	 $d5, $d5, $d4 ;
	mul_f64	 $d5, $d5, $d4 ;
	mul_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d5, $d2, 0D3fe0000000000000 ;
	fma_f64	 $d4, $d5, $d2, $d4 ;
	fma_f64	 $d4, $d6, $d2, $d4 ;
	add_f64	 $d2, $d4, $d2 ;
	add_f64	 $d1, $d2, $d1 ;
	//ldas_global_u32	$s2, [&__math64_POWLOG_TBL] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d2, [$s1 + 8] ;
	add_u32	 $s0, $s0, -1023 ;
	extract_u64	 $d3, $d3, 52, 11 ;
	add_u64	 $d3, $d3, 4294965251 ;
	cvt_u32_u64	$s2, $d3 ;
	cmov_b32	 $s0, $c0, $s0, $s2 ;
	cvt_near_f64_s32	$d3, $s0 ;
	fma_f64	 $d2, $d3, 0D3e6efa39ef35793c, $d2 ;
	sub_f64	 $d1, $d2, $d1 ;
	sub_f64	 $d2, $d1, $d0 ;
	add_f64	 $d0, $d2, $d0 ;
	sub_f64	 $d0, $d1, $d0 ;
	ld_readonly_f64	$d1, [$s1] ;
	fma_f64	 $d1, $d3, 0D3fe62e42e0000000, $d1 ;
	add_f64	 $d3, $d2, $d1 ;
	sub_f64	 $d1, $d1, $d3 ;
	add_f64	 $d1, $d1, $d2 ;
	add_f64	 $d0, $d1, $d0 ;
	mov_b64	$d1, $d3 ;
	and_b64	 $d1, $d1, -134217728 ;
	sub_f64	 $d2, $d3, $d1 ;
	add_f64	 $d0, $d0, $d2 ;
	ld_arg_f64	$d2, [%arg_val1] ;
	mov_b64	$d3, $d2 ;
	and_b64	 $d4, $d3, -134217728 ;
	sub_f64	 $d2, $d2, $d4 ;
	mul_f64	 $d5, $d2, $d0 ;
	fma_f64	 $d0, $d4, $d0, $d5 ;
	fma_f64	 $d0, $d2, $d1, $d0 ;
	fma_f64	 $d2, $d4, $d1, $d0 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d1, $d4, $d1, $d5 ;
	add_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d1, $s0 ;
	fma_f64	 $d4, $d1, 0Dbf862e42f0000000, $d2 ;
	mul_f64	 $d1, $d1, 0Dbdfdf473de6af278 ;
	add_f64	 $d1, $d4, $d1 ;
	add_f64	 $d0, $d1, $d0 ;
	fma_f64	 $d1, $d0, 0D3f56c1728d739765, 0D3f811115b7aa905e ;
	fma_f64	 $d1, $d0, $d1, 0D3fa5555555545d4e ;
	fma_f64	 $d1, $d0, $d1, 0D3fc5555555548f7c ;
	fma_f64	 $d1, $d0, $d1, 0D3fe0000000000000 ;
	mul_f64	 $d4, $d0, $d0 ;
	fma_f64	 $d0, $d4, $d1, $d0 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d1, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d1 ;
	fma_f64	 $d0, $d5, $d0, $d1 ;
	add_f64	 $d0, $d0, $d4 ;
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d1, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c0, $d1, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d1, $c0, $d1, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	extract_u64	 $d5, $d0, 52, 11 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d4, $d0 ;
	or_b64	 $d0, $d0, $d1 ;
	cmp_gt_b1_f64	 $c0, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c0, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	and_b64	 $d1, $d3, 9223372036854775807 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s0, $d2 ;
	sub_u32	 $s1, 1075, $s0 ;
	///shl_u64	 $d2, 1, $s1 ;
	add_u64	 $d4, $d2, 9223372036854775807 ;
	and_b64	 $d4, $d4, $d1 ;
	cmp_eq_b1_u64	 $c0, $d4, 0 ;
	and_b64	 $d4, $d2, $d1 ;
	neg_s64	 $d2, $d2 ;
	and_b64	 $d2, $d4, $d2 ;
	cmp_eq_b1_u64	 $c1, $d2, 0 ;
	cmov_b32	 $s1, $c1, 2, 1 ;
	cmov_b32	 $s1, $c0, $s1, 0 ;
	add_u32	 $s2, $s0, -1022 ;
	cmp_gt_b1_s32	 $c0, $s2, 53 ;
	cmp_lt_b1_s32	 $c1, $s2, 1 ;
	cmov_b32	 $s2, $c1, 0, 2 ;
	cmov_b32	 $s2, $c0, 2, $s2 ;
	add_u32	 $s0, $s0, -1023 ;
	cmp_lt_b1_u32	 $c0, $s0, 53 ;
	cmov_b32	 $s0, $c0, $s1, $s2 ;
	cmp_eq_b1_u32	 $c0, $s0, 1 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	ld_spill_u64	$d4, [%stack][8] ; // 8-byte Folded Reload
	cmp_ne_b1_u64	 $c1, $d2, $d4 ;
	and_b1	 $c1, $c0, $c1 ;
	cmov_b64	 $d5, $c1, 0Dbff0000000000000, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d5 ;
	cmp_eq_b1_u64	 $c1, $d2, $d4 ;
	cvt_u32_b1	$s1, $c1 ;
	or_b32	 $s1, $s0, $s1 ;
	cmp_eq_b1_u32	 $c2, $s1, 0 ;
	cmov_b64	 $d0, $c2, 9221120237041090560, $d0 ;
	cmp_eq_b1_u64	 $c2, $d3, -4503599627370496 ;
	cmp_lt_b1_u64	 $c3, $d2, 4607182418800017408 ;
	and_b1	 $c4, $c3, $c2 ;
	cmov_b64	 $d0, $c4, 9218868437227405312, $d0 ;
	cmp_gt_b1_u64	 $c4, $d2, 4607182418800017408 ;
	and_b1	 $c5, $c4, $c2 ;
	cmov_b64	 $d0, $c5, 0, $d0 ;
	cmp_eq_b1_u64	 $c5, $d3, 9218868437227405312 ;
	and_b1	 $c3, $c3, $c5 ;
	cmov_b64	 $d0, $c3, 0, $d0 ;
	and_b1	 $c3, $c4, $c5 ;
	cmov_b64	 $d0, $c3, 9218868437227405312, $d0 ;
	cmp_ne_b1_u64	 $c3, $d1, $d3 ;
	cvt_u32_b1	$s1, $c3 ;
	st_spill_u32	$s1, [%stack][16] ; // 4-byte Folded Reload
	cmp_eq_b1_u64	 $c4, $d2, 0 ;
	and_b1	 $c5, $c4, $c3 ;
	and_b1	 $c6, $c5, $c0 ;
	cmov_b64	 $d5, $c1, 9218868437227405312, -4503599627370496 ;
	cmov_b64	 $d0, $c6, $d5, $d0 ;
	cmp_ne_b1_u32	 $c6, $s0, 1 ;
	and_b1	 $c5, $c5, $c6 ;
	cmov_b64	 $d0, $c5, 9218868437227405312, $d0 ;
	cmp_eq_b1_u64	 $c5, $d1, $d3 ;
	and_b1	 $c7, $c4, $c5 ;
	and_b1	 $c3, $c7, $c0 ;
	cmov_b64	 $d5, $c1, 0, -9223372036854775808 ;
	cmov_b64	 $d0, $c3, $d5, $d0 ;
	and_b1	 $c1, $c7, $c6 ;
	cmov_b64	 $d0, $c1, 0, $d0 ;
	and_b1	 $c1, $c4, $c2 ;
	cmov_b64	 $d0, $c1, 9218868437227405312, $d0 ;
	cmp_eq_b1_u64	 $c1, $d4, -4616189618054758400 ;
	cmp_eq_b1_u64	 $c2, $d1, 9218868437227405312 ;
	and_b1	 $c1, $c1, $c2 ;
	cmov_b64	 $d0, $c1, 4607182418800017408, $d0 ;
	cmp_eq_b1_u64	 $c1, $d4, -4503599627370496 ;
	ld_spill_u32	$s0, [%stack][16] ; // 4-byte Folded Reload
	cvt_b1_u32	$c3, $s0 ;
	and_b1	 $c2, $c1, $c3 ;
	and_b1	 $c4, $c2, $c0 ;
	cmov_b64	 $d0, $c4, -9223372036854775808, $d0 ;
	and_b1	 $c2, $c2, $c6 ;
	cmov_b64	 $d0, $c2, 0, $d0 ;
	and_b1	 $c1, $c1, $c5 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, -4503599627370496, $d0 ;
	and_b1	 $c0, $c1, $c6 ;
	cmov_b64	 $d0, $c0, 9218868437227405312, $d0 ;
	cmp_eq_b1_u64	 $c0, $d4, 9218868437227405312 ;
	and_b1	 $c1, $c0, $c3 ;
	cmov_b64	 $d0, $c1, 0, $d0 ;
	and_b1	 $c0, $c0, $c5 ;
	cmov_b64	 $d0, $c0, 9218868437227405312, $d0 ;
	cmp_gt_b1_u64	 $c0, $d2, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d4, $d0 ;
	cmp_gt_b1_u64	 $c0, $d1, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	cmp_eq_b1_u64	 $c0, $d1, 0 ;
	cmov_b64	 $d0, $c0, 0D3ff0000000000000, $d0 ;
	cmp_eq_b1_u64	 $c0, $d4, 4607182418800017408 ;
	cmov_b64	 $d0, $c0, 0D3ff0000000000000, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Prcbrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Prcbrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	shr_u32	 $s3, $s2, 23 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	or_b32	 $s2, $s2, 1065353216 ;
	add_f32	 $s2, $s2, 0Fbf800000 ;
	cmov_b32	 $s2, $c0, $s2, $s0 ;
	extract_u32	 $s4, $s2, 17, 1 ;
	and_b32	 $s5, $s2, 8388607 ;
	shr_u32	 $s6, $s5, 18 ;
	or_b32	 $s6, $s6, 32 ;
	add_u32	 $s4, $s6, $s4 ;
	cvt_near_f32_s32	$s6, $s4 ;
	mul_f32	 $s6, $s6, 0Fbc800000 ;
	or_b32	 $s5, $s5, 1056964608 ;
	add_f32	 $s5, $s5, $s6 ;
	add_u32	 $s4, $s4, -32 ;
	shl_u32	 $s6, $s4, 2 ;
	//ldas_global_u32	$s7, [&__math32_RCBRT_TBL_INV_F] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s6, [$s6] ;
	mul_f32	 $s5, $s5, $s6 ;
	fma_f32	 $s6, 0Fbe30fcd7, $s5, 0F3e638e39 ;
	fma_f32	 $s6, $s6, $s5, 0Fbeaaaaab ;
	fma_f32	 $s5, $s6, $s5, 0F3f800000 ;
	shl_u32	 $s4, $s4, 3 ;
	//ldas_global_u32	$s6, [&__math32_RCBRT_TBL_F] ;
	add_u32	 $s4, $s6, $s4 ;
	ld_readonly_f32	$s6, [$s4 + 4] ;
	shr_u32	 $s2, $s2, 23 ;
	add_u32	 $s7, $s2, -253 ;
	add_u32	 $s8, $s3, -127 ;
	cmov_b32	 $s7, $c0, $s7, $s8 ;
	add_u32	 $s2, $s2, 2 ;
	cvt_u64_u32	$d0, $s2 ;
	mul_u64	 $d0, $d0, 2863311531 ;
	shr_u64	 $d0, $d0, 33 ;
	cvt_u32_u64	$s2, $d0 ;
	add_u32	 $s2, $s2, -85 ;
	add_u32	 $s3, $s3, 2 ;
	cvt_u64_u32	$d0, $s3 ;
	mul_u64	 $d0, $d0, 2863311531 ;
	shr_u64	 $d0, $d0, 33 ;
	cvt_u32_u64	$s3, $d0 ;
	add_u32	 $s3, $s3, -43 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	mad_u32	 $s3, $s2, -3, $s7 ;
	shl_u32	 $s3, $s3, 3 ;
	//ldas_global_u32	$s7, [&__math32_RCBRT_TBL_REM_F] ;
	add_u32	 $s3, $s3, $s7 ;
	ld_readonly_f32	$s7, [$s3 + 20] ;
	mul_f32	 $s8, $s6, $s7 ;
	ld_readonly_f32	$s3, [$s3 + 16] ;
	fma_f32	 $s6, $s6, $s3, $s8 ;
	ld_readonly_f32	$s4, [$s4] ;
	fma_f32	 $s6, $s7, $s4, $s6 ;
	mul_f32	 $s6, $s5, $s6 ;
	mul_f32	 $s3, $s4, $s3 ;
	fma_f32	 $s3, $s5, $s3, $s6 ;
	sub_u32	 $s2, 127, $s2 ;
	shl_u32	 $s2, $s2, 23 ;
	mul_f32	 $s2, $s3, $s2 ;
	copysign_f32	 $s2, $s2, $s0 ;
	or_b32	 $s1, $s1, 4194304 ;
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s3, $c0 ;
	and_b32	 $s3, $s3, 1 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s1, $c0, $s2, $s1 ;
	cmp_eq_b1_f32	 $c0, $s0, 0F00000000 ;
	cvt_u32_b1	$s2, $c0 ;
	or_b32	 $s2, $s3, $s2 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	cmov_b32	 $s0, $c0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Prcbrt_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Prcbrt_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	or_b64	 $d2, $d1, 4607182418800017408 ;
	add_f64	 $d2, $d2, 0Dbff0000000000000 ;
	shr_u64	 $d3, $d1, 32 ;
	cvt_u32_u64	$s0, $d3 ;
	shr_s32	 $s0, $s0, 20 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	and_b64	 $d1, $d1, 4503599627370495 ;
	shr_u64	 $d3, $d1, 43 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 1 ;
	shr_u64	 $d3, $d1, 44 ;
	cvt_u32_u64	$s2, $d3 ;
	or_b32	 $s2, $s2, 256 ;
	add_u32	 $s1, $s2, $s1 ;
	cvt_near_f64_s32	$d3, $s1 ;
	mul_f64	 $d3, $d3, 0Dbf60000000000000 ;
	or_b64	 $d4, $d1, 4602678819172646912 ;
	add_f64	 $d3, $d4, $d3 ;
	add_u32	 $s1, $s1, -256 ;
	shl_u32	 $s2, $s1, 3 ;
	//ldas_global_u32	$s3, [&__math64_CBRT_TBL_INV] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_f64	$d4, [$s2] ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d4, 0D3fbc67c9ff9c1ce0, $d3, 0Dbfbff4c33f8fa07c ;
	fma_f64	 $d4, $d4, $d3, 0D3fc26fabb85cb534 ;
	fma_f64	 $d4, $d4, $d3, 0Dbfc61f9add3c0ca4 ;
	fma_f64	 $d4, $d4, $d3, 0D3fcc71c71c71c71c ;
	fma_f64	 $d4, $d4, $d3, 0Dbfd5555555555555 ;
	fma_f64	 $d3, $d4, $d3, 0D3ff0000000000000 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_RCBRT_TBL] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d4, [$s1 + 8] ;
	shr_u64	 $d2, $d2, 32 ;
	cvt_u32_u64	$s2, $d2 ;
	shr_s32	 $s2, $s2, 20 ;
	add_u32	 $s2, $s0, $s2 ;
	add_u32	 $s2, $s2, -2045 ;
	add_u32	 $s0, $s0, -1023 ;
	cmov_b32	 $s0, $c0, $s2, $s0 ;
	cvt_s64_s32	$d2, $s0 ;
	mul_u64	 $d2, $d2, 1431655766 ;
	shr_u64	 $d5, $d2, 63 ;
	cvt_u32_u64	$s2, $d5 ;
	shr_u64	 $d2, $d2, 32 ;
	cvt_u32_u64	$s3, $d2 ;
	add_u32	 $s2, $s3, $s2 ;
	mad_u32	 $s0, $s2, -3, $s0 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s3, [&__math64_RCBRT_TBL_REM] ;
	add_u32	 $s0, $s0, $s3 ;
	ld_readonly_f64	$d2, [$s0 + 40] ;
	mul_f64	 $d5, $d4, $d2 ;
	ld_readonly_f64	$d6, [$s0 + 32] ;
	fma_f64	 $d4, $d4, $d6, $d5 ;
	ld_readonly_f64	$d5, [$s1] ;
	fma_f64	 $d2, $d2, $d5, $d4 ;
	mul_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d4, $d5, $d6 ;
	fma_f64	 $d2, $d3, $d4, $d2 ;
	add_u32	 $s0, $s2, 1023 ;
	cvt_u64_u32	$d3, $s0 ;
	shl_u64	 $d3, $d3, 52 ;
	mul_f64	 $d2, $d2, $d3 ;
	copysign_f64	 $d2, $d2, $d0 ;
	or_b64	 $d1, $d1, 2251799813685248 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Premainder_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Premainder_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	and_b32	 $s1, $s0, 2147483647 ;
	shr_u32	 $s2, $s1, 23 ;
	ld_arg_f32	$s3, [%arg_val0] ;
	add_ftz_f32	$s3, $s3, 0F00000000 ;
	and_b32	 $s4, $s3, 2147483647 ;
	shr_u32	 $s5, $s4, 23 ;
	sub_u32	 $s6, $s5, $s2 ;
	cmp_le_b1_s32	 $c0, $s6, 3 ;
	and_b32	 $s7, $s0, 8388607 ;
	or_b32	 $s7, $s7, 1065353216 ;
	and_b32	 $s8, $s3, 8388607 ;
	or_b32	 $s8, $s8, 1065353216 ;
	cbr	$c0, @BB133_2 ;
@BB133_1:                               // %.preheader1
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -4 ;
	cmp_gt_b1_s32	 $c0, $s6, 3 ;
	cbr	$c0, @BB133_1 ;
@BB133_2:                               // %.loopexit
	cmp_le_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB133_4 ;
@BB133_3:                               // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cmov_b32	 $s9, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s9 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -1 ;
	cmp_gt_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB133_3 ;
@BB133_4:                               // %__remainder_f32.exit
	mov_b32	$s6, $s1 ;
	mov_b32	$s9, $s4 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cmp_gt_b1_f32	 $c1, $s8, $s7 ;
	cvt_u32_b1	$s2, $c1 ;
	cmov_b32	 $s2, $c0, 0, $s2 ;
	cmov_b32	 $s5, $c1, $s7, 0F00000000 ;
	sub_f32	 $s5, $s8, $s5 ;
	cmov_b32	 $s5, $c0, $s9, $s5 ;
	add_f32	 $s8, $s5, $s5 ;
	cmov_b32	 $s6, $c0, $s6, $s7 ;
	cmp_eq_b1_f32	 $c1, $s6, $s8 ;
	cvt_u32_b1	$s7, $c1 ;
	and_b32	 $s2, $s7, $s2 ;
	cmp_lt_b1_f32	 $c1, $s6, $s8 ;
	cvt_u32_b1	$s7, $c1 ;
	or_b32	 $s2, $s2, $s7 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	cmov_b32	 $s2, $c1, 0F00000000, $s6 ;
	sub_f32	 $s2, $s5, $s2 ;
	and_b32	 $s0, $s0, 2139095040 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s0 ;
	mul_f32	 $s0, $s2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s4, $s1 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	xor_b32	 $s2, $s4, $s3 ;
	xor_b32	 $s0, $s2, $s0 ;
	cmp_lt_b1_u32	 $c0, $s4, 2139095040 ;
	cmp_ne_b1_u32	 $c1, $s1, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmp_lt_b1_u32	 $c1, $s1, 2139095041 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s0, $c0, $s0, 0F7fc00000 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Premainder_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
	spill_u32 %stack[10];
@__amd_amp_Premainder_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cvt_u32_u64	$s0, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	add_u32	 $s0, $s0, 32 ;
	cmov_b32	 $s0, $c0, 64, $s0 ;
	shr_u64	 $d1, $d0, 32 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 1048575 ;
	firstbit_b32	 $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s1, $c0, 32, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 32 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	sub_u32	 $s0, 11, $s0 ;
	and_b64	 $d1, $d0, 9223372036854775807 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	ld_arg_f64	$d2, [%arg_val0] ;
	st_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	st_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cvt_u32_u64	$s2, $d2 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	firstbit_b32	 $s2, $s2 ;
	add_u32	 $s2, $s2, 32 ;
	cmov_b32	 $s2, $c0, 64, $s2 ;
	shr_u64	 $d3, $d2, 32 ;
	cvt_u32_u64	$s3, $d3 ;
	and_b32	 $s3, $s3, 1048575 ;
	firstbit_b32	 $s4, $s3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, 32, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 32 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s2, 11, $s2 ;
	and_b64	 $d2, $d2, 9223372036854775807 ;
	st_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s3, $d3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s0, $s2, $s0 ;
	cvt_s64_s32	$d3, $s0 ;
	mul_u64	 $d3, $d3, 1296593901 ;
	shr_u64	 $d4, $d3, 63 ;
	cvt_u32_u64	$s0, $d4 ;
	shr_u64	 $d3, $d3, 32 ;
	cvt_u32_u64	$s2, $d3 ;
	shr_s32	 $s2, $s2, 4 ;
	add_u32	 $s0, $s2, $s0 ;
	max_s32	 $s0, 0, $s0 ;
	mul_u32	 $s2, $s0, 53 ;
	shr_s32	 $s4, $s2, 1 ;
	sub_u32	 $s5, 2147483647, $s4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s6, $d3 ;
	and_b32	 $s6, $s6, 2047 ;
	cmp_lt_b1_s32	 $c0, $s5, $s6 ;
	cmp_gt_b1_s32	 $c1, $s4, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	sub_u32	 $s5, -2147483648, $s4 ;
	cmp_gt_b1_s32	 $c1, $s5, $s6 ;
	cmp_lt_b1_s32	 $c2, $s4, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	add_u32	 $s5, $s4, $s6 ;
	cmov_b32	 $s5, $c1, -2147483648, $s5 ;
	cmov_b32	 $s5, $c0, 2147483647, $s5 ;
	max_s32	 $s5, $s5, 0 ;
	min_s32	 $s5, $s5, 2047 ;
	cvt_u64_u32	$d3, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 2047 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d0, 52, 11 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cvt_u32_u64	$s7, $d3 ;
	and_b32	 $s7, $s7, 2047 ;
	sub_u32	 $s2, $s2, $s4 ;
	add_u32	 $s4, $s7, $s2 ;
	sub_u32	 $s8, -2147483648, $s2 ;
	cmp_gt_b1_s32	 $c1, $s8, $s7 ;
	cmp_lt_b1_s32	 $c2, $s2, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s4, $c1, -2147483648, $s4 ;
	sub_u32	 $s8, 2147483647, $s2 ;
	cmp_lt_b1_s32	 $c1, $s8, $s7 ;
	cmp_gt_b1_s32	 $c2, $s2, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, 2147483647, $s4 ;
	max_s32	 $s2, $s2, 0 ;
	min_s32	 $s2, $s2, 2047 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmp_eq_b1_u32	 $c2, $s2, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s7, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	cmp_ne_b1_u32	 $c3, $s5, 2047 ;
	cmp_ne_b1_u32	 $c4, $s6, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	cmp_ne_b1_u32	 $c4, $s5, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	and_b64	 $d0, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d0, 0 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cmov_b64	 $d4, $c1, $d0, 0 ;
	cmp_eq_b1_u32	 $c0, $s7, 2047 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cvt_u64_u32	$d4, $s2 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	and_b64	 $d5, $d3, 2047 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d4, $d3 ;
	or_b64	 $d0, $d3, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	div_f64	 $d3, $d2, $d0 ;
	cmp_ge_b1_s32	 $c1, $s0, 1 ;
	cbr	$c1, @BB134_2 ;
// BB#1:
	mov_b64	$d4, $d2 ;
	brn	@BB134_4 ;
@BB134_2:
	cmov_b64	 $d5, $c0, 0D3ff0000000000000, 0D3ca0000000000000 ;
	mov_b32	$s2, 0 ;
	mov_b64	$d4, $d2 ;
@BB134_3:                               // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	cvt_zeroi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d6, $d0, $d3 ;
	sub_f64	 $d7, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d7 ;
	sub_f64	 $d4, $d4, $d6 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d3, $d0, $d3, $d6 ;
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d3, $d7, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D0000000000000000 ;
	cmov_b64	 $d4, $c0, $d0, 0D0000000000000000 ;
	add_f64	 $d4, $d3, $d4 ;
	mul_f64	 $d0, $d0, $d5 ;
	div_f64	 $d3, $d4, $d0 ;
	add_u32	 $s2, $s2, 1 ;
	cmp_lt_b1_s32	 $c0, $s2, $s0 ;
	cbr	$c0, @BB134_3 ;
@BB134_4:                               // %__remainder_f64.exit
	ld_spill_u64	$d6, [%stack][32] ; // 8-byte Folded Reload
	ld_spill_u64	$d5, [%stack][24] ; // 8-byte Folded Reload
	xor_b64	 $d6, $d6, $d5 ;
	st_spill_u64	$d6, [%stack][32] ; // 8-byte Folded Reload
	cvt_downi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d7, $d0, $d3 ;
	sub_f64	 $d6, $d4, $d7 ;
	sub_f64	 $d4, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d7 ;
	neg_f64	 $d7, $d7 ;
	fma_f64	 $d7, $d0, $d3, $d7 ;
	sub_f64	 $d4, $d4, $d7 ;
	add_f64	 $d4, $d6, $d4 ;
	cmp_lt_b1_f64	 $c0, $d4, 0D0000000000000000 ;
	cmov_b64	 $d6, $c0, $d0, 0D0000000000000000 ;
	add_f64	 $d4, $d4, $d6 ;
	mul_f64	 $d6, $d0, 0D3fe0000000000000 ;
	cmp_eq_b1_f64	 $c1, $d4, $d6 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_u32_b1	$s2, $c0 ;
	cvt_zeroi_s64_f64	$d3, $d3 ;
	cvt_u32_u64	$s4, $d3 ;
	and_b32	 $s4, $s4, 1 ;
	xor_b32	 $s2, $s2, $s4 ;
	and_b32	 $s0, $s0, $s2 ;
	cmp_gt_b1_f64	 $c0, $d4, $d6 ;
	cvt_u32_b1	$s4, $c0 ;
	or_b32	 $s0, $s0, $s4 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d3, $c0, 0D0000000000000000, $d0 ;
	add_f64	 $d6, $d4, $d4 ;
	cmp_eq_b1_f64	 $c0, $d6, $d0 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, $s2 ;
	cmp_gt_b1_f64	 $c0, $d6, $d0 ;
	cvt_u32_b1	$s2, $c0 ;
	or_b32	 $s0, $s0, $s2 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D7fd0000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d3 ;
	sub_f64	 $d0, $d4, $d0 ;
	cmp_eq_b1_f64	 $c0, $d2, $d1 ;
	cmov_b64	 $d0, $c0, 0, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	xor_b64	 $d3, $d3, $d5 ;
	xor_b64	 $d0, $d3, $d0 ;
	cmp_lt_b1_f64	 $c0, $d2, $d1 ;
	ld_spill_u64	$d3, [%stack][16] ; // 8-byte Folded Reload
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d6, [%stack][32] ; // 8-byte Folded Reload
	cmp_gt_b1_s64	 $c1, $d6, -1 ;
	cmov_b64	 $d4, $c1, 0Dbff0000000000000, 0D3ff0000000000000 ;
	ld_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	fma_f64	 $d4, $d5, $d4, $d3 ;
	mul_f64	 $d6, $d1, 0D3fe0000000000000 ;
	cmp_gt_b1_f64	 $c1, $d2, $d6 ;
	add_f64	 $d2, $d2, $d2 ;
	cmp_gt_b1_f64	 $c2, $d2, $d1 ;
	cmp_lt_b1_u32	 $c3, $s1, 1023 ;
	and_b1	 $c2, $c3, $c2 ;
	or_b1	 $c1, $c2, $c1 ;
	and_b1	 $c0, $c0, $c1 ;
	cmov_b64	 $d0, $c0, $d4, $d0 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	cmp_num_b1_f64	 $c0, $d5, $d5 ;
	cmov_b64	 $d1, $c0, $d3, $d5 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cmp_eq_b1_u32	 $c0, $s3, 2047 ;
	cmov_b64	 $d0, $c0, 0D7ff8000000000000, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Premquo_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1, 
	arg_u32 %arg_val2)
{
@__amd_amp_Premquo_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	add_ftz_f32	$s0, $s0, 0F00000000 ;
	and_b32	 $s1, $s0, 2147483647 ;
	ld_arg_f32	$s2, [%arg_val0] ;
	add_ftz_f32	$s2, $s2, 0F00000000 ;
	and_b32	 $s3, $s2, 2147483647 ;
	shr_u32	 $s4, $s1, 23 ;
	shr_u32	 $s5, $s3, 23 ;
	sub_u32	 $s6, $s5, $s4 ;
	cmp_le_b1_s32	 $c0, $s6, 3 ;
	and_b32	 $s7, $s0, 8388607 ;
	or_b32	 $s7, $s7, 1065353216 ;
	and_b32	 $s8, $s2, 8388607 ;
	or_b32	 $s8, $s8, 1065353216 ;
	mov_b32	$s9, 0 ;
	ld_arg_u32	$s10, [%arg_val2] ;
	cbr	$c0, @BB135_2 ;
@BB135_1:                               // %.preheader2
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cvt_u32_b1	$s11, $c0 ;
	shl_u32	 $s9, $s9, 1 ;
	or_b32	 $s9, $s9, $s11 ;
	shl_u32	 $s9, $s9, 1 ;
	cmov_b32	 $s11, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s11 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cvt_u32_b1	$s11, $c0 ;
	or_b32	 $s9, $s11, $s9 ;
	shl_u32	 $s9, $s9, 1 ;
	cmov_b32	 $s11, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s11 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cvt_u32_b1	$s11, $c0 ;
	or_b32	 $s9, $s11, $s9 ;
	shl_u32	 $s9, $s9, 1 ;
	cmov_b32	 $s11, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s11 ;
	add_f32	 $s8, $s8, $s8 ;
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cvt_u32_b1	$s11, $c0 ;
	or_b32	 $s9, $s11, $s9 ;
	cmov_b32	 $s11, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s11 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -4 ;
	cmp_gt_b1_s32	 $c0, $s6, 3 ;
	cbr	$c0, @BB135_1 ;
@BB135_2:                               // %.loopexit
	cmp_le_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB135_4 ;
@BB135_3:                               // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	cmp_ge_b1_f32	 $c0, $s8, $s7 ;
	cvt_u32_b1	$s11, $c0 ;
	shl_u32	 $s9, $s9, 1 ;
	or_b32	 $s9, $s9, $s11 ;
	cmov_b32	 $s11, $c0, $s7, 0F00000000 ;
	sub_f32	 $s8, $s8, $s11 ;
	add_f32	 $s8, $s8, $s8 ;
	add_u32	 $s6, $s6, -1 ;
	cmp_gt_b1_s32	 $c0, $s6, 0 ;
	cbr	$c0, @BB135_3 ;
@BB135_4:                               // %.exit
	xor_b32	 $s6, $s1, $s0 ;
	xor_b32	 $s2, $s3, $s2 ;
	mov_b32	$s11, $s1 ;
	mov_b32	$s12, $s3 ;
	cmp_lt_b1_u32	 $c0, $s5, $s4 ;
	cmp_gt_b1_f32	 $c1, $s8, $s7 ;
	cvt_u32_b1	$s4, $c1 ;
	shl_u32	 $s5, $s9, 1 ;
	or_b32	 $s4, $s4, $s5 ;
	cmov_b32	 $s4, $c0, 0, $s4 ;
	cmov_b32	 $s5, $c1, $s7, 0F00000000 ;
	sub_f32	 $s5, $s8, $s5 ;
	cmov_b32	 $s5, $c0, $s12, $s5 ;
	add_f32	 $s8, $s5, $s5 ;
	cmov_b32	 $s7, $c0, $s11, $s7 ;
	cmp_eq_b1_f32	 $c1, $s7, $s8 ;
	cvt_u32_b1	$s9, $c1 ;
	and_b32	 $s9, $s9, $s4 ;
	cmp_lt_b1_f32	 $c1, $s7, $s8 ;
	cvt_u32_b1	$s8, $c1 ;
	or_b32	 $s8, $s9, $s8 ;
	add_u32	 $s4, $s8, $s4 ;
	and_b32	 $s4, $s4, 127 ;
	cmp_eq_b1_u32	 $c1, $s3, $s1 ;
	cmov_b32	 $s4, $c1, 1, $s4 ;
	cmp_eq_b1_u32	 $c2, $s2, $s6 ;
	cmov_b32	 $s6, $c2, 1, -1 ;
	mul_u32	 $s4, $s4, $s6 ;
	cmp_lt_b1_u32	 $c2, $s3, 2139095040 ;
	cmp_ne_b1_u32	 $c3, $s1, 0 ;
	and_b1	 $c2, $c3, $c2 ;
	cmp_lt_b1_u32	 $c3, $s1, 2139095041 ;
	and_b1	 $c2, $c2, $c3 ;
	cmov_b32	 $s1, $c2, $s4, 0 ;
	st_global_u32	$s1, [$s10] ;
	cmp_eq_b1_u32	 $c3, $s8, 0 ;
	cmov_b32	 $s1, $c3, 0F00000000, $s7 ;
	sub_f32	 $s1, $s5, $s1 ;
	and_b32	 $s0, $s0, 2139095040 ;
	cmov_b32	 $s0, $c0, 0F3f800000, $s0 ;
	mul_f32	 $s0, $s1, $s0 ;
	cmov_b32	 $s0, $c1, 0, $s0 ;
	xor_b32	 $s0, $s0, $s2 ;
	cmov_b32	 $s0, $c2, $s0, 0F7fc00000 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Premquo_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1, 
	arg_u32 %arg_val2)
{
	spill_u32 %stack[10];
@__amd_amp_Premquo_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	st_spill_u64	$d0, [%stack][32] ; // 8-byte Folded Reload
	cvt_u32_u64	$s0, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	firstbit_b32	 $s0, $s0 ;
	add_u32	 $s0, $s0, 32 ;
	cmov_b32	 $s0, $c0, 64, $s0 ;
	shr_u64	 $d1, $d0, 32 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 1048575 ;
	firstbit_b32	 $s2, $s1 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s1, $c0, 32, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 32 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	sub_u32	 $s0, 11, $s0 ;
	and_b64	 $d1, $d0, 9223372036854775807 ;
	shr_u64	 $d2, $d1, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	ld_arg_f64	$d2, [%arg_val0] ;
	st_spill_u64	$d2, [%stack][16] ; // 8-byte Folded Reload
	st_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cvt_u32_u64	$s2, $d2 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	firstbit_b32	 $s2, $s2 ;
	add_u32	 $s2, $s2, 32 ;
	cmov_b32	 $s2, $c0, 64, $s2 ;
	shr_u64	 $d3, $d2, 32 ;
	cvt_u32_u64	$s3, $d3 ;
	and_b32	 $s3, $s3, 1048575 ;
	firstbit_b32	 $s4, $s3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, 32, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 32 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s2, 11, $s2 ;
	and_b64	 $d2, $d2, 9223372036854775807 ;
	st_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s3, $d3 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s2, $c0, $s2, $s3 ;
	sub_u32	 $s0, $s2, $s0 ;
	cvt_s64_s32	$d3, $s0 ;
	mul_u64	 $d3, $d3, 1296593901 ;
	shr_u64	 $d4, $d3, 63 ;
	cvt_u32_u64	$s0, $d4 ;
	shr_u64	 $d3, $d3, 32 ;
	cvt_u32_u64	$s2, $d3 ;
	shr_s32	 $s2, $s2, 4 ;
	add_u32	 $s0, $s2, $s0 ;
	max_s32	 $s0, 0, $s0 ;
	mul_u32	 $s2, $s0, 53 ;
	shr_s32	 $s4, $s2, 1 ;
	sub_u32	 $s5, 2147483647, $s4 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s6, $d3 ;
	and_b32	 $s6, $s6, 2047 ;
	cmp_lt_b1_s32	 $c0, $s5, $s6 ;
	cmp_gt_b1_s32	 $c1, $s4, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	sub_u32	 $s5, -2147483648, $s4 ;
	cmp_gt_b1_s32	 $c1, $s5, $s6 ;
	cmp_lt_b1_s32	 $c2, $s4, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	add_u32	 $s5, $s4, $s6 ;
	cmov_b32	 $s5, $c1, -2147483648, $s5 ;
	cmov_b32	 $s5, $c0, 2147483647, $s5 ;
	max_s32	 $s5, $s5, 0 ;
	min_s32	 $s5, $s5, 2047 ;
	cvt_u64_u32	$d3, $s5 ;
	cmp_eq_b1_u32	 $c0, $s6, 2047 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d0, 52, 11 ;
	cmp_eq_b1_u32	 $c1, $s6, 0 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cvt_u32_u64	$s7, $d3 ;
	and_b32	 $s7, $s7, 2047 ;
	sub_u32	 $s2, $s2, $s4 ;
	add_u32	 $s4, $s7, $s2 ;
	sub_u32	 $s8, -2147483648, $s2 ;
	cmp_gt_b1_s32	 $c1, $s8, $s7 ;
	cmp_lt_b1_s32	 $c2, $s2, 1 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s4, $c1, -2147483648, $s4 ;
	sub_u32	 $s8, 2147483647, $s2 ;
	cmp_lt_b1_s32	 $c1, $s8, $s7 ;
	cmp_gt_b1_s32	 $c2, $s2, 0 ;
	and_b1	 $c1, $c2, $c1 ;
	cmov_b32	 $s2, $c1, 2147483647, $s4 ;
	max_s32	 $s2, $s2, 0 ;
	min_s32	 $s2, $s2, 2047 ;
	cmp_eq_b1_u32	 $c1, $s2, 2047 ;
	cmp_eq_b1_u32	 $c2, $s2, 0 ;
	or_b1	 $c1, $c2, $c1 ;
	cmp_eq_b1_u32	 $c2, $s7, 0 ;
	or_b1	 $c1, $c1, $c2 ;
	not_b1	 $c1, $c1 ;
	cmp_ne_b1_u32	 $c3, $s5, 2047 ;
	cmp_ne_b1_u32	 $c4, $s6, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	cmp_ne_b1_u32	 $c4, $s5, 0 ;
	and_b1	 $c3, $c3, $c4 ;
	and_b64	 $d0, $d0, 4503599627370495 ;
	cmov_b64	 $d4, $c3, $d0, 0 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cmov_b64	 $d4, $c1, $d0, 0 ;
	cmp_eq_b1_u32	 $c0, $s7, 2047 ;
	cmov_b64	 $d0, $c0, $d0, $d4 ;
	cvt_u64_u32	$d4, $s2 ;
	cmov_b64	 $d4, $c0, 2047, $d4 ;
	and_b64	 $d5, $d3, 2047 ;
	cmov_b64	 $d4, $c2, $d5, $d4 ;
	shl_u64	 $d4, $d4, 52 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d4, $d3 ;
	or_b64	 $d0, $d3, $d0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	div_f64	 $d3, $d2, $d0 ;
	cmp_ge_b1_s32	 $c1, $s0, 1 ;
	ld_arg_u32	$s2, [%arg_val2] ;
	cbr	$c1, @BB136_2 ;
// BB#1:
	mov_b64	$d4, $d2 ;
	brn	@BB136_4 ;
@BB136_2:
	cmov_b64	 $d5, $c0, 0D3ff0000000000000, 0D3ca0000000000000 ;
	mov_b32	$s4, 0 ;
	mov_b64	$d4, $d2 ;
@BB136_3:                               // %.preheader
                                        // =>This Inner Loop Header: Depth=1
	cvt_zeroi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d6, $d0, $d3 ;
	sub_f64	 $d7, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d7 ;
	sub_f64	 $d4, $d4, $d6 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d3, $d0, $d3, $d6 ;
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d3, $d7, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D0000000000000000 ;
	cmov_b64	 $d4, $c0, $d0, 0D0000000000000000 ;
	add_f64	 $d4, $d3, $d4 ;
	mul_f64	 $d0, $d0, $d5 ;
	div_f64	 $d3, $d4, $d0 ;
	add_u32	 $s4, $s4, 1 ;
	cmp_lt_b1_s32	 $c0, $s4, $s0 ;
	cbr	$c0, @BB136_3 ;
@BB136_4:                               // %.exit
	ld_spill_u64	$d6, [%stack][32] ; // 8-byte Folded Reload
	ld_spill_u64	$d5, [%stack][24] ; // 8-byte Folded Reload
	xor_b64	 $d6, $d6, $d5 ;
	cmp_gt_b1_s64	 $c0, $d6, -1 ;
	cmov_b32	 $s0, $c0, 1, -1 ;
	cvt_downi_f64_f64	 $d3, $d3 ;
	mul_f64	 $d6, $d0, $d3 ;
	sub_f64	 $d7, $d4, $d6 ;
	sub_f64	 $d4, $d4, $d7 ;
	sub_f64	 $d4, $d4, $d6 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d6, $d0, $d3, $d6 ;
	sub_f64	 $d4, $d4, $d6 ;
	add_f64	 $d4, $d7, $d4 ;
	cmp_lt_b1_f64	 $c1, $d4, 0D0000000000000000 ;
	cmov_b64	 $d6, $c1, $d0, 0D0000000000000000 ;
	add_f64	 $d4, $d4, $d6 ;
	mul_f64	 $d6, $d0, 0D3fe0000000000000 ;
	cmp_eq_b1_f64	 $c2, $d4, $d6 ;
	cvt_u32_b1	$s4, $c2 ;
	cvt_u32_b1	$s5, $c1 ;
	cvt_zeroi_s64_f64	$d3, $d3 ;
	cvt_u32_u64	$s6, $d3 ;
	and_b32	 $s6, $s6, 1 ;
	xor_b32	 $s5, $s5, $s6 ;
	and_b32	 $s4, $s4, $s5 ;
	cmp_gt_b1_f64	 $c2, $d4, $d6 ;
	cvt_u32_b1	$s6, $c2 ;
	or_b32	 $s4, $s4, $s6 ;
	add_f64	 $d6, $d4, $d4 ;
	cmp_eq_b1_f64	 $c2, $d6, $d0 ;
	cvt_u32_b1	$s6, $c2 ;
	and_b32	 $s5, $s6, $s5 ;
	cmp_gt_b1_f64	 $c2, $d6, $d0 ;
	cvt_u32_b1	$s6, $c2 ;
	or_b32	 $s5, $s5, $s6 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D7fd0000000000000 ;
	cmov_b32	 $s6, $c2, $s5, $s4 ;
	cvt_u64_u32	$d6, $s6 ;
	cmov_b64	 $d7, $c1, -1, 0 ;
	add_u64	 $d3, $d7, $d3 ;
	add_u64	 $d3, $d3, $d6 ;
	cvt_u32_u64	$s6, $d3 ;
	and_b32	 $s6, $s6, 127 ;
	cmp_eq_b1_f64	 $c1, $d2, $d1 ;
	cmov_b32	 $s6, $c1, 1, $s6 ;
	mul_u32	 $s6, $s6, $s0 ;
	cmp_lt_b1_f64	 $c3, $d2, $d1 ;
	cmov_b32	 $s6, $c3, 0, $s6 ;
	mul_f64	 $d3, $d1, 0D3fe0000000000000 ;
	cmp_gt_b1_f64	 $c4, $d2, $d3 ;
	add_f64	 $d2, $d2, $d2 ;
	cmp_gt_b1_f64	 $c5, $d2, $d1 ;
	cmp_lt_b1_u32	 $c6, $s1, 1023 ;
	and_b1	 $c5, $c6, $c5 ;
	or_b1	 $c4, $c5, $c4 ;
	and_b1	 $c4, $c3, $c4 ;
	cmov_b32	 $s0, $c4, $s0, $s6 ;
	cmp_eq_b1_f64	 $c5, $d1, 0D0000000000000000 ;
	cmov_b32	 $s0, $c5, 0, $s0 ;
	cmp_eq_b1_u32	 $c6, $s1, 2047 ;
	cmov_b32	 $s0, $c6, 0, $s0 ;
	cmp_eq_b1_u32	 $c7, $s3, 2047 ;
	cmov_b32	 $s0, $c7, 0, $s0 ;
	cmov_b64	 $d1, $c0, 0Dbff0000000000000, 0D3ff0000000000000 ;
	ld_spill_u64	$d3, [%stack][16] ; // 8-byte Folded Reload
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d2, $d1, $d3 ;
	st_global_u32	$s0, [$s2] ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b64	 $d6, $c0, 0D0000000000000000, $d0 ;
	cmp_eq_b1_u32	 $c0, $s5, 0 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	cmov_b64	 $d0, $c2, $d0, $d6 ;
	sub_f64	 $d0, $d4, $d0 ;
	cmov_b64	 $d0, $c1, 0, $d0 ;
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	xor_b64	 $d4, $d4, $d5 ;
	xor_b64	 $d0, $d4, $d0 ;
	cmov_b64	 $d0, $c3, $d3, $d0 ;
	cmov_b64	 $d0, $c4, $d1, $d0 ;
	cmov_b64	 $d0, $c5, 0D7ff8000000000000, $d0 ;
	cmp_num_b1_f64	 $c0, $d2, $d2 ;
	cmov_b64	 $d1, $c0, $d3, $d2 ;
	cmov_b64	 $d0, $c6, $d1, $d0 ;
	cmov_b64	 $d0, $c7, 0D7ff8000000000000, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pround_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Pround_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_zeroi_f32_f32	 $s1, $s0 ;
	sub_f32	 $s2, $s0, $s1 ;
	abs_f32	 $s2, $s2 ;
	cmp_ltu_b1_f32	 $c0, $s2, 0F3f000000 ;
	and_b32	 $s0, $s0, -2147483648 ;
	or_b32	 $s0, $s0, 1065353216 ;
	cmov_b32	 $s0, $c0, 0F00000000, $s0 ;
	add_f32	 $s0, $s1, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pround_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Pround_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	and_b64	 $d1, $d0, -9223372036854775808 ;
	shr_u64	 $d2, $d0, 52 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 2047 ;
	add_u32	 $s1, $s1, -1023 ;
	cmp_eq_b1_u32	 $c0, $s1, -1 ;
	cmov_b64	 $d2, $c0, 4607182418800017408, 0 ;
	or_b64	 $d1, $d2, $d1 ;
	add_u32	 $s0, $s0, 1 ;
	///shr_u64	 $d2, 4503599627370495, $s0 ;
	and_b64	 $d3, $d2, $d0 ;
	cmp_eq_b1_u64	 $c0, $d3, 0 ;
	///shr_u64	 $d3, 2251799813685248, $s0 ;
	cmov_b64	 $d3, $c0, 0, $d3 ;
	add_u64	 $d3, $d3, $d0 ;
	not_b64	 $d2, $d2 ;
	and_b64	 $d2, $d3, $d2 ;
	shr_u32	 $s0, $s1, 31 ;
	cvt_b1_u32	$c0, $s0 ;
	cmov_b64	 $d1, $c0, $d1, $d2 ;
	cmp_gt_b1_s32	 $c0, $s1, 51 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Prsqrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Prsqrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	frsqrt_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Prsqrt_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Prsqrt_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	neg_f64	 $d1, $d0 ;
	frsqrt_f64	 $d0, $d0 ;
	mul_f64	 $d2, $d0, $d1 ;
	fma_f64	 $d2, $d2, $d0, 0D4008000000000000 ;
	mul_f64	 $d3, $d0, 0D3fe0000000000000 ;
	mul_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d1, $d2, $d1 ;
	fma_f64	 $d1, $d1, $d2, 0D4008000000000000 ;
	mul_f64	 $d2, $d2, 0D3fe0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	cmp_le_b1_f64	 $c0, $d0, 0D7fefffffffffffff ;
	cmp_gt_b1_f64	 $c1, $d0, 0D0000000000000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pscalb_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_f32 %arg_val1)
{
@__amd_amp_Pscalb_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val1] ;
	cvt_zeroi_s32_f32	$s1, $s0 ;
	ld_arg_f32	$s2, [%arg_val0] ;
	mov_b32	$s3, $s2 ;
	and_b32	 $s4, $s3, 2147483647 ;
	class_f32	 $c0, $s2, 3 ;
	cvt_u32_b1	$s5, $c0 ;
	cvt_b1_u32	$c0, $s5 ;
	cbr	$c0, @BB141_3 ;
// BB#1:
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	cmp_eq_b1_b1	 $c0, $c0, 1 ;
	cbr	$c0, @BB141_3 ;
// BB#2:
	mov_b32	$s0, $s4 ;
	mul_f32	 $s0, $s0, 0F4b800000 ;
	shr_u32	 $s5, $s0, 23 ;
	add_u32	 $s5, $s5, $s1 ;
	shr_u32	 $s6, $s4, 23 ;
	add_u32	 $s7, $s6, $s1 ;
	shl_u32	 $s8, $s7, 23 ;
	and_b32	 $s9, $s3, -2147483648 ;
	mov_b32	$s10, $s9 ;
	or_b32	 $s11, $s9, 2139095040 ;
	and_b32	 $s3, $s3, -2139095041 ;
	or_b32	 $s12, $s8, $s3 ;
	cmp_gt_b1_s32	 $c0, $s7, 254 ;
	cmov_b32	 $s12, $c0, $s11, $s12 ;
	add_u32	 $s8, $s8, 201326592 ;
	or_b32	 $s3, $s8, $s3 ;
	mul_f32	 $s3, $s3, 0F33800000 ;
	cmp_lt_b1_s32	 $c0, $s7, 1 ;
	cmov_b32	 $s3, $c0, $s3, $s12 ;
	cmp_lt_b1_s32	 $c0, $s7, -24 ;
	cmov_b32	 $s3, $c0, $s10, $s3 ;
	and_b32	 $s0, $s0, 8388607 ;
	or_b32	 $s0, $s0, $s9 ;
	shl_u32	 $s7, $s5, 23 ;
	or_b32	 $s0, $s0, $s7 ;
	mul_f32	 $s0, $s0, 0F33800000 ;
	shr_u32	 $s7, $s5, 31 ;
	cvt_b1_u32	$c0, $s7 ;
	cmov_b32	 $s0, $c0, $s10, $s0 ;
	add_u32	 $s5, $s5, -24 ;
	cmp_gt_b1_s32	 $c0, $s5, 254 ;
	cmov_b32	 $s0, $c0, $s11, $s0 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	cmov_b32	 $s3, $c0, $s0, $s3 ;
	brn	@BB141_4 ;
@BB141_3:
	or_b32	 $s3, $s3, 4194304 ;
@BB141_4:                               // %scalbf.exit
	class_f32	 $c0, $s2, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s0, $c0, $s3, $s2 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmp_eq_b1_u32	 $c1, $s4, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, $s2, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pscalb_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_f64 %arg_val1)
{
	spill_u32 %stack[2];
@__amd_amp_Pscalb_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val1] ;
	max_f64	 $d1, $d0, 0Dc0a06a0000000000 ;
	min_f64	 $d1, $d1, 0D40a06a0000000000 ;
	cvt_zeroi_s32_f64	$s0, $d1 ;
	ld_arg_f64	$d1, [%arg_val0] ;
	mov_b64	$d2, $d1 ;
	and_b64	 $d3, $d2, 9223372036854775807 ;
	st_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	cbr	$c0, @BB142_3 ;
// BB#1:
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	cmp_eq_b1_b1	 $c0, $c0, 1 ;
	cbr	$c0, @BB142_3 ;
// BB#2:
	mov_b64	$d0, $d3 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	add_u32	 $s2, $s0, $s1 ;
	mul_f64	 $d0, $d0, 0D4340000000000000 ;
	shr_u64	 $d3, $d0, 52 ;
	cvt_u32_u64	$s3, $d3 ;
	add_u32	 $s3, $s0, $s3 ;
	and_b64	 $d3, $d2, -9223372036854775808 ;
	mov_b64	$d4, $d3 ;
	or_b64	 $d5, $d3, 9218868437227405312 ;
	and_b64	 $d2, $d2, -9218868437227405313 ;
	cvt_u64_u32	$d6, $s2 ;
	shl_u64	 $d6, $d6, 52 ;
	or_b64	 $d6, $d6, $d2 ;
	cmp_gt_b1_s32	 $c0, $s2, 2046 ;
	cmov_b64	 $d6, $c0, $d5, $d6 ;
	add_u32	 $s4, $s2, 53 ;
	cvt_u64_u32	$d7, $s4 ;
	shl_u64	 $d7, $d7, 52 ;
	or_b64	 $d2, $d7, $d2 ;
	mul_f64	 $d2, $d2, 0D3ca0000000000000 ;
	cmp_lt_b1_s32	 $c0, $s2, 1 ;
	cmov_b64	 $d2, $c0, $d2, $d6 ;
	cmp_lt_b1_s32	 $c0, $s2, -53 ;
	cmov_b64	 $d2, $c0, $d4, $d2 ;
	and_b64	 $d0, $d0, 4503599627370495 ;
	or_b64	 $d0, $d0, $d3 ;
	cvt_u64_u32	$d3, $s3 ;
	shl_u64	 $d3, $d3, 52 ;
	or_b64	 $d0, $d0, $d3 ;
	mul_f64	 $d0, $d0, 0D3ca0000000000000 ;
	shr_u32	 $s2, $s3, 31 ;
	cvt_b1_u32	$c0, $s2 ;
	cmov_b64	 $d0, $c0, $d4, $d0 ;
	add_u32	 $s2, $s3, -53 ;
	cmp_gt_b1_s32	 $c0, $s2, 2046 ;
	cmov_b64	 $d0, $c0, $d5, $d0 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmov_b64	 $d2, $c0, $d0, $d2 ;
	brn	@BB142_4 ;
@BB142_3:
	or_b64	 $d2, $d2, 2251799813685248 ;
@BB142_4:                               // %scalb.exit
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	cvt_b1_u32	$c0, $s1 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d1 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cmp_eq_b1_u64	 $c1, $d2, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pscalbn_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1)
{
@__amd_amp_Pscalbn_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	shr_u32	 $s3, $s2, 23 ;
	ld_arg_u32	$s4, [%arg_val1] ;
	add_u32	 $s5, $s3, $s4 ;
	cmp_gt_b1_s32	 $c0, $s5, 254 ;
	shl_u32	 $s6, $s5, 23 ;
	and_b32	 $s7, $s1, -2139095041 ;
	or_b32	 $s8, $s6, $s7 ;
	and_b32	 $s9, $s1, -2147483648 ;
	or_b32	 $s10, $s9, 2139095040 ;
	cmov_b32	 $s8, $c0, $s10, $s8 ;
	cmp_lt_b1_s32	 $c0, $s5, 1 ;
	add_u32	 $s6, $s6, 201326592 ;
	or_b32	 $s6, $s6, $s7 ;
	mul_f32	 $s6, $s6, 0F33800000 ;
	cmov_b32	 $s6, $c0, $s6, $s8 ;
	cmp_lt_b1_s32	 $c0, $s5, -24 ;
	mov_b32	$s5, $s9 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	mov_b32	$s7, $s2 ;
	mul_f32	 $s7, $s7, 0F4b800000 ;
	and_b32	 $s8, $s7, 8388607 ;
	or_b32	 $s8, $s8, $s9 ;
	shr_u32	 $s7, $s7, 23 ;
	add_u32	 $s7, $s7, $s4 ;
	shl_u32	 $s9, $s7, 23 ;
	or_b32	 $s8, $s8, $s9 ;
	mul_f32	 $s8, $s8, 0F33800000 ;
	shr_u32	 $s9, $s7, 31 ;
	cvt_b1_u32	$c0, $s9 ;
	cmov_b32	 $s5, $c0, $s5, $s8 ;
	add_u32	 $s7, $s7, -24 ;
	cmp_gt_b1_s32	 $c0, $s7, 254 ;
	cmov_b32	 $s5, $c0, $s10, $s5 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, $s5, $s6 ;
	or_b32	 $s1, $s1, 4194304 ;
	class_f32	 $c0, $s0, 3 ;
	cvt_u32_b1	$s5, $c0 ;
	cvt_b1_u32	$c0, $s5 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s3, $s1 ;
	class_f32	 $c0, $s0, 516 ;
	cvt_u32_b1	$s3, $c0 ;
	cvt_b1_u32	$c0, $s3 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmp_eq_b1_u32	 $c1, $s2, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Pscalbn_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0, 
	arg_u32 %arg_val1)
{
	spill_u32 %stack[2];
@__amd_amp_Pscalbn_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	mov_b64	$d1, $d0 ;
	and_b64	 $d2, $d1, 9223372036854775807 ;
	shr_u64	 $d3, $d2, 52 ;
	cvt_u32_u64	$s0, $d3 ;
	ld_arg_u32	$s1, [%arg_val1] ;
	add_u32	 $s2, $s0, $s1 ;
	cmp_gt_b1_s32	 $c0, $s2, 2046 ;
	cvt_u64_u32	$d3, $s2 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d4, $d1, -9218868437227405313 ;
	or_b64	 $d3, $d3, $d4 ;
	and_b64	 $d5, $d1, -9223372036854775808 ;
	or_b64	 $d6, $d5, 9218868437227405312 ;
	cmov_b64	 $d3, $c0, $d6, $d3 ;
	cmp_lt_b1_s32	 $c0, $s2, 1 ;
	add_u32	 $s3, $s2, 53 ;
	cvt_u64_u32	$d7, $s3 ;
	shl_u64	 $d7, $d7, 52 ;
	or_b64	 $d4, $d7, $d4 ;
	mul_f64	 $d4, $d4, 0D3ca0000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	cmp_lt_b1_s32	 $c0, $s2, -53 ;
	mov_b64	$d4, $d5 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	st_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d7, $d2 ;
	mul_f64	 $d7, $d7, 0D4340000000000000 ;
	and_b64	 $d3, $d7, 4503599627370495 ;
	or_b64	 $d3, $d3, $d5 ;
	shr_u64	 $d5, $d7, 52 ;
	cvt_u32_u64	$s2, $d5 ;
	add_u32	 $s2, $s2, $s1 ;
	cvt_u64_u32	$d5, $s2 ;
	shl_u64	 $d5, $d5, 52 ;
	or_b64	 $d3, $d3, $d5 ;
	mul_f64	 $d3, $d3, 0D3ca0000000000000 ;
	shr_u32	 $s3, $s2, 31 ;
	cvt_b1_u32	$c0, $s3 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	add_u32	 $s2, $s2, -53 ;
	cmp_gt_b1_s32	 $c0, $s2, 2046 ;
	cmov_b64	 $d3, $c0, $d6, $d3 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	ld_spill_u64	$d4, [%stack][0] ; // 8-byte Folded Reload
	cmov_b64	 $d3, $c0, $d3, $d4 ;
	or_b64	 $d1, $d1, 2251799813685248 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d3, $d1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d1, $c0, $d1, $d0 ;
	cmp_eq_b1_u32	 $c0, $s1, 0 ;
	cmp_eq_b1_u64	 $c1, $d2, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psignbit_f32(arg_u32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Psignbit_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	shr_u32	 $s0, $s0, 31 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psignbit_f64(arg_u32 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Psignbit_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	shr_u64	 $d0, $d0, 63 ;
	cvt_u32_u64	$s0, $d0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psin_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[1];
@__amd_amp_Psin_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	cbr	$c0, @BB147_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB147_3 ;
@BB147_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB147_3:                               // %__sin_f32.exit
	neg_f32	 $s4, $s1 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s1, $s1 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s1 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s1 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s4 ;
	ld_spill_u32	$s3, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s3, $s0, $s3 ;
	and_b32	 $s2, $s2, 2 ;
	cmp_gt_b1_u32	 $c0, $s2, 1 ;
	cvt_u32_b1	$s2, $c0 ;
	shl_u32	 $s2, $s2, 31 ;
	xor_b32	 $s2, $s3, $s2 ;
	xor_b32	 $s1, $s2, $s1 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psin_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[18];
@__amd_amp_Psin_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	abs_f64	 $d0, $d0 ;
	cmp_geu_b1_f64	 $c0, $d0, 0D42e0000000000000 ;
	cbr	$c0, @BB148_2 ;
// BB#1:
	fma_f64	 $d1, $d0, 0D3fe45f306dc9c883, 0D3fe0000000000000 ;
	cvt_zeroi_f64_f64	 $d1, $d1 ;
	mul_f64	 $d2, $d1, 0Dbff921fb54442d18 ;
	neg_f64	 $d3, $d2 ;
	fma_f64	 $d3, 0Dbff921fb54442d18, $d1, $d3 ;
	mul_f64	 $d4, $d1, 0Dbc91a62633145c06 ;
	add_f64	 $d5, $d3, $d4 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d2, $d6, $d2 ;
	sub_f64	 $d2, $d5, $d2 ;
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d5, $d1, 0Db94c1cd129024e08 ;
	add_f64	 $d3, $d5, $d3 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, 0Dbc91a62633145c06, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	neg_f64	 $d4, $d5 ;
	fma_f64	 $d4, 0Db94c1cd129024e08, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d2, $d3 ;
	add_f64	 $d0, $d0, $d6 ;
	add_f64	 $d5, $d0, $d4 ;
	sub_f64	 $d0, $d5, $d0 ;
	sub_f64	 $d0, $d4, $d0 ;
	sub_f64	 $d2, $d4, $d2 ;
	sub_f64	 $d2, $d3, $d2 ;
	add_f64	 $d0, $d0, $d2 ;
	cvt_zeroi_s64_f64	$d1, $d1 ;
	cvt_u32_u64	$s0, $d1 ;
	brn	@BB148_3 ;
@BB148_2:
	mov_b64	$d5, $d0 ;
	shr_s64	 $d5, $d5, 52 ;
	cvt_u32_u64	$s0, $d5 ;
	add_u32	 $s0, $s0, -1023 ;
	shr_s32	 $s0, $s0, 3 ;
	add_u32	 $s0, $s0, 17 ;
	max_s32	 $s0, 23, $s0 ;
	sub_u32	 $s1, 150, $s0 ;
	and_b32	 $s2, $s1, -16 ;
	//ldas_global_u32	$s3, [&__math64_PIBITS] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_u32	$s3, [$s2 + 20] ;
	ld_readonly_u32	$s4, [$s2 + 16] ;
	extract_u32	 $s5, $s1, 2, 2 ;
	cmp_ne_b1_u32	 $c0, $s5, 1 ;
	cmov_b32	 $s6, $c0, $s4, $s3 ;
	ld_readonly_u32	$s7, [$s2 + 24] ;
	cmp_ne_b1_u32	 $c1, $s5, 2 ;
	cmov_b32	 $s6, $c1, $s6, $s7 ;
	ld_readonly_u32	$s8, [$s2 + 28] ;
	cmp_ne_b1_u32	 $c2, $s5, 3 ;
	cmov_b32	 $s5, $c2, $s6, $s8 ;
	cmov_b32	 $s6, $c0, $s3, $s7 ;
	cmov_b32	 $s6, $c1, $s6, $s8 ;
	ld_readonly_u32	$s9, [$s2 + 32] ;
	cmov_b32	 $s6, $c2, $s6, $s9 ;
	bytealign_b32	 $s10, $s6, $s5, $s1 ;
	shr_u32	 $s11, $s10, 16 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s8, $c1, $s8, $s9 ;
	ld_readonly_u32	$s9, [$s2 + 36] ;
	cmov_b32	 $s8, $c2, $s8, $s9 ;
	bytealign_b32	 $s6, $s8, $s6, $s1 ;
	shl_u32	 $s8, $s6, 16 ;
	or_b32	 $s8, $s8, $s11 ;
	cvt_u64_u32	$d5, $s8 ;
	shr_u32	 $s6, $s6, 16 ;
	shl_u32	 $s0, $s0, 3 ;
	or_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_s32	 $c3, $s0, 1018 ;
	cmov_b32	 $s8, $c3, 136, 0 ;
	sub_u32	 $s0, $s8, $s0 ;
	shl_u32	 $s0, $s0, 20 ;
	add_u32	 $s8, $s0, 1278214144 ;
	or_b32	 $s6, $s6, $s8 ;
	cvt_u64_u32	$d1, $s6 ;
	shl_u64	 $d1, $d1, 32 ;
	or_b64	 $d5, $d5, $d1 ;
	cvt_u64_u32	$d1, $s8 ;
	shl_u64	 $d1, $d1, 32 ;
	sub_f64	 $d5, $d5, $d1 ;
	cmov_b64	 $d1, $c3, 0D3770000000000000, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d5, $d0 ;
	neg_f64	 $d2, $d1 ;
	fma_f64	 $d5, $d5, $d0, $d2 ;
	st_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	ld_readonly_u32	$s6, [$s2 + 12] ;
	cmov_b32	 $s8, $c0, $s6, $s4 ;
	cmov_b32	 $s8, $c1, $s8, $s3 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	bytealign_b32	 $s5, $s5, $s7, $s1 ;
	cvt_u64_u32	$d2, $s5 ;
	and_b32	 $s5, $s10, 65535 ;
	add_u32	 $s8, $s0, 1227882496 ;
	or_b32	 $s5, $s5, $s8 ;
	cvt_u64_u32	$d3, $s5 ;
	shl_u64	 $d3, $d3, 32 ;
	or_b64	 $d2, $d2, $d3 ;
	cvt_u64_u32	$d3, $s8 ;
	shl_u64	 $d3, $d3, 32 ;
	sub_f64	 $d5, $d2, $d3 ;
	st_spill_u64	$d5, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d5, $d0 ;
	add_f64	 $d3, $d1, $d2 ;
	sub_f64	 $d1, $d3, $d1 ;
	sub_f64	 $d5, $d2, $d1 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d4, $d5, $d1 ;
	ld_readonly_u32	$s5, [$s2 + 8] ;
	ld_readonly_u32	$s8, [$s2 + 4] ;
	cmov_b32	 $s9, $c0, $s8, $s5 ;
	cmov_b32	 $s9, $c1, $s9, $s6 ;
	cmov_b32	 $s9, $c2, $s9, $s4 ;
	cmov_b32	 $s10, $c0, $s5, $s6 ;
	cmov_b32	 $s4, $c1, $s10, $s4 ;
	cmov_b32	 $s3, $c2, $s4, $s3 ;
	bytealign_b32	 $s4, $s3, $s9, $s1 ;
	shr_u32	 $s10, $s4, 16 ;
	bytealign_b32	 $s3, $s7, $s3, $s1 ;
	shl_u32	 $s7, $s3, 16 ;
	or_b32	 $s7, $s7, $s10 ;
	cvt_u64_u32	$d6, $s7 ;
	shr_u32	 $s3, $s3, 16 ;
	add_u32	 $s7, $s0, 1177550848 ;
	or_b32	 $s3, $s3, $s7 ;
	cvt_u64_u32	$d7, $s3 ;
	shl_u64	 $d7, $d7, 32 ;
	or_b64	 $d6, $d6, $d7 ;
	cvt_u64_u32	$d7, $s7 ;
	shl_u64	 $d7, $d7, 32 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	mul_f64	 $d5, $d6, $d0 ;
	st_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	add_f64	 $d1, $d4, $d5 ;
	mul_f64	 $d3, $d3, 0D3f50000000000000 ;
	fract_f64	 $d3, $d3 ;
	mul_f64	 $d3, $d3, 0D4090000000000000 ;
	add_f64	 $d6, $d3, $d1 ;
	cmp_lt_b1_f64	 $c3, $d6, 0D0000000000000000 ;
	cmov_b64	 $d6, $c3, 0D4090000000000000, 0D0000000000000000 ;
	add_f64	 $d3, $d3, $d6 ;
	add_f64	 $d6, $d3, $d1 ;
	fract_f64	 $d7, $d6 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d3, $d6 ;
	add_f64	 $d5, $d3, $d1 ;
	st_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d1, $d4 ;
	ld_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d5, $d1 ;
	ld_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	ld_spill_u64	$d4, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d2 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d2, $d0, $d1 ;
	add_f64	 $d2, $d1, $d5 ;
	ld_readonly_u32	$s2, [$s2] ;
	cmov_b32	 $s2, $c0, $s2, $s8 ;
	cmov_b32	 $s2, $c1, $s2, $s5 ;
	cmov_b32	 $s2, $c2, $s2, $s6 ;
	bytealign_b32	 $s1, $s9, $s2, $s1 ;
	cvt_u64_u32	$d3, $s1 ;
	and_b32	 $s1, $s4, 65535 ;
	add_u32	 $s0, $s0, 1127219200 ;
	or_b32	 $s1, $s0, $s1 ;
	cvt_u64_u32	$d4, $s1 ;
	shl_u64	 $d4, $d4, 32 ;
	or_b64	 $d3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	shl_u64	 $d4, $d4, 32 ;
	sub_f64	 $d3, $d3, $d4 ;
	mul_f64	 $d4, $d3, $d0 ;
	add_f64	 $d6, $d2, $d4 ;
	ld_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	add_f64	 $d7, $d5, $d6 ;
	sub_f64	 $d5, $d7, $d5 ;
	sub_f64	 $d5, $d6, $d5 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d2, $d1 ;
	ld_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d5, $d5, $d1 ;
	sub_f64	 $d1, $d6, $d2 ;
	sub_f64	 $d1, $d4, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d1 ;
	ld_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d6, $d0, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	neg_f64	 $d1, $d4 ;
	fma_f64	 $d0, $d3, $d0, $d1 ;
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d5, 0D3fe0000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_near_f32_s32	$s1, $s0 ;
	cvt_f64_f32	$d1, $s1 ;
	sub_f64	 $d5, $d5, $d1 ;
	add_f64	 $d1, $d5, $d7 ;
	sub_f64	 $d5, $d1, $d5 ;
	sub_f64	 $d5, $d7, $d5 ;
	add_f64	 $d0, $d5, $d0 ;
	mul_f64	 $d2, $d1, 0D3ff921fb54442d18 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d5, $d1, 0D3ff921fb54442d18, $d5 ;
	fma_f64	 $d5, $d1, 0D3c91a62633145c06, $d5 ;
	fma_f64	 $d0, $d0, 0D3ff921fb54442d18, $d5 ;
	add_f64	 $d5, $d2, $d0 ;
	sub_f64	 $d1, $d5, $d2 ;
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	cvt_near_f32_f64	$s1, $d6 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	add_u32	 $s0, $s0, $s1 ;
@BB148_3:                               // %__sin_f64.exit
	mul_f64	 $d1, $d5, $d5 ;
	mul_f64	 $d2, $d1, 0D3fe0000000000000 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d2 ;
	sub_f64	 $d4, 0D3ff0000000000000, $d3 ;
	sub_f64	 $d2, $d4, $d2 ;
	fma_f64	 $d2, $d5, $d0, $d2 ;
	fma_f64	 $d4, 0Dbda907db46cc5e42, $d1, 0D3e21eeb69037ab78 ;
	fma_f64	 $d4, $d4, $d1, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d4, $d4, $d1, 0D3efa01a019f4ec90 ;
	fma_f64	 $d4, $d4, $d1, 0Dbf56c16c16c16967 ;
	fma_f64	 $d4, $d4, $d1, 0D3fa5555555555555 ;
	mul_f64	 $d6, $d1, $d1 ;
	fma_f64	 $d2, $d4, $d6, $d2 ;
	add_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d3, 0D3de5e0b2f9a43bb8, $d1, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d3, $d3, $d1, 0D3ec71de3796cde01 ;
	fma_f64	 $d3, $d3, $d1, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d3, $d3, $d1, 0D3f81111111110bb3 ;
	mul_f64	 $d4, $d1, $d5 ;
	neg_f64	 $d4, $d4 ;
	mul_f64	 $d6, $d0, 0D3fe0000000000000 ;
	fma_f64	 $d3, $d4, $d3, $d6 ;
	neg_f64	 $d0, $d0 ;
	fma_f64	 $d0, $d3, $d1, $d0 ;
	fma_f64	 $d0, $d4, 0Dbfc5555555555555, $d0 ;
	sub_f64	 $d0, $d5, $d0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	and_b64	 $d1, $d0, 4294967295 ;
	shr_u64	 $d0, $d0, 32 ;
	cvt_u32_u64	$s1, $d0 ;
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	and_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_u32	 $c1, $s0, 1 ;
	xor_b1	 $c0, $c1, $c0 ;
	cvt_u32_b1	$s0, $c0 ;
	shl_u32	 $s0, $s0, 31 ;
	xor_b32	 $s0, $s1, $s0 ;
	cvt_u64_u32	$d2, $s0 ;
	shl_u64	 $d2, $d2, 32 ;
	or_b64	 $d1, $d1, $d2 ;
	class_f64	 $c0, $d0, 516 ;
	class_f64	 $c1, $d0, 3 ;
	cvt_u32_b1	$s0, $c1 ;
	cvt_u32_b1	$s1, $c0 ;
	or_b32	 $s0, $s0, $s1 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d1, 0D7ff8000000000000 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psincos_f32() (
	arg_f32 %arg_val0, 
	arg_u32 %arg_val1, 
	arg_u32 %arg_val2)
{
	spill_u32 %stack[3];
@__amd_amp_Psincos_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	ld_arg_u32	$s2, [%arg_val2] ;
	st_spill_u32	$s2, [%stack][8] ; // 4-byte Folded Reload
	ld_arg_u32	$s2, [%arg_val1] ;
	st_spill_u32	$s2, [%stack][4] ; // 4-byte Folded Reload
	cbr	$c0, @BB149_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB149_3 ;
@BB149_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB149_3:                               // %__sincos_pf32.exit
	neg_f32	 $s4, $s1 ;
	mul_f32	 $s4, $s3, $s4 ;
	mul_f32	 $s5, $s1, $s1 ;
	mad_f32	 $s6, $s5, 0Fad47d74e, 0F310f74f6 ;
	mad_f32	 $s6, $s5, $s6, 0Fb492923a ;
	mad_f32	 $s6, $s5, $s6, 0F37d00ae2 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mul_f32	 $s6, $s5, $s6 ;
	mad_f32	 $s4, $s5, $s6, $s4 ;
	mov_b32	$s6, $s1 ;
	and_b32	 $s6, $s6, 2147483647 ;
	add_u32	 $s7, $s6, -16777216 ;
	add_u32	 $s8, $s6, -1050253722 ;
	cmp_lt_b1_u32	 $c0, $s8, 11429479 ;
	cmov_b32	 $s7, $c0, $s7, 0F00000000 ;
	cmp_gt_b1_u32	 $c0, $s6, 1061683200 ;
	cmov_b32	 $s6, $c0, 0F3e900000, $s7 ;
	neg_f32	 $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F3f000000, $s7 ;
	sub_f32	 $s4, $s7, $s4 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	sub_f32	 $s4, $s6, $s4 ;
	mad_f32	 $s6, $s5, 0F2f2ec9d3, 0Fb2d72f34 ;
	mad_f32	 $s6, $s5, $s6, 0F3636df25 ;
	mad_f32	 $s6, $s5, $s6, 0Fb95009d4 ;
	mad_f32	 $s6, $s5, $s6, 0F3c088887 ;
	mul_f32	 $s7, $s5, $s1 ;
	neg_f32	 $s8, $s7 ;
	mul_f32	 $s6, $s6, $s8 ;
	mad_f32	 $s6, $s3, 0F3f000000, $s6 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	mad_f32	 $s3, $s7, 0F3e2aaaab, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s1 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s3, $c0, $s4, $s3 ;
	and_b32	 $s2, $s2, 2 ;
	cmp_gt_b1_u32	 $c1, $s2, 1 ;
	cvt_u32_b1	$s2, $c1 ;
	shl_u32	 $s2, $s2, 31 ;
	xor_b32	 $s3, $s3, $s2 ;
	cmp_gt_b1_u32	 $c1, $s0, 2139095039 ;
	cmov_b32	 $s3, $c1, 0F7fc00000, $s3 ;
	ld_spill_u32	$s5, [%stack][8] ; // 4-byte Folded Reload
	st_global_f32	$s3, [$s5] ;
	cmov_b32	 $s1, $c0, $s1, $s4 ;
	ld_spill_u32	$s3, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s0, $s0, $s3 ;
	xor_b32	 $s0, $s0, $s2 ;
	xor_b32	 $s0, $s0, $s1 ;
	cmov_b32	 $s0, $c1, 0F7fc00000, $s0 ;
	ld_spill_u32	$s1, [%stack][4] ; // 4-byte Folded Reload
	st_global_f32	$s0, [$s1] ;
	ret ;
};

function &__amd_amp_Psincos_f64() (
	arg_f64 %arg_val0, 
	arg_u32 %arg_val1, 
	arg_u32 %arg_val2)
{
@__amd_amp_Psincos_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	//fcos_f64	 $d1, $d0 ;
	ld_arg_u32	$s0, [%arg_val2] ;
	st_global_f64	$d1, [$s0] ;
	//fsin_f64	 $d0, $d0 ;
	ld_arg_u32	$s0, [%arg_val1] ;
	st_global_f64	$d0, [$s0] ;
	ret ;
};

function &__amd_amp_Psinh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Psinh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	add_f32	 $s4, $s3, 0Fbf317280 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F00000000 ;
	cmov_b32	 $s5, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s4, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s4 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c0, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F42b17218 ;
	cmov_b32	 $s5, $c0, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s4, $s4 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	mad_f32	 $s4, 0F36d01087, $s4, $s4 ;
	cvt_zeroi_s32_f32	$s5, $s3 ;
	cmp_gt_b1_u32	 $c0, $s5, 36 ;
	cmov_b32	 $s5, $c0, 0, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	sub_f32	 $s6, $s3, $s6 ;
	mul_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s6, $s7 ;
	mad_f32	 $s9, $s7, 0F2b5a092d, 0F2f308e59 ;
	mad_f32	 $s9, $s7, $s9, 0F32d73230 ;
	mad_f32	 $s9, $s7, $s9, 0F3638ef1d ;
	mad_f32	 $s9, $s7, $s9, 0F39500d01 ;
	mad_f32	 $s9, $s7, $s9, 0F3c088889 ;
	mad_f32	 $s9, $s7, $s9, 0F3e2aaaab ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	mad_f32	 $s8, $s7, 0F2d4cc25c, 0F310f72b2 ;
	mad_f32	 $s8, $s7, $s8, 0F3493f283 ;
	mad_f32	 $s8, $s7, $s8, 0F37d00d01 ;
	mad_f32	 $s8, $s7, $s8, 0F3ab60b61 ;
	mad_f32	 $s8, $s7, $s8, 0F3d2aaaab ;
	mad_f32	 $s8, $s7, $s8, 0F3f000000 ;
	mad_f32	 $s7, $s8, $s7, 0F3f800000 ;
	shl_u32	 $s5, $s5, 3 ;
	//ldas_global_u32	$s8, [&__math32_SINHCOSH_TBL] ;
	add_u32	 $s5, $s8, $s5 ;
	ld_readonly_f32	$s8, [$s5] ;
	mul_f32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s5, [$s5 + 4] ;
	mad_f32	 $s5, $s5, $s6, $s7 ;
	cmp_ltu_b1_f32	 $c0, $s3, 0F41051592 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cmp_ltu_b1_f32	 $c0, $s3, 0F42b2d4fd ;
	cmov_b32	 $s3, $c0, $s4, 2139095040 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	add_u32	 $s2, $s2, -947912704 ;
	cmp_gt_b1_u32	 $c0, $s2, 1191182336 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psinh_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[2];
@__amd_amp_Psinh_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	abs_f64	 $d1, $d0 ;
	add_f64	 $d2, $d1, 0Dbfe62e42fefa3800 ;
	mul_f64	 $d3, $d2, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d3 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d3, [$s1 + 8] ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d5, $d4, $d3 ;
	cvt_near_f64_s32	$d6, $s0 ;
	fma_f64	 $d7, 0Dbf862e42fefa0000, $d6, $d2 ;
	fma_f64	 $d6, 0Dbd1cf79abc9e3b39, $d6, $d7 ;
	fma_f64	 $d7, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d7, $d6, $d7, 0D3fa5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fc5555555555555 ;
	fma_f64	 $d7, $d6, $d7, 0D3fe0000000000000 ;
	fma_f64	 $d7, $d6, $d7, 0D3ff0000000000000 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d3, $d5, $d6, $d3 ;
	add_f64	 $d3, $d3, $d4 ;
	shr_u64	 $d4, $d3, 52 ;
	cvt_u32_u64	$s1, $d4 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d4, $d3, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d4, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d4, $c0, $d4, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d3, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d3, $d3, -9223372036854775808 ;
	or_b64	 $d3, $d5, $d3 ;
	or_b64	 $d3, $d3, $d4 ;
	cmp_nan_b1_f64	 $c0, $d2, $d2 ;
	cmov_b64	 $d3, $c0, $d2, $d3 ;
	cmp_gt_b1_f64	 $c0, $d2, 0D40862e42fefa39ef ;
	cmov_b64	 $d3, $c0, 0D7ff0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d2, 0Dc0874910d52d3051 ;
	cmov_b64	 $d2, $c0, 0D0000000000000000, $d3 ;
	fma_f64	 $d2, $d2, 0Dbd2ef35793c76641, $d2 ;
	st_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	cvt_zeroi_s32_f64	$s0, $d1 ;
	min_s32	 $s0, $s0, 36 ;
	cvt_near_f64_s32	$d3, $s0 ;
	sub_f64	 $d3, $d1, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d3, $d4 ;
	fma_f64	 $d6, $d4, 0D3d6b4125921ea08b, 0D3de611cb2bdcb7be ;
	fma_f64	 $d6, $d4, $d6, 0D3e5ae6460fbe61c0 ;
	fma_f64	 $d6, $d4, $d6, 0D3ec71de3a4e13e7d ;
	fma_f64	 $d6, $d4, $d6, 0D3f2a01a01a01ee80 ;
	fma_f64	 $d6, $d4, $d6, 0D3f811111111110fd ;
	fma_f64	 $d6, $d4, $d6, 0D3fc5555555555555 ;
	mul_f64	 $d5, $d5, $d6 ;
	mov_b64	$d6, $d3 ;
	and_b64	 $d6, $d6, -134217728 ;
	sub_f64	 $d3, $d3, $d6 ;
	add_f64	 $d3, $d5, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_COSH_TBL] ;
	add_u32	 $s1, $s1, $s0 ;
	ld_readonly_f64	$d5, [$s1 + 8] ;
	mul_f64	 $d7, $d5, $d3 ;
	fma_f64	 $d2, $d4, 0D3da9984b7f63fcd7, 0D3e21ee56385b7b20 ;
	fma_f64	 $d2, $d4, $d2, 0D3e927e5069f1cb55 ;
	fma_f64	 $d2, $d4, $d2, 0D3efa01a019079011 ;
	fma_f64	 $d2, $d4, $d2, 0D3f56c16c16c212e5 ;
	fma_f64	 $d2, $d4, $d2, 0D3fa5555555555502 ;
	fma_f64	 $d2, $d4, $d2, 0D3fe0000000000000 ;
	mul_f64	 $d2, $d4, $d2 ;
	//ldas_global_u32	$s2, [&__math64_SINH_TBL] ;
	add_u32	 $s0, $s2, $s0 ;
	ld_readonly_f64	$d4, [$s0 + 8] ;
	fma_f64	 $d7, $d4, $d2, $d7 ;
	fma_f64	 $d5, $d5, $d6, $d7 ;
	add_f64	 $d4, $d5, $d4 ;
	ld_readonly_f64	$d5, [$s1] ;
	fma_f64	 $d3, $d5, $d3, $d4 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d2, $d4, $d2, $d3 ;
	fma_f64	 $d2, $d5, $d6, $d2 ;
	add_f64	 $d2, $d2, $d4 ;
	class_f64	 $c0, $d0, 3 ;
	cvt_u32_b1	$s0, $c0 ;
	and_b32	 $s0, $s0, 1 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D3e30000000000000 ;
	cvt_u32_b1	$s1, $c0 ;
	or_b32	 $s0, $s0, $s1 ;
	class_f64	 $c0, $d0, 516 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s0, $s1 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d2, $c0, $d2, $d1 ;
	cmp_ltu_b1_f64	 $c0, $d1, 0D4032b708872320e2 ;
	ld_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cmp_ltu_b1_f64	 $c0, $d1, 0D408633ce8fb9f87e ;
	cmov_b64	 $d1, $c0, $d2, 0D7ff0000000000000 ;
	copysign_f64	 $d0, $d1, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psinpi_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Psinpi_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, -2147483648 ;
	xor_b32	 $s0, $s1, $s0 ;
	mov_b32	$s2, $s0 ;
	cvt_zeroi_s32_f32	$s3, $s2 ;
	cvt_near_f32_s32	$s4, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s4, 0F3f800000, $s2 ;
	add_f32	 $s5, $s2, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s2, 0F3f400000 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	sub_f32	 $s5, 0F3f000000, $s2 ;
	cmp_lt_b1_f32	 $c0, $s2, 0F3f000000 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	cmp_le_b1_f32	 $c0, $s2, 0F3e800000 ;
	cmov_b32	 $s4, $c0, $s2, $s4 ;
	mul_f32	 $s4, $s4, 0F40490fdb ;
	mul_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s4, $s5 ;
	mad_f32	 $s7, $s5, 0F3636df25, 0Fb95009d4 ;
	mad_f32	 $s7, $s5, $s7, 0F3c088887 ;
	mad_f32	 $s7, $s5, $s7, 0Fbe2aaaab ;
	mad_f32	 $s4, $s6, $s7, $s4 ;
	mad_f32	 $s6, $s5, 0Fb492923a, 0F37d00ae3 ;
	mad_f32	 $s6, $s5, $s6, 0Fbab60b60 ;
	mad_f32	 $s6, $s5, $s6, 0F3d2aaaab ;
	mad_f32	 $s7, $s5, 0Fbf000000, 0F3f800000 ;
	mul_f32	 $s5, $s5, $s5 ;
	mad_f32	 $s5, $s5, $s6, $s7 ;
	cmp_gtu_b1_f32	 $c1, $s2, 0F3f400000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s2, $c0, $s4, $s5 ;
	shl_u32	 $s3, $s3, 31 ;
	xor_b32	 $s3, $s3, $s1 ;
	xor_b32	 $s2, $s3, $s2 ;
	cmp_lt_b1_s32	 $c0, $s0, 2139095040 ;
	cmov_b32	 $s1, $c0, $s1, 2143289344 ;
	cmp_lt_b1_s32	 $c0, $s0, 1258291200 ;
	cmov_b32	 $s0, $c0, $s2, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psinpi_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[6];
@__amd_amp_Psinpi_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	and_b64	 $d1, $d0, -9223372036854775808 ;
	st_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	xor_b64	 $d0, $d1, $d0 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	mov_b64	$d2, $d0 ;
	cvt_zeroi_s64_f64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d4, $d3 ;
	sub_f64	 $d4, $d2, $d4 ;
	sub_f64	 $d5, 0D3ff0000000000000, $d4 ;
	add_f64	 $d6, $d4, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d4, 0D3fe8000000000000 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	sub_f64	 $d6, 0D3fe0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c0, $d4, 0D3fe0000000000000 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	cmp_le_b1_f64	 $c0, $d4, 0D3fd0000000000000 ;
	cmov_b64	 $d5, $c0, $d4, $d5 ;
	mul_f64	 $d5, $d5, 0D400921fb54442d18 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, 0D3fe0000000000000 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d7 ;
	sub_f64	 $d1, 0D3ff0000000000000, $d0 ;
	sub_f64	 $d1, $d1, $d7 ;
	fma_f64	 $d1, $d5, 0D0000000000000000, $d1 ;
	fma_f64	 $d7, 0Dbda907db46cc5e42, $d6, 0D3e21eeb69037ab78 ;
	fma_f64	 $d7, $d7, $d6, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d7, $d7, $d6, 0D3efa01a019f4ec90 ;
	fma_f64	 $d7, $d7, $d6, 0Dbf56c16c16c16967 ;
	fma_f64	 $d7, $d7, $d6, 0D3fa5555555555555 ;
	mul_f64	 $d3, $d6, $d6 ;
	fma_f64	 $d1, $d7, $d3, $d1 ;
	add_f64	 $d0, $d0, $d1 ;
	fma_f64	 $d1, 0D3de5e0b2f9a43bb8, $d6, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d1, $d1, $d6, 0D3ec71de3796cde01 ;
	fma_f64	 $d1, $d1, $d6, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d1, $d1, $d6, 0D3f81111111110bb3 ;
	mul_f64	 $d3, $d6, $d5 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d1, $d3, $d1, 0D0000000000000000 ;
	fma_f64	 $d1, $d1, $d6, 0D8000000000000000 ;
	fma_f64	 $d1, $d3, 0Dbfc5555555555555, $d1 ;
	sub_f64	 $d1, $d5, $d1 ;
	cmp_gtu_b1_f64	 $c1, $d4, 0D3fe8000000000000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	shl_u64	 $d1, $d3, 63 ;
	ld_spill_u64	$d3, [%stack][16] ; // 8-byte Folded Reload
	xor_b64	 $d1, $d1, $d3 ;
	xor_b64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	cmp_lt_b1_s64	 $c0, $d1, 9218868437227405312 ;
	cmov_b64	 $d1, $c0, $d3, 9221120237041090560 ;
	cmp_lt_b1_f64	 $c0, $d2, 0D4330000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psqrt_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Psqrt_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	sqrt_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Psqrt_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Psqrt_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	sqrt_f64	 $d0, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptan_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
	spill_u32 %stack[1];
@__amd_amp_Ptan_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	st_spill_u32	$s0, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s0, $s0, 2147483647 ;
	mov_b32	$s1, $s0 ;
	cmp_geu_b1_f32	 $c0, $s1, 0F4b000000 ;
	cbr	$c0, @BB157_2 ;
// BB#1:
	mad_f32	 $s2, $s1, 0F3f22f983, 0F3f000000 ;
	cvt_zeroi_f32_f32	 $s2, $s2 ;
	mul_f32	 $s3, $s2, 0F3fc90fda ;
	neg_f32	 $s4, $s3 ;
	fma_f32	 $s4, $s2, 0F3fc90fda, $s4 ;
	sub_f32	 $s5, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s5 ;
	sub_f32	 $s1, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	add_f32	 $s1, $s5, $s1 ;
	mul_f32	 $s3, $s2, 0F33a22168 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F33a22168, $s3 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	mul_f32	 $s3, $s2, 0F27c234c4 ;
	sub_f32	 $s4, $s1, $s3 ;
	sub_f32	 $s1, $s1, $s4 ;
	sub_f32	 $s1, $s1, $s3 ;
	add_f32	 $s1, $s4, $s1 ;
	neg_f32	 $s3, $s3 ;
	fma_f32	 $s3, $s2, 0F27c234c4, $s3 ;
	neg_f32	 $s3, $s3 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	brn	@BB157_3 ;
@BB157_2:
	ld_spill_u32	$s1, [%stack][0] ; // 4-byte Folded Reload
	and_b32	 $s1, $s1, 8388607 ;
	or_b32	 $s1, $s1, 8388608 ;
	mul_hi_u32	 $s2, $s1, -28220501 ;
	mad_u32	 $s3, $s1, 1011060801, $s2 ;
	cmp_lt_b1_u32	 $c0, $s3, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s4, $s1, 1011060801 ;
	add_u32	 $s2, $s2, $s4 ;
	mad_u32	 $s4, $s1, -614296167, $s2 ;
	cmp_lt_b1_u32	 $c0, $s4, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s5, $s1, -614296167 ;
	add_u32	 $s2, $s2, $s5 ;
	mad_u32	 $s5, $s1, -181084736, $s2 ;
	cmp_lt_b1_u32	 $c0, $s5, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s6, $s1, -181084736 ;
	add_u32	 $s2, $s2, $s6 ;
	mad_u32	 $s6, $s1, -64530479, $s2 ;
	cmp_lt_b1_u32	 $c0, $s6, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s7, $s1, -64530479 ;
	add_u32	 $s2, $s2, $s7 ;
	mad_u32	 $s7, $s1, 1313084713, $s2 ;
	cmp_lt_b1_u32	 $c0, $s7, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s8, $s1, 1313084713 ;
	add_u32	 $s2, $s2, $s8 ;
	mad_u32	 $s8, $s1, -1560706194, $s2 ;
	cmp_lt_b1_u32	 $c0, $s8, $s2 ;
	cvt_u32_b1	$s2, $c0 ;
	mul_hi_u32	 $s9, $s1, -1560706194 ;
	add_u32	 $s2, $s2, $s9 ;
	shr_u32	 $s9, $s0, 23 ;
	add_u32	 $s9, $s9, -120 ;
	cmp_gt_b1_u32	 $c0, $s9, 31 ;
	cmov_b32	 $s2, $c0, $s8, $s2 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s10, $c0, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c1, $s9, 31 ;
	cmov_b32	 $s2, $c1, $s8, $s2 ;
	cmov_b32	 $s7, $c0, $s6, $s7 ;
	cmov_b32	 $s8, $c1, $s7, $s8 ;
	cmov_b32	 $s10, $c1, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c2, $s9, 31 ;
	cmov_b32	 $s2, $c2, $s8, $s2 ;
	cmov_b32	 $s6, $c0, $s5, $s6 ;
	cmov_b32	 $s7, $c1, $s6, $s7 ;
	cmov_b32	 $s8, $c2, $s7, $s8 ;
	cmov_b32	 $s10, $c2, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s9, $s9, $s10 ;
	cmp_gt_b1_u32	 $c3, $s9, 31 ;
	cmov_b32	 $s2, $c3, $s8, $s2 ;
	cmov_b32	 $s10, $c3, -1, 0 ;
	and_b32	 $s10, $s10, 32 ;
	sub_u32	 $s11, $s10, $s9 ;
	neg_s32	 $s12, $s11 ;
	shl_u32	 $s13, $s2, $s12 ;
	cmov_b32	 $s5, $c0, $s4, $s5 ;
	cmov_b32	 $s6, $c1, $s5, $s6 ;
	cmov_b32	 $s7, $c2, $s6, $s7 ;
	cmov_b32	 $s8, $c3, $s7, $s8 ;
	shr_u32	 $s14, $s8, $s11 ;
	or_b32	 $s13, $s13, $s14 ;
	cmp_ne_b1_u32	 $c4, $s9, $s10 ;
	cmov_b32	 $s2, $c4, $s13, $s2 ;
	shl_u32	 $s9, $s2, 2 ;
	cmov_b32	 $s4, $c0, $s3, $s4 ;
	cmov_b32	 $s5, $c1, $s4, $s5 ;
	cmov_b32	 $s6, $c2, $s5, $s6 ;
	cmov_b32	 $s7, $c3, $s6, $s7 ;
	shr_u32	 $s10, $s7, $s11 ;
	shl_u32	 $s13, $s8, $s12 ;
	or_b32	 $s10, $s13, $s10 ;
	cmov_b32	 $s8, $c4, $s10, $s8 ;
	shr_u32	 $s10, $s8, 30 ;
	or_b32	 $s10, $s9, $s10 ;
	shr_s32	 $s13, $s9, 31 ;
	cmp_eq_b1_u32	 $c5, $s10, $s13 ;
	xor_b32	 $s10, $s10, $s13 ;
	firstbit_b32	 $s14, $s10 ;
	cmov_b32	 $s14, $c5, 32, $s14 ;
	sub_u32	 $s15, 31, $s14 ;
	mul_u32	 $s1, $s1, -28220501 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	cmov_b32	 $s1, $c1, $s1, $s4 ;
	cmov_b32	 $s1, $c2, $s1, $s5 ;
	cmov_b32	 $s1, $c3, $s1, $s6 ;
	shr_u32	 $s3, $s1, $s11 ;
	shl_u32	 $s4, $s7, $s12 ;
	or_b32	 $s3, $s4, $s3 ;
	cmov_b32	 $s3, $c4, $s3, $s7 ;
	shl_u32	 $s4, $s3, 2 ;
	shr_u32	 $s1, $s1, 30 ;
	or_b32	 $s1, $s4, $s1 ;
	xor_b32	 $s1, $s13, $s1 ;
	shr_u32	 $s1, $s1, $s15 ;
	neg_s32	 $s4, $s15 ;
	shr_u32	 $s3, $s3, 30 ;
	shl_u32	 $s5, $s8, 2 ;
	or_b32	 $s3, $s5, $s3 ;
	xor_b32	 $s3, $s13, $s3 ;
	shl_u32	 $s5, $s3, $s4 ;
	or_b32	 $s1, $s5, $s1 ;
	shr_u32	 $s5, $s1, 9 ;
	shr_u32	 $s3, $s3, $s15 ;
	shl_u32	 $s4, $s10, $s4 ;
	or_b32	 $s3, $s4, $s3 ;
	shl_u32	 $s4, $s3, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	firstbit_b32	 $s5, $s4 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	cmov_b32	 $s5, $c0, 32, $s5 ;
	sub_u32	 $s6, 31, $s5 ;
	shr_u32	 $s1, $s1, $s6 ;
	neg_s32	 $s6, $s6 ;
	shl_u32	 $s4, $s4, $s6 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s1, $s1, 9 ;
	sub_u32	 $s4, 102, $s14 ;
	sub_u32	 $s4, $s4, $s5 ;
	shl_u32	 $s4, $s4, 23 ;
	and_b32	 $s5, $s9, -2147483648 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s1, $s4, $s1 ;
	shr_u32	 $s3, $s3, 9 ;
	sub_u32	 $s4, 126, $s14 ;
	shl_u32	 $s4, $s4, 23 ;
	or_b32	 $s4, $s4, $s5 ;
	or_b32	 $s3, $s4, $s3 ;
	mul_f32	 $s4, $s3, 0F3fc90fda ;
	neg_f32	 $s5, $s4 ;
	fma_f32	 $s5, $s3, 0F3fc90fda, $s5 ;
	fma_f32	 $s3, $s3, 0F33a22168, $s5 ;
	fma_f32	 $s3, $s1, 0F3fc90fda, $s3 ;
	add_f32	 $s1, $s4, $s3 ;
	sub_f32	 $s4, $s1, $s4 ;
	sub_f32	 $s3, $s3, $s4 ;
	shr_u32	 $s4, $s2, 30 ;
	extract_u32	 $s2, $s2, 29, 1 ;
	add_u32	 $s2, $s2, $s4 ;
@BB157_3:                               // %__tan_f32.exit
	add_f32	 $s1, $s1, $s3 ;
	mul_f32	 $s3, $s1, $s1 ;
	mul_f32	 $s4, $s1, $s3 ;
	mad_f32	 $s5, $s3, 0F3c971480, 0Fbf039337 ;
	mad_f32	 $s5, $s3, $s5, 0F3f93f425 ;
	mad_f32	 $s3, $s3, 0Fbc8cedd3, 0F3ec54587 ;
	div_f32	 $s3, $s3, $s5 ;
	mad_f32	 $s1, $s4, $s3, $s1 ;
	frcp_f32	 $s3, $s1 ;
	neg_f32	 $s3, $s3 ;
	cvt_b1_u32	$c0, $s2 ;
	not_b1	 $c0, $c0 ;
	cmov_b32	 $s1, $c0, $s1, $s3 ;
	ld_spill_u32	$s2, [%stack][0] ; // 4-byte Folded Reload
	xor_b32	 $s2, $s0, $s2 ;
	xor_b32	 $s1, $s2, $s1 ;
	cmp_gt_b1_u32	 $c0, $s0, 2139095039 ;
	cmov_b32	 $s0, $c0, 0F7fc00000, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptan_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[18];
@__amd_amp_Ptan_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	abs_f64	 $d0, $d0 ;
	cmp_geu_b1_f64	 $c0, $d0, 0D41d0000000000000 ;
	cbr	$c0, @BB158_2 ;
// BB#1:
	fma_f64	 $d1, $d0, 0D3fe45f306dc9c883, 0D3fe0000000000000 ;
	cvt_zeroi_f64_f64	 $d1, $d1 ;
	mul_f64	 $d2, $d1, 0Dbff921fb54442d18 ;
	neg_f64	 $d3, $d2 ;
	fma_f64	 $d3, 0Dbff921fb54442d18, $d1, $d3 ;
	mul_f64	 $d4, $d1, 0Dbc91a62633145c06 ;
	add_f64	 $d5, $d3, $d4 ;
	add_f64	 $d6, $d2, $d5 ;
	sub_f64	 $d2, $d6, $d2 ;
	sub_f64	 $d2, $d5, $d2 ;
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d5, $d1, 0Db94c1cd129024e08 ;
	add_f64	 $d3, $d5, $d3 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, 0Dbc91a62633145c06, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	neg_f64	 $d4, $d5 ;
	fma_f64	 $d4, 0Db94c1cd129024e08, $d1, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d2, $d3 ;
	add_f64	 $d0, $d0, $d6 ;
	add_f64	 $d5, $d0, $d4 ;
	sub_f64	 $d0, $d5, $d0 ;
	sub_f64	 $d0, $d4, $d0 ;
	sub_f64	 $d2, $d4, $d2 ;
	sub_f64	 $d2, $d3, $d2 ;
	add_f64	 $d0, $d0, $d2 ;
	cvt_zeroi_s64_f64	$d1, $d1 ;
	cvt_u32_u64	$s0, $d1 ;
	brn	@BB158_3 ;
@BB158_2:
	mov_b64	$d5, $d0 ;
	shr_s64	 $d5, $d5, 52 ;
	cvt_u32_u64	$s0, $d5 ;
	add_u32	 $s0, $s0, -1023 ;
	shr_s32	 $s0, $s0, 3 ;
	add_u32	 $s0, $s0, 17 ;
	max_s32	 $s0, 23, $s0 ;
	sub_u32	 $s1, 150, $s0 ;
	and_b32	 $s2, $s1, -16 ;
	//ldas_global_u32	$s3, [&__math64_PIBITS] ;
	add_u32	 $s2, $s3, $s2 ;
	ld_readonly_u32	$s3, [$s2 + 20] ;
	ld_readonly_u32	$s4, [$s2 + 16] ;
	extract_u32	 $s5, $s1, 2, 2 ;
	cmp_ne_b1_u32	 $c0, $s5, 1 ;
	cmov_b32	 $s6, $c0, $s4, $s3 ;
	ld_readonly_u32	$s7, [$s2 + 24] ;
	cmp_ne_b1_u32	 $c1, $s5, 2 ;
	cmov_b32	 $s6, $c1, $s6, $s7 ;
	ld_readonly_u32	$s8, [$s2 + 28] ;
	cmp_ne_b1_u32	 $c2, $s5, 3 ;
	cmov_b32	 $s5, $c2, $s6, $s8 ;
	cmov_b32	 $s6, $c0, $s3, $s7 ;
	cmov_b32	 $s6, $c1, $s6, $s8 ;
	ld_readonly_u32	$s9, [$s2 + 32] ;
	cmov_b32	 $s6, $c2, $s6, $s9 ;
	bytealign_b32	 $s10, $s6, $s5, $s1 ;
	shr_u32	 $s11, $s10, 16 ;
	cmov_b32	 $s8, $c0, $s7, $s8 ;
	cmov_b32	 $s8, $c1, $s8, $s9 ;
	ld_readonly_u32	$s9, [$s2 + 36] ;
	cmov_b32	 $s8, $c2, $s8, $s9 ;
	bytealign_b32	 $s6, $s8, $s6, $s1 ;
	shl_u32	 $s8, $s6, 16 ;
	or_b32	 $s8, $s8, $s11 ;
	cvt_u64_u32	$d5, $s8 ;
	shr_u32	 $s6, $s6, 16 ;
	shl_u32	 $s0, $s0, 3 ;
	or_b32	 $s0, $s0, 2 ;
	cmp_gt_b1_s32	 $c3, $s0, 1018 ;
	cmov_b32	 $s8, $c3, 136, 0 ;
	sub_u32	 $s0, $s8, $s0 ;
	shl_u32	 $s0, $s0, 20 ;
	add_u32	 $s8, $s0, 1278214144 ;
	or_b32	 $s6, $s6, $s8 ;
	cvt_u64_u32	$d1, $s6 ;
	shl_u64	 $d1, $d1, 32 ;
	or_b64	 $d5, $d5, $d1 ;
	cvt_u64_u32	$d1, $s8 ;
	shl_u64	 $d1, $d1, 32 ;
	sub_f64	 $d5, $d5, $d1 ;
	cmov_b64	 $d1, $c3, 0D3770000000000000, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d1, $d0 ;
	mul_f64	 $d1, $d5, $d0 ;
	neg_f64	 $d2, $d1 ;
	fma_f64	 $d5, $d5, $d0, $d2 ;
	st_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	ld_readonly_u32	$s6, [$s2 + 12] ;
	cmov_b32	 $s8, $c0, $s6, $s4 ;
	cmov_b32	 $s8, $c1, $s8, $s3 ;
	cmov_b32	 $s7, $c2, $s8, $s7 ;
	bytealign_b32	 $s5, $s5, $s7, $s1 ;
	cvt_u64_u32	$d2, $s5 ;
	and_b32	 $s5, $s10, 65535 ;
	add_u32	 $s8, $s0, 1227882496 ;
	or_b32	 $s5, $s5, $s8 ;
	cvt_u64_u32	$d3, $s5 ;
	shl_u64	 $d3, $d3, 32 ;
	or_b64	 $d2, $d2, $d3 ;
	cvt_u64_u32	$d3, $s8 ;
	shl_u64	 $d3, $d3, 32 ;
	sub_f64	 $d5, $d2, $d3 ;
	st_spill_u64	$d5, [%stack][32] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d5, $d0 ;
	add_f64	 $d3, $d1, $d2 ;
	sub_f64	 $d1, $d3, $d1 ;
	sub_f64	 $d5, $d2, $d1 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d4, $d5, $d1 ;
	ld_readonly_u32	$s5, [$s2 + 8] ;
	ld_readonly_u32	$s8, [$s2 + 4] ;
	cmov_b32	 $s9, $c0, $s8, $s5 ;
	cmov_b32	 $s9, $c1, $s9, $s6 ;
	cmov_b32	 $s9, $c2, $s9, $s4 ;
	cmov_b32	 $s10, $c0, $s5, $s6 ;
	cmov_b32	 $s4, $c1, $s10, $s4 ;
	cmov_b32	 $s3, $c2, $s4, $s3 ;
	bytealign_b32	 $s4, $s3, $s9, $s1 ;
	shr_u32	 $s10, $s4, 16 ;
	bytealign_b32	 $s3, $s7, $s3, $s1 ;
	shl_u32	 $s7, $s3, 16 ;
	or_b32	 $s7, $s7, $s10 ;
	cvt_u64_u32	$d6, $s7 ;
	shr_u32	 $s3, $s3, 16 ;
	add_u32	 $s7, $s0, 1177550848 ;
	or_b32	 $s3, $s3, $s7 ;
	cvt_u64_u32	$d7, $s3 ;
	shl_u64	 $d7, $d7, 32 ;
	or_b64	 $d6, $d6, $d7 ;
	cvt_u64_u32	$d7, $s7 ;
	shl_u64	 $d7, $d7, 32 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	mul_f64	 $d5, $d6, $d0 ;
	st_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	add_f64	 $d1, $d4, $d5 ;
	mul_f64	 $d3, $d3, 0D3f50000000000000 ;
	fract_f64	 $d3, $d3 ;
	mul_f64	 $d3, $d3, 0D4090000000000000 ;
	add_f64	 $d6, $d3, $d1 ;
	cmp_lt_b1_f64	 $c3, $d6, 0D0000000000000000 ;
	cmov_b64	 $d6, $c3, 0D4090000000000000, 0D0000000000000000 ;
	add_f64	 $d3, $d3, $d6 ;
	add_f64	 $d6, $d3, $d1 ;
	fract_f64	 $d7, $d6 ;
	sub_f64	 $d6, $d6, $d7 ;
	st_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d3, $d6 ;
	add_f64	 $d5, $d3, $d1 ;
	st_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d5, $d3 ;
	sub_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d1, $d4 ;
	ld_spill_u64	$d5, [%stack][16] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d5, $d1 ;
	ld_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	ld_spill_u64	$d4, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d3, $d4, $d3 ;
	add_f64	 $d5, $d1, $d3 ;
	st_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d2 ;
	ld_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d2, $d0, $d1 ;
	add_f64	 $d2, $d1, $d5 ;
	ld_readonly_u32	$s2, [$s2] ;
	cmov_b32	 $s2, $c0, $s2, $s8 ;
	cmov_b32	 $s2, $c1, $s2, $s5 ;
	cmov_b32	 $s2, $c2, $s2, $s6 ;
	bytealign_b32	 $s1, $s9, $s2, $s1 ;
	cvt_u64_u32	$d3, $s1 ;
	and_b32	 $s1, $s4, 65535 ;
	add_u32	 $s0, $s0, 1127219200 ;
	or_b32	 $s1, $s0, $s1 ;
	cvt_u64_u32	$d4, $s1 ;
	shl_u64	 $d4, $d4, 32 ;
	or_b64	 $d3, $d3, $d4 ;
	cvt_u64_u32	$d4, $s0 ;
	shl_u64	 $d4, $d4, 32 ;
	sub_f64	 $d3, $d3, $d4 ;
	mul_f64	 $d4, $d3, $d0 ;
	add_f64	 $d6, $d2, $d4 ;
	ld_spill_u64	$d5, [%stack][64] ; // 8-byte Folded Reload
	add_f64	 $d7, $d5, $d6 ;
	sub_f64	 $d5, $d7, $d5 ;
	sub_f64	 $d5, $d6, $d5 ;
	st_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	sub_f64	 $d1, $d2, $d1 ;
	ld_spill_u64	$d5, [%stack][0] ; // 8-byte Folded Reload
	sub_f64	 $d5, $d5, $d1 ;
	sub_f64	 $d1, $d6, $d2 ;
	sub_f64	 $d1, $d4, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	neg_f64	 $d1, $d1 ;
	ld_spill_u64	$d6, [%stack][40] ; // 8-byte Folded Reload
	fma_f64	 $d1, $d6, $d0, $d1 ;
	add_f64	 $d5, $d1, $d5 ;
	neg_f64	 $d1, $d4 ;
	fma_f64	 $d0, $d3, $d0, $d1 ;
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][8] ; // 8-byte Folded Reload
	add_f64	 $d0, $d5, $d0 ;
	ld_spill_u64	$d5, [%stack][56] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d5, 0D3fe0000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_near_f32_s32	$s1, $s0 ;
	cvt_f64_f32	$d1, $s1 ;
	sub_f64	 $d5, $d5, $d1 ;
	add_f64	 $d1, $d5, $d7 ;
	sub_f64	 $d5, $d1, $d5 ;
	sub_f64	 $d5, $d7, $d5 ;
	add_f64	 $d0, $d5, $d0 ;
	mul_f64	 $d2, $d1, 0D3ff921fb54442d18 ;
	neg_f64	 $d5, $d2 ;
	fma_f64	 $d5, $d1, 0D3ff921fb54442d18, $d5 ;
	fma_f64	 $d5, $d1, 0D3c91a62633145c06, $d5 ;
	fma_f64	 $d0, $d0, 0D3ff921fb54442d18, $d5 ;
	add_f64	 $d5, $d2, $d0 ;
	sub_f64	 $d1, $d5, $d2 ;
	sub_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d6, [%stack][48] ; // 8-byte Folded Reload
	cvt_near_f32_f64	$s1, $d6 ;
	cvt_zeroi_s32_f32	$s1, $s1 ;
	add_u32	 $s0, $s0, $s1 ;
@BB158_3:                               // %__tan_f64.exit
	cmp_lt_b1_f64	 $c0, $d5, 0Dbfe5c28f5c28f5c3 ;
	cmp_gt_b1_f64	 $c1, $d5, 0D3fe5c28f5c28f5c3 ;
	cmov_b64	 $d1, $c1, 0D3ff0000000000000, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0Dbff0000000000000, $d1 ;
	neg_f64	 $d2, $d1 ;
	fma_f64	 $d3, $d2, $d0, 0D3c81a62633145c06 ;
	fma_f64	 $d2, $d2, $d5, 0D3fe921fb54442d18 ;
	add_f64	 $d2, $d2, $d3 ;
	or_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d2, $c0, $d2, $d5 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	mul_f64	 $d3, $d2, $d0 ;
	mul_f64	 $d4, $d2, $d2 ;
	fma_f64	 $d3, 0D4000000000000000, $d3, $d4 ;
	fma_f64	 $d4, $d3, 0D3f2d5daf289c385a, 0Dbf977c24c7569abb ;
	fma_f64	 $d4, $d3, $d4, 0D3fd7d50f6638564a ;
	fma_f64	 $d5, $d3, 0Dbf2e7517ef6d98f8, 0D3f9ab0f4f80a0acf ;
	fma_f64	 $d5, $d3, $d5, 0Dbfe08046499eb90f ;
	fma_f64	 $d5, $d3, $d5, 0D3ff1dfcb8caa40b8 ;
	div_f64	 $d4, $d4, $d5 ;
	mul_f64	 $d3, $d2, $d3 ;
	fma_f64	 $d0, $d4, $d3, $d0 ;
	add_f64	 $d3, $d2, $d0 ;
	mov_b64	$d4, $d3 ;
	and_b64	 $d4, $d4, -4294967296 ;
	sub_f64	 $d2, $d4, $d2 ;
	sub_f64	 $d0, $d0, $d2 ;
	div_f64	 $d2, 0D3ff0000000000000, $d3 ;
	neg_f64	 $d2, $d2 ;
	mov_b64	$d5, $d2 ;
	and_b64	 $d5, $d5, -4294967296 ;
	fma_f64	 $d4, $d5, $d4, 0D3ff0000000000000 ;
	fma_f64	 $d0, $d5, $d0, $d4 ;
	fma_f64	 $d0, $d0, $d2, $d5 ;
	add_f64	 $d2, $d3, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, $d3 ;
	div_f64	 $d2, $d4, $d2 ;
	add_f64	 $d2, $d2, 0Dbff0000000000000 ;
	mul_f64	 $d2, $d1, $d2 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	add_f64	 $d2, $d3, 0D3ff0000000000000 ;
	div_f64	 $d2, $d4, $d2 ;
	sub_f64	 $d2, 0D3ff0000000000000, $d2 ;
	mul_f64	 $d1, $d1, $d2 ;
	cmov_b64	 $d1, $c0, $d1, $d3 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	and_b64	 $d1, $d0, 4294967295 ;
	shr_u64	 $d0, $d0, 32 ;
	cvt_u32_u64	$s0, $d0 ;
	ld_spill_u64	$d0, [%stack][24] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cvt_u32_b1	$s1, $c0 ;
	shl_u32	 $s1, $s1, 31 ;
	xor_b32	 $s0, $s0, $s1 ;
	cvt_u64_u32	$d2, $s0 ;
	shl_u64	 $d2, $d2, 32 ;
	or_b64	 $d1, $d1, $d2 ;
	class_f64	 $c0, $d0, 519 ;
	cvt_u32_b1	$s0, $c0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d1, 0D7ff8000000000000 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptanh_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ptanh_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	mov_b32	$s1, $s0 ;
	and_b32	 $s2, $s1, 2147483647 ;
	mov_b32	$s3, $s2 ;
	add_f32	 $s4, $s3, $s3 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F00000000 ;
	cmov_b32	 $s5, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s5, $s4, 0F3fb8aa3b, $s5 ;
	cvt_zeroi_s32_f32	$s5, $s5 ;
	cvt_near_f32_s32	$s6, $s5 ;
	mad_f32	 $s7, $s6, 0Fbf317180, $s4 ;
	mul_f32	 $s6, $s6, 0Fb717f7d1 ;
	add_f32	 $s8, $s7, $s6 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s10, $s9, $s10, 0F388ab355 ;
	mad_f32	 $s10, $s9, $s10, 0Fbb360b61 ;
	mad_f32	 $s10, $s9, $s10, 0F3e2aaaab ;
	neg_f32	 $s10, $s10 ;
	mad_f32	 $s9, $s9, $s10, $s8 ;
	mul_f32	 $s8, $s8, $s9 ;
	sub_f32	 $s9, 0F40000000, $s9 ;
	div_f32	 $s8, $s8, $s9 ;
	neg_f32	 $s6, $s6 ;
	sub_f32	 $s6, $s6, $s8 ;
	sub_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s6, 0F3f800000, $s6 ;
	shl_u32	 $s5, $s5, 23 ;
	add_u32	 $s5, $s6, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s5, $c0, 0F00000000, $s5 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F42b17218 ;
	cmov_b32	 $s5, $c0, $s5, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s4, $s4 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	add_f32	 $s4, $s4, 0F3f800000 ;
	div_f32	 $s4, 0F40000000, $s4 ;
	sub_f32	 $s4, 0F3f800000, $s4 ;
	cmp_lt_b1_f32	 $c0, $s3, 0F3f666666 ;
	mul_f32	 $s5, $s3, $s3 ;
	mad_f32	 $s6, $s5, 0F3e95c65f, 0F3f38db60 ;
	mad_f32	 $s7, $s5, 0F3eaf769c, 0F3f588550 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	mad_f32	 $s7, $s5, 0F382089d8, 0Fbaa18e00 ;
	mad_f32	 $s7, $s5, $s7, 0Fbe7679b1 ;
	mad_f32	 $s8, $s5, 0F384d2b7d, 0Fbabfbc9e ;
	mad_f32	 $s8, $s5, $s8, 0Fbe9058e0 ;
	cmov_b32	 $s7, $c0, $s8, $s7 ;
	div_f32	 $s6, $s7, $s6 ;
	mul_f32	 $s5, $s3, $s5 ;
	mad_f32	 $s5, $s6, $s5, $s3 ;
	cmp_gtu_b1_f32	 $c0, $s3, 0F3f800000 ;
	cmov_b32	 $s4, $c0, $s4, $s5 ;
	cmp_gt_b1_f32	 $c0, $s3, 0F41051592 ;
	cmov_b32	 $s3, $c0, 1065353216, $s4 ;
	xor_b32	 $s1, $s2, $s1 ;
	or_b32	 $s1, $s3, $s1 ;
	add_u32	 $s2, $s2, -956301312 ;
	cmp_gt_b1_u32	 $c0, $s2, 1182793728 ;
	cmov_b32	 $s0, $c0, $s0, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptanh_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[4];
@__amd_amp_Ptanh_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d1, $d0 ;
	st_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	and_b64	 $d2, $d1, 9223372036854775807 ;
	mov_b64	$d3, $d2 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d5 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d5, [$s1 + 8] ;
	ld_readonly_f64	$d6, [$s1] ;
	add_f64	 $d7, $d6, $d5 ;
	cvt_near_f64_s32	$d0, $s0 ;
	fma_f64	 $d1, 0Dbf862e42fefa0000, $d0, $d4 ;
	fma_f64	 $d0, 0Dbd1cf79abc9e3b39, $d0, $d1 ;
	fma_f64	 $d1, $d0, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d1, $d0, $d1, 0D3fa5555555555555 ;
	fma_f64	 $d1, $d0, $d1, 0D3fc5555555555555 ;
	fma_f64	 $d1, $d0, $d1, 0D3fe0000000000000 ;
	fma_f64	 $d1, $d0, $d1, 0D3ff0000000000000 ;
	mul_f64	 $d0, $d0, $d1 ;
	fma_f64	 $d0, $d7, $d0, $d5 ;
	add_f64	 $d0, $d0, $d6 ;
	shr_u64	 $d1, $d0, 52 ;
	cvt_u32_u64	$s1, $d1 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d1, $d0, 4503599627370495 ;
	cmov_b64	 $d5, $c0, $d1, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d1, $c0, $d1, $d5 ;
	cvt_u64_u32	$d5, $s0 ;
	cmov_b64	 $d5, $c0, 2047, $d5 ;
	extract_u64	 $d6, $d0, 52, 11 ;
	cmov_b64	 $d5, $c1, $d6, $d5 ;
	shl_u64	 $d5, $d5, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d5, $d0 ;
	or_b64	 $d0, $d0, $d1 ;
	cmp_nan_b1_f64	 $c0, $d4, $d4 ;
	cmov_b64	 $d0, $c0, $d4, $d0 ;
	cmp_gt_b1_f64	 $c0, $d4, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c0, $d4, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	add_f64	 $d0, $d0, 0D3ff0000000000000 ;
	div_f64	 $d0, 0Dc000000000000000, $d0 ;
	add_f64	 $d0, $d0, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d3, $d3 ;
	fma_f64	 $d4, $d1, 0D3f26af77f334e750, 0D3f912335baec487f ;
	fma_f64	 $d4, $d1, $d4, 0D3fd44d1459bcc5f6 ;
	fma_f64	 $d4, $d1, $d4, 0D3fe5de431d442afd ;
	fma_f64	 $d5, $d1, 0D3f2b68b3cecad284, 0D3f94a3d4cc7a88a9 ;
	fma_f64	 $d5, $d1, $d5, 0D3fd86cd01c4ab94c ;
	fma_f64	 $d5, $d1, $d5, 0D3fea4e925c00b304 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D3feccccccccccccd ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	fma_f64	 $d5, $d1, 0Dbe48cc5a847e6cec, 0Dbf25b483c69835dd ;
	fma_f64	 $d5, $d1, $d5, 0Dbf8defad6e212118 ;
	fma_f64	 $d5, $d1, $d5, 0Dbfcd28597c5ae288 ;
	fma_f64	 $d6, $d1, 0Dbe4e82d10d09af81, 0Dbf2a387bfaf479c9 ;
	fma_f64	 $d6, $d1, $d6, 0Dbf920629b90302ae ;
	fma_f64	 $d6, $d1, $d6, 0Dbfd189b6e8007758 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	div_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d1, $d3, $d1 ;
	mul_f64	 $d1, $d1, $d4 ;
	add_f64	 $d1, $d3, $d1 ;
	cmp_gt_b1_f64	 $c0, $d3, 0D3ff0000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	cmp_gt_b1_u64	 $c0, $d2, 9218868437227405312 ;
	cmp_lt_b1_f64	 $c1, $d3, 0D3e30000000000000 ;
	or_b1	 $c0, $c1, $c0 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cmp_gt_b1_f64	 $c0, $d3, 0D4032b708872320e2 ;
	cmov_b64	 $d0, $c0, 4607182418800017408, $d0 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	xor_b64	 $d1, $d2, $d1 ;
	or_b64	 $d0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptanpi_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ptanpi_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	and_b32	 $s1, $s0, -2147483648 ;
	xor_b32	 $s0, $s1, $s0 ;
	mov_b32	$s2, $s0 ;
	cvt_zeroi_s32_f32	$s3, $s2 ;
	cvt_near_f32_s32	$s4, $s3 ;
	sub_f32	 $s2, $s2, $s4 ;
	sub_f32	 $s4, 0F3f800000, $s2 ;
	add_f32	 $s5, $s2, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s2, 0F3f400000 ;
	cmov_b32	 $s4, $c0, $s5, $s4 ;
	sub_f32	 $s5, 0F3f000000, $s2 ;
	cmp_lt_b1_f32	 $c1, $s2, 0F3f000000 ;
	cmov_b32	 $s4, $c1, $s5, $s4 ;
	cmp_le_b1_f32	 $c2, $s2, 0F3e800000 ;
	cmov_b32	 $s4, $c2, $s2, $s4 ;
	mul_f32	 $s4, $s4, 0F40490fdb ;
	mul_f32	 $s5, $s4, $s4 ;
	mul_f32	 $s6, $s4, $s5 ;
	mad_f32	 $s7, $s5, 0F3c971480, 0Fbf039337 ;
	mad_f32	 $s7, $s5, $s7, 0F3f93f425 ;
	mad_f32	 $s5, $s5, 0Fbc8cedd3, 0F3ec54587 ;
	div_f32	 $s5, $s5, $s7 ;
	mad_f32	 $s4, $s6, $s5, $s4 ;
	frcp_f32	 $s5, $s4 ;
	neg_f32	 $s5, $s5 ;
	cmp_gtu_b1_f32	 $c3, $s2, 0F3f400000 ;
	or_b1	 $c3, $c2, $c3 ;
	cmov_b32	 $s4, $c3, $s4, $s5 ;
	xor_b32	 $s5, $s1, -2147483648 ;
	cmov_b32	 $s6, $c0, $s1, $s5 ;
	cmov_b32	 $s5, $c1, $s5, $s6 ;
	cmov_b32	 $s5, $c2, $s1, $s5 ;
	xor_b32	 $s4, $s4, $s5 ;
	cmp_eq_b1_f32	 $c0, $s2, 0F3f000000 ;
	shl_u32	 $s2, $s3, 31 ;
	xor_b32	 $s2, $s2, $s1 ;
	or_b32	 $s3, $s2, 2139095040 ;
	cmov_b32	 $s3, $c0, $s3, $s4 ;
	cmp_lt_b1_s32	 $c0, $s0, 2139095040 ;
	cmov_b32	 $s1, $c0, $s1, 2143289344 ;
	cmp_lt_b1_s32	 $c0, $s0, 1266679808 ;
	cmov_b32	 $s1, $c0, $s2, $s1 ;
	cmp_lt_b1_s32	 $c0, $s0, 1258291200 ;
	cmov_b32	 $s0, $c0, $s3, $s1 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptanpi_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[4];
@__amd_amp_Ptanpi_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	and_b64	 $d1, $d0, -9223372036854775808 ;
	xor_b64	 $d0, $d1, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	mov_b64	$d2, $d0 ;
	cvt_zeroi_s64_f64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d4, $d3 ;
	sub_f64	 $d2, $d2, $d4 ;
	sub_f64	 $d4, 0D3ff0000000000000, $d2 ;
	add_f64	 $d5, $d2, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d2, 0D3fe8000000000000 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	sub_f64	 $d5, 0D3fe0000000000000, $d2 ;
	cmp_lt_b1_f64	 $c1, $d2, 0D3fe0000000000000 ;
	cmov_b64	 $d4, $c1, $d5, $d4 ;
	cmp_le_b1_f64	 $c2, $d2, 0D3fd0000000000000 ;
	cmov_b64	 $d4, $c2, $d2, $d4 ;
	mul_f64	 $d4, $d4, 0D400921fb54442d18 ;
	cmp_lt_b1_f64	 $c3, $d4, 0Dbfe5c28f5c28f5c3 ;
	cmp_gt_b1_f64	 $c4, $d4, 0D3fe5c28f5c28f5c3 ;
	cmov_b64	 $d5, $c4, 0D3ff0000000000000, 0D0000000000000000 ;
	cmov_b64	 $d5, $c3, 0Dbff0000000000000, $d5 ;
	neg_f64	 $d6, $d5 ;
	fma_f64	 $d7, $d6, $d4, 0D3fe921fb54442d18 ;
	fma_f64	 $d6, $d6, 0D0000000000000000, 0D3c81a62633145c06 ;
	add_f64	 $d6, $d7, $d6 ;
	or_b1	 $c3, $c4, $c3 ;
	cmov_b64	 $d4, $c3, $d6, $d4 ;
	mul_f64	 $d6, $d4, $d4 ;
	mul_f64	 $d7, $d4, 0D0000000000000000 ;
	fma_f64	 $d6, 0D4000000000000000, $d7, $d6 ;
	fma_f64	 $d7, $d6, 0D3f2d5daf289c385a, 0Dbf977c24c7569abb ;
	fma_f64	 $d7, $d6, $d7, 0D3fd7d50f6638564a ;
	fma_f64	 $d0, $d6, 0Dbf2e7517ef6d98f8, 0D3f9ab0f4f80a0acf ;
	fma_f64	 $d0, $d6, $d0, 0Dbfe08046499eb90f ;
	fma_f64	 $d0, $d6, $d0, 0D3ff1dfcb8caa40b8 ;
	div_f64	 $d0, $d7, $d0 ;
	mul_f64	 $d6, $d4, $d6 ;
	fma_f64	 $d0, $d0, $d6, 0D0000000000000000 ;
	add_f64	 $d6, $d4, $d0 ;
	mov_b64	$d7, $d6 ;
	and_b64	 $d7, $d7, -4294967296 ;
	sub_f64	 $d4, $d7, $d4 ;
	sub_f64	 $d0, $d0, $d4 ;
	div_f64	 $d4, 0D3ff0000000000000, $d6 ;
	neg_f64	 $d4, $d4 ;
	mov_b64	$d3, $d4 ;
	and_b64	 $d3, $d3, -4294967296 ;
	fma_f64	 $d7, $d3, $d7, 0D3ff0000000000000 ;
	fma_f64	 $d0, $d3, $d0, $d7 ;
	fma_f64	 $d0, $d0, $d4, $d3 ;
	add_f64	 $d3, $d6, 0Dbff0000000000000 ;
	add_f64	 $d4, $d6, $d6 ;
	div_f64	 $d3, $d4, $d3 ;
	add_f64	 $d3, $d3, 0Dbff0000000000000 ;
	mul_f64	 $d3, $d5, $d3 ;
	cmov_b64	 $d0, $c3, $d3, $d0 ;
	add_f64	 $d3, $d6, 0D3ff0000000000000 ;
	div_f64	 $d3, $d4, $d3 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d3 ;
	mul_f64	 $d3, $d5, $d3 ;
	cmov_b64	 $d3, $c3, $d3, $d6 ;
	cmp_gtu_b1_f64	 $c3, $d2, 0D3fe8000000000000 ;
	or_b1	 $c3, $c2, $c3 ;
	cmov_b64	 $d0, $c3, $d3, $d0 ;
	xor_b64	 $d3, $d1, -9223372036854775808 ;
	cmov_b64	 $d4, $c0, $d1, $d3 ;
	cmov_b64	 $d3, $c1, $d3, $d4 ;
	cmov_b64	 $d3, $c2, $d1, $d3 ;
	xor_b64	 $d0, $d0, $d3 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D3fe0000000000000 ;
	ld_spill_u64	$d3, [%stack][0] ; // 8-byte Folded Reload
	shl_u64	 $d2, $d3, 63 ;
	xor_b64	 $d2, $d2, $d1 ;
	or_b64	 $d3, $d2, 9218868437227405312 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	ld_spill_u64	$d3, [%stack][8] ; // 8-byte Folded Reload
	cmp_lt_b1_s64	 $c0, $d3, 9218868437227405312 ;
	cmov_b64	 $d1, $c0, $d1, 9221120237041090560 ;
	cmp_lt_b1_s64	 $c0, $d3, 4845873199050653696 ;
	cmov_b64	 $d1, $c0, $d2, $d1 ;
	cmp_lt_b1_s64	 $c0, $d3, 4841369599423283200 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptgamma_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ptgamma_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	abs_f32	 $s1, $s0 ;
	mov_b32	$s2, $s1 ;
	and_b32	 $s3, $s2, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s3, 2139095039 ;
	mov_b32	$s4, $s1 ;
	cbr	$c0, @BB163_5 ;
// BB#1:
	mov_b32	$s5, $s3 ;
	cmp_lt_b1_f32	 $c0, $s5, 0F1c800000 ;
	cbr	$c0, @BB163_20 ;
// BB#2:
	cmp_eq_b1_f32	 $c0, $s5, 0F40000000 ;
	cmp_eq_b1_f32	 $c1, $s5, 0F3f800000 ;
	or_b1	 $c0, $c1, $c0 ;
	mov_b32	$s4, 0F00000000 ;
	not_b1	 $c0, $c0 ;
	cbr	$c0, @BB163_8 ;
@BB163_3:
	cmp_ge_b1_f32	 $c0, $s1, 0F00000000 ;
	cbr	$c0, @BB163_5 ;
// BB#4:
	and_b32	 $s3, $s2, -2147483648 ;
	xor_b32	 $s2, $s3, $s2 ;
	mov_b32	$s5, $s2 ;
	cvt_zeroi_s32_f32	$s6, $s5 ;
	cvt_near_f32_s32	$s7, $s6 ;
	sub_f32	 $s5, $s5, $s7 ;
	sub_f32	 $s7, 0F3f800000, $s5 ;
	add_f32	 $s8, $s5, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s5, 0F3f400000 ;
	cmov_b32	 $s7, $c0, $s8, $s7 ;
	sub_f32	 $s8, 0F3f000000, $s5 ;
	cmp_lt_b1_f32	 $c0, $s5, 0F3f000000 ;
	cmov_b32	 $s7, $c0, $s8, $s7 ;
	cmp_le_b1_f32	 $c0, $s5, 0F3e800000 ;
	cmov_b32	 $s7, $c0, $s5, $s7 ;
	mul_f32	 $s7, $s7, 0F40490fdb ;
	mul_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s7, $s8 ;
	mad_f32	 $s10, $s8, 0F3636df25, 0Fb95009d4 ;
	mad_f32	 $s10, $s8, $s10, 0F3c088887 ;
	mad_f32	 $s10, $s8, $s10, 0Fbe2aaaab ;
	mad_f32	 $s7, $s9, $s10, $s7 ;
	mad_f32	 $s9, $s8, 0Fb492923a, 0F37d00ae3 ;
	mad_f32	 $s9, $s8, $s9, 0Fbab60b60 ;
	mad_f32	 $s9, $s8, $s9, 0F3d2aaaab ;
	mad_f32	 $s10, $s8, 0Fbf000000, 0F3f800000 ;
	mul_f32	 $s8, $s8, $s8 ;
	mad_f32	 $s8, $s8, $s9, $s10 ;
	cmp_gtu_b1_f32	 $c1, $s5, 0F3f400000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s5, $c0, $s7, $s8 ;
	shl_u32	 $s6, $s6, 31 ;
	xor_b32	 $s6, $s6, $s3 ;
	xor_b32	 $s5, $s6, $s5 ;
	cmp_lt_b1_s32	 $c0, $s2, 2139095040 ;
	cmov_b32	 $s3, $c0, $s3, 2143289344 ;
	cmp_lt_b1_s32	 $c0, $s2, 1258291200 ;
	cmov_b32	 $s2, $c0, $s5, $s3 ;
	mul_f32	 $s3, $s2, $s1 ;
	abs_f32	 $s3, $s3 ;
	div_f32	 $s3, 0F40490fdb, $s3 ;
	mov_b32	$s5, $s3 ;
	shr_u32	 $s6, $s5, 23 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	or_b32	 $s7, $s5, 1065353216 ;
	add_f32	 $s7, $s7, 0Fbf800000 ;
	cmov_b32	 $s8, $c0, $s7, $s5 ;
	and_b32	 $s9, $s8, 8323072 ;
	shl_u32	 $s10, $s8, 1 ;
	and_b32	 $s10, $s10, 65536 ;
	add_u32	 $s9, $s10, $s9 ;
	or_b32	 $s10, $s9, 1056964608 ;
	and_b32	 $s8, $s8, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s8, $s10, $s8 ;
	shr_u32	 $s10, $s9, 14 ;
	//ldas_global_u32	$s11, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s10, $s11, $s10 ;
	ld_readonly_f32	$s10, [$s10] ;
	mul_f32	 $s8, $s8, $s10 ;
	mul_f32	 $s10, $s8, $s8 ;
	mad_f32	 $s11, $s8, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s8, $s11, $s10, $s8 ;
	neg_f32	 $s8, $s8 ;
	add_u32	 $s6, $s6, -127 ;
	shr_u32	 $s7, $s7, 23 ;
	add_u32	 $s7, $s7, -253 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	cvt_near_f32_s32	$s6, $s6 ;
	mad_f32	 $s7, $s6, 0F3805fdf4, $s8 ;
	shr_u32	 $s8, $s9, 13 ;
	//ldas_global_u32	$s9, [&__math32_LOGE_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s9, [$s8 + 4] ;
	add_f32	 $s7, $s7, $s9 ;
	ld_readonly_f32	$s8, [$s8] ;
	mad_f32	 $s6, $s6, 0F3f317000, $s8 ;
	add_f32	 $s6, $s6, $s7 ;
	add_f32	 $s7, $s3, 0Fbf800000 ;
	add_f32	 $s8, $s7, 0F40000000 ;
	div_f32	 $s8, $s7, $s8 ;
	add_f32	 $s9, $s8, $s8 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s10, $s11, $s10 ;
	mul_f32	 $s8, $s8, $s7 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s8, $s9, $s10, $s8 ;
	add_f32	 $s8, $s8, $s7 ;
	abs_f32	 $s7, $s7 ;
	cmp_lt_b1_f32	 $c0, $s7, 0F3d800000 ;
	cmov_b32	 $s6, $c0, $s8, $s6 ;
	and_b32	 $s7, $s5, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s7, 2139095039 ;
	cmov_b32	 $s3, $c0, $s3, $s6 ;
	cmp_eq_b1_u32	 $c0, $s5, $s7 ;
	cmov_b32	 $s3, $c0, $s3, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s7, 0 ;
	cmov_b32	 $s3, $c0, 0Fff800000, $s3 ;
	sub_f32	 $s4, $s3, $s4 ;
	cmp_eq_b1_f32	 $c0, $s2, 0F00000000 ;
	cmov_b32	 $s4, $c0, 0F7f800000, $s4 ;
@BB163_5:                               // %__lgamma_f32.exit.i
	cmp_lt_b1_f32	 $c0, $s4, 0F00000000 ;
	cmov_b32	 $s2, $c0, 0Fbf000000, 0F3f000000 ;
	mad_f32	 $s2, $s4, 0F3fb8aa3b, $s2 ;
	cvt_zeroi_s32_f32	$s2, $s2 ;
	cvt_near_f32_s32	$s3, $s2 ;
	mad_f32	 $s5, $s3, 0Fbf317180, $s4 ;
	mul_f32	 $s3, $s3, 0Fb717f7d1 ;
	add_f32	 $s6, $s5, $s3 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3331bb4c, 0Fb5ddea0e ;
	mad_f32	 $s8, $s7, $s8, 0F388ab355 ;
	mad_f32	 $s8, $s7, $s8, 0Fbb360b61 ;
	mad_f32	 $s8, $s7, $s8, 0F3e2aaaab ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s7, $s7, $s8, $s6 ;
	mul_f32	 $s6, $s6, $s7 ;
	sub_f32	 $s7, 0F40000000, $s7 ;
	div_f32	 $s6, $s6, $s7 ;
	neg_f32	 $s3, $s3 ;
	sub_f32	 $s3, $s3, $s6 ;
	sub_f32	 $s3, $s3, $s5 ;
	sub_f32	 $s3, 0F3f800000, $s3 ;
	shl_u32	 $s2, $s2, 23 ;
	add_u32	 $s2, $s3, $s2 ;
	cmp_lt_b1_f32	 $c0, $s4, 0Fc2aeac4f ;
	cmov_b32	 $s2, $c0, 0F00000000, $s2 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F42b17218 ;
	cmov_b32	 $s2, $c0, $s2, 0F7f800000 ;
	cmp_nan_b1_f32	 $c0, $s4, $s4 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	cmp_geu_b1_f32	 $c0, $s0, 0F00000000 ;
	cbr	$c0, @BB163_7 ;
// BB#6:
	and_b32	 $s3, $s0, -2147483648 ;
	xor_b32	 $s0, $s3, $s0 ;
	mov_b32	$s4, $s0 ;
	cvt_zeroi_s32_f32	$s5, $s4 ;
	cvt_near_f32_s32	$s6, $s5 ;
	sub_f32	 $s4, $s4, $s6 ;
	sub_f32	 $s6, 0F3f800000, $s4 ;
	add_f32	 $s7, $s4, 0Fbf000000 ;
	cmp_le_b1_f32	 $c0, $s4, 0F3f400000 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	sub_f32	 $s7, 0F3f000000, $s4 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F3f000000 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	cmp_le_b1_f32	 $c0, $s4, 0F3e800000 ;
	cmov_b32	 $s6, $c0, $s4, $s6 ;
	mul_f32	 $s6, $s6, 0F40490fdb ;
	mul_f32	 $s7, $s6, $s6 ;
	mul_f32	 $s8, $s6, $s7 ;
	mad_f32	 $s9, $s7, 0F3636df25, 0Fb95009d4 ;
	mad_f32	 $s9, $s7, $s9, 0F3c088887 ;
	mad_f32	 $s9, $s7, $s9, 0Fbe2aaaab ;
	mad_f32	 $s6, $s8, $s9, $s6 ;
	mad_f32	 $s8, $s7, 0Fb492923a, 0F37d00ae3 ;
	mad_f32	 $s8, $s7, $s8, 0Fbab60b60 ;
	mad_f32	 $s8, $s7, $s8, 0F3d2aaaab ;
	mad_f32	 $s9, $s7, 0Fbf000000, 0F3f800000 ;
	mul_f32	 $s7, $s7, $s7 ;
	mad_f32	 $s7, $s7, $s8, $s9 ;
	cmp_gtu_b1_f32	 $c1, $s4, 0F3f400000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b32	 $s4, $c0, $s6, $s7 ;
	shl_u32	 $s5, $s5, 31 ;
	xor_b32	 $s5, $s5, $s3 ;
	xor_b32	 $s4, $s5, $s4 ;
	cmp_lt_b1_s32	 $c0, $s0, 2139095040 ;
	cmov_b32	 $s3, $c0, $s3, 2143289344 ;
	cmp_lt_b1_s32	 $c0, $s0, 1258291200 ;
	cmov_b32	 $s0, $c0, $s4, $s3 ;
	mul_f32	 $s0, $s0, $s1 ;
	mul_f32	 $s2, $s0, $s2 ;
	div_f32	 $s2, 0F40490fdb, $s2 ;
	brn	@BB163_7 ;
@BB163_8:
	cmp_geu_b1_f32	 $c0, $s5, 0F40000000 ;
	cbr	$c0, @BB163_15 ;
// BB#9:
	shr_u32	 $s4, $s3, 23 ;
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s6, $s3, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c0, $s6, $s3 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s7 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s5, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s8, $s6 ;
	cmp_lt_b1_f32	 $c0, $s8, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s7, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, 0Fff800000, $s4 ;
	neg_f32	 $s3, $s3 ;
	cmp_le_b1_f32	 $c0, $s5, 0F3f666666 ;
	cmov_b32	 $s4, $c0, $s3, 0F00000000 ;
	sub_f32	 $s3, 0F40000000, $s5 ;
	add_f32	 $s7, $s5, 0Fbfbb16c3 ;
	cmp_lt_b1_f32	 $c1, $s5, 0F3fdda618 ;
	cmov_b32	 $s3, $c1, $s7, $s3 ;
	cmp_lt_b1_f32	 $c2, $s5, 0F3f9da620 ;
	cmov_b32	 $s3, $c2, $s6, $s3 ;
	sub_f32	 $s6, 0F3f800000, $s5 ;
	cmov_b32	 $s3, $c0, $s6, $s3 ;
	add_f32	 $s6, $s5, 0Fbeec5b0c ;
	cmp_lt_b1_f32	 $c3, $s5, 0F3f3b4a20 ;
	cmov_b32	 $s3, $c3, $s6, $s3 ;
	cmp_lt_b1_f32	 $c4, $s5, 0F3e6d3308 ;
	cmov_b32	 $s3, $c4, $s5, $s3 ;
	cvt_u32_b1	$s5, $c1 ;
	cmov_b32	 $s5, $c2, 2, $s5 ;
	cmov_b32	 $s5, $c0, 0, $s5 ;
	cmov_b32	 $s5, $c3, 1, $s5 ;
	cmov_b32	 $s5, $c4, 2, $s5 ;
	cmp_eq_b1_u32	 $c0, $s5, 0 ;
	cbr	$c0, @BB163_13 ;
// BB#10:
	cmp_eq_b1_u32	 $c0, $s5, 1 ;
	cbr	$c0, @BB163_14 ;
// BB#11:
	cmp_ne_b1_u32	 $c0, $s5, 2 ;
	cbr	$c0, @BB163_3 ;
// BB#12:
	mad_f32	 $s5, $s3, 0F3b52d5db, 0F3dd572af ;
	mad_f32	 $s5, $s3, $s5, 0F3f44efdf ;
	mad_f32	 $s5, $s3, $s5, 0F4008392d ;
	mad_f32	 $s5, $s3, $s5, 0F401d2ebe ;
	mad_f32	 $s5, $s3, $s5, 0F3f800000 ;
	mad_f32	 $s6, $s3, 0F3c5b3c5e, 0F3e6a7578 ;
	mad_f32	 $s6, $s3, $s6, 0F3f7a4bb2 ;
	mad_f32	 $s6, $s3, $s6, 0F3fba3ae7 ;
	mad_f32	 $s6, $s3, $s6, 0F3f2200f4 ;
	mad_f32	 $s6, $s3, $s6, 0Fbd9e233f ;
	mul_f32	 $s6, $s3, $s6 ;
	div_f32	 $s5, $s6, $s5 ;
	mad_f32	 $s3, $s3, 0Fbf000000, $s5 ;
	add_f32	 $s4, $s4, $s3 ;
	brn	@BB163_3 ;
@BB163_13:
	mul_f32	 $s5, $s3, $s3 ;
	mad_f32	 $s6, $s5, 0F37d383a2, 0F39679767 ;
	mad_f32	 $s6, $s5, $s6, 0F3a9c54a1 ;
	mad_f32	 $s6, $s5, $s6, 0F3bf2027e ;
	mad_f32	 $s6, $s5, $s6, 0F3d89f001 ;
	mad_f32	 $s6, $s5, $s6, 0F3d9e233f ;
	mad_f32	 $s7, $s5, 0F383c2c75, 0F38e28445 ;
	mad_f32	 $s7, $s5, $s7, 0F3a05b634 ;
	mad_f32	 $s7, $s5, $s7, 0F3b3d6ec6 ;
	mad_f32	 $s7, $s5, $s7, 0F3ca89915 ;
	mad_f32	 $s7, $s5, $s7, 0F3ea51a66 ;
	mul_f32	 $s5, $s5, $s7 ;
	mad_f32	 $s5, $s3, $s6, $s5 ;
	mad_f32	 $s3, $s3, 0Fbf000000, $s5 ;
	add_f32	 $s4, $s4, $s3 ;
	brn	@BB163_3 ;
@BB163_14:
	mul_f32	 $s5, $s3, $s3 ;
	mul_f32	 $s6, $s5, $s3 ;
	mad_f32	 $s7, $s6, 0Fb9a3f927, 0F3a66f867 ;
	mad_f32	 $s7, $s6, $s7, 0Fbb7177fe ;
	mad_f32	 $s7, $s6, $s7, 0F3c93373d ;
	mad_f32	 $s7, $s6, $s7, 0Fbe17213c ;
	mad_f32	 $s8, $s6, 0F39afe9f7, 0Fba0d3085 ;
	mad_f32	 $s8, $s6, $s8, 0F3b141699 ;
	mad_f32	 $s8, $s6, $s8, 0Fbc28fcfe ;
	mad_f32	 $s8, $s6, $s8, 0F3d845a15 ;
	mad_f32	 $s3, $s3, $s8, $s7 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s3, $s6, $s3, 0F31e61c52 ;
	neg_f32	 $s3, $s3 ;
	mad_f32	 $s7, $s6, 0F39a57b6b, 0Fbab7f476 ;
	mad_f32	 $s7, $s6, $s7, 0F3bc7e707 ;
	mad_f32	 $s7, $s6, $s7, 0Fbd064d47 ;
	mad_f32	 $s6, $s6, $s7, 0F3ef7b95e ;
	mad_f32	 $s3, $s5, $s6, $s3 ;
	add_f32	 $s3, $s3, 0Fbdf8cdcd ;
	add_f32	 $s4, $s4, $s3 ;
	brn	@BB163_3 ;
@BB163_15:
	cmp_ge_b1_f32	 $c0, $s5, 0F41000000 ;
	cbr	$c0, @BB163_17 ;
// BB#16:
	cvt_zeroi_s32_f32	$s3, $s5 ;
	cvt_near_f32_s32	$s4, $s3 ;
	sub_f32	 $s4, $s5, $s4 ;
	add_f32	 $s5, $s4, 0F40a00000 ;
	cmp_gt_b1_s32	 $c0, $s3, 5 ;
	cmov_b32	 $s5, $c0, $s5, 0F3f800000 ;
	add_f32	 $s6, $s4, 0F40c00000 ;
	cmp_gt_b1_s32	 $c0, $s3, 6 ;
	cmov_b32	 $s6, $c0, $s6, 0F3f800000 ;
	mul_f32	 $s5, $s6, $s5 ;
	add_f32	 $s6, $s4, 0F40800000 ;
	cmp_gt_b1_s32	 $c0, $s3, 4 ;
	cmov_b32	 $s6, $c0, $s6, 0F3f800000 ;
	mul_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s4, 0F40400000 ;
	cmp_gt_b1_s32	 $c0, $s3, 3 ;
	cmov_b32	 $s6, $c0, $s6, 0F3f800000 ;
	mul_f32	 $s5, $s5, $s6 ;
	add_f32	 $s6, $s4, 0F40000000 ;
	cmp_gt_b1_s32	 $c0, $s3, 2 ;
	cmov_b32	 $s3, $c0, $s6, 0F3f800000 ;
	mul_f32	 $s3, $s5, $s3 ;
	mov_b32	$s5, $s3 ;
	shr_u32	 $s6, $s5, 23 ;
	cmp_eq_b1_u32	 $c0, $s6, 0 ;
	or_b32	 $s7, $s5, 1065353216 ;
	add_f32	 $s7, $s7, 0Fbf800000 ;
	cmov_b32	 $s8, $c0, $s7, $s5 ;
	and_b32	 $s9, $s8, 8323072 ;
	shl_u32	 $s10, $s8, 1 ;
	and_b32	 $s10, $s10, 65536 ;
	add_u32	 $s9, $s10, $s9 ;
	or_b32	 $s10, $s9, 1056964608 ;
	and_b32	 $s8, $s8, 8388607 ;
	or_b32	 $s8, $s8, 1056964608 ;
	sub_f32	 $s8, $s10, $s8 ;
	shr_u32	 $s10, $s9, 14 ;
	//ldas_global_u32	$s11, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s10, $s11, $s10 ;
	ld_readonly_f32	$s10, [$s10] ;
	mul_f32	 $s8, $s8, $s10 ;
	mul_f32	 $s10, $s8, $s8 ;
	mad_f32	 $s11, $s8, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s8, $s11, $s10, $s8 ;
	neg_f32	 $s8, $s8 ;
	add_u32	 $s6, $s6, -127 ;
	shr_u32	 $s7, $s7, 23 ;
	add_u32	 $s7, $s7, -253 ;
	cmov_b32	 $s6, $c0, $s7, $s6 ;
	cvt_near_f32_s32	$s6, $s6 ;
	mad_f32	 $s7, $s6, 0F3805fdf4, $s8 ;
	shr_u32	 $s8, $s9, 13 ;
	//ldas_global_u32	$s9, [&__math32_LOGE_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s9, [$s8 + 4] ;
	add_f32	 $s7, $s7, $s9 ;
	ld_readonly_f32	$s8, [$s8] ;
	mad_f32	 $s6, $s6, 0F3f317000, $s8 ;
	add_f32	 $s6, $s6, $s7 ;
	add_f32	 $s7, $s3, 0Fbf800000 ;
	add_f32	 $s8, $s7, 0F40000000 ;
	div_f32	 $s8, $s7, $s8 ;
	add_f32	 $s9, $s8, $s8 ;
	mul_f32	 $s10, $s9, $s9 ;
	mad_f32	 $s11, $s10, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s10, $s11, $s10 ;
	mul_f32	 $s8, $s8, $s7 ;
	neg_f32	 $s8, $s8 ;
	mad_f32	 $s8, $s9, $s10, $s8 ;
	add_f32	 $s8, $s8, $s7 ;
	abs_f32	 $s7, $s7 ;
	cmp_lt_b1_f32	 $c0, $s7, 0F3d800000 ;
	cmov_b32	 $s6, $c0, $s8, $s6 ;
	and_b32	 $s7, $s5, 2147483647 ;
	cmp_gt_b1_u32	 $c0, $s7, 2139095039 ;
	cmov_b32	 $s3, $c0, $s3, $s6 ;
	cmp_eq_b1_u32	 $c0, $s5, $s7 ;
	cmov_b32	 $s3, $c0, $s3, 0F7fc00000 ;
	cmp_eq_b1_u32	 $c0, $s7, 0 ;
	cmov_b32	 $s3, $c0, 0Fff800000, $s3 ;
	mad_f32	 $s5, $s4, 0F36f5d7bd, 0F3a4beed6 ;
	mad_f32	 $s5, $s4, $s5, 0F3c98bf54 ;
	mad_f32	 $s5, $s4, $s5, 0F3e300f6e ;
	mad_f32	 $s5, $s4, $s5, 0F3f38d0c5 ;
	mad_f32	 $s5, $s4, $s5, 0F3fb22d3b ;
	mad_f32	 $s5, $s4, $s5, 0F3f800000 ;
	mad_f32	 $s6, $s4, 0F3805ff67, 0F3af135b4 ;
	mad_f32	 $s6, $s4, $s6, 0F3cda40e4 ;
	mad_f32	 $s6, $s4, $s6, 0F3e15dce6 ;
	mad_f32	 $s6, $s4, $s6, 0F3ea6cc7a ;
	mad_f32	 $s6, $s4, $s6, 0F3e5c245a ;
	mad_f32	 $s6, $s4, $s6, 0Fbd9e233f ;
	mul_f32	 $s6, $s4, $s6 ;
	div_f32	 $s5, $s6, $s5 ;
	mad_f32	 $s4, $s4, 0F3f000000, $s5 ;
	add_f32	 $s4, $s4, $s3 ;
	brn	@BB163_3 ;
@BB163_17:
	shr_u32	 $s4, $s3, 23 ;
	cmp_geu_b1_f32	 $c0, $s5, 0F5c800000 ;
	cbr	$c0, @BB163_19 ;
// BB#18:
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s6, $s3, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c0, $s6, $s3 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s7 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s5, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c0, $s6, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s7, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s3, $c0, 0Fff800000, $s4 ;
	add_f32	 $s3, $s3, 0Fbf800000 ;
	div_f32	 $s4, 0F3f800000, $s5 ;
	mul_f32	 $s6, $s4, $s4 ;
	mad_f32	 $s7, $s6, 0Fbad5c4e8, 0F3a5b3dd2 ;
	mad_f32	 $s7, $s6, $s7, 0Fba1c065c ;
	mad_f32	 $s7, $s6, $s7, 0F3a500cfd ;
	mad_f32	 $s7, $s6, $s7, 0Fbb360b61 ;
	mad_f32	 $s6, $s6, $s7, 0F3daaaaab ;
	mad_f32	 $s4, $s4, $s6, 0F3ed67f1d ;
	add_f32	 $s5, $s5, 0Fbf000000 ;
	mad_f32	 $s4, $s5, $s3, $s4 ;
	brn	@BB163_3 ;
@BB163_19:
	cmp_eq_b1_u32	 $c0, $s4, 0 ;
	or_b32	 $s6, $s3, 1065353216 ;
	add_f32	 $s6, $s6, 0Fbf800000 ;
	cmov_b32	 $s7, $c0, $s6, $s3 ;
	and_b32	 $s8, $s7, 8323072 ;
	shl_u32	 $s9, $s7, 1 ;
	and_b32	 $s9, $s9, 65536 ;
	add_u32	 $s8, $s9, $s8 ;
	or_b32	 $s9, $s8, 1056964608 ;
	and_b32	 $s7, $s7, 8388607 ;
	or_b32	 $s7, $s7, 1056964608 ;
	sub_f32	 $s7, $s9, $s7 ;
	shr_u32	 $s9, $s8, 14 ;
	//ldas_global_u32	$s10, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s9, $s10, $s9 ;
	ld_readonly_f32	$s9, [$s9] ;
	mul_f32	 $s7, $s7, $s9 ;
	mul_f32	 $s9, $s7, $s7 ;
	mad_f32	 $s10, $s7, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s7, $s10, $s9, $s7 ;
	neg_f32	 $s7, $s7 ;
	add_u32	 $s4, $s4, -127 ;
	shr_u32	 $s6, $s6, 23 ;
	add_u32	 $s6, $s6, -253 ;
	cmov_b32	 $s4, $c0, $s6, $s4 ;
	cvt_near_f32_s32	$s4, $s4 ;
	mad_f32	 $s6, $s4, 0F3805fdf4, $s7 ;
	shr_u32	 $s7, $s8, 13 ;
	//ldas_global_u32	$s8, [&__math32_LOGE_TBL] ;
	add_u32	 $s7, $s8, $s7 ;
	ld_readonly_f32	$s8, [$s7 + 4] ;
	add_f32	 $s6, $s6, $s8 ;
	ld_readonly_f32	$s7, [$s7] ;
	mad_f32	 $s4, $s4, 0F3f317000, $s7 ;
	add_f32	 $s4, $s4, $s6 ;
	add_f32	 $s6, $s5, 0Fbf800000 ;
	add_f32	 $s7, $s6, 0F40000000 ;
	div_f32	 $s7, $s6, $s7 ;
	add_f32	 $s8, $s7, $s7 ;
	mul_f32	 $s9, $s8, $s8 ;
	mad_f32	 $s10, $s9, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s9, $s10, $s9 ;
	mul_f32	 $s7, $s7, $s6 ;
	neg_f32	 $s7, $s7 ;
	mad_f32	 $s7, $s8, $s9, $s7 ;
	add_f32	 $s7, $s7, $s6 ;
	abs_f32	 $s6, $s6 ;
	cmp_lt_b1_f32	 $c0, $s6, 0F3d800000 ;
	cmov_b32	 $s4, $c0, $s7, $s4 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s4, $c0, 0Fff800000, $s4 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	mul_f32	 $s4, $s5, $s4 ;
	brn	@BB163_3 ;
@BB163_20:
	shr_u32	 $s2, $s3, 23 ;
	cmp_eq_b1_u32	 $c0, $s2, 0 ;
	or_b32	 $s4, $s3, 1065353216 ;
	add_f32	 $s4, $s4, 0Fbf800000 ;
	cmov_b32	 $s6, $c0, $s4, $s3 ;
	and_b32	 $s7, $s6, 8323072 ;
	shl_u32	 $s8, $s6, 1 ;
	and_b32	 $s8, $s8, 65536 ;
	add_u32	 $s7, $s8, $s7 ;
	or_b32	 $s8, $s7, 1056964608 ;
	and_b32	 $s6, $s6, 8388607 ;
	or_b32	 $s6, $s6, 1056964608 ;
	sub_f32	 $s6, $s8, $s6 ;
	shr_u32	 $s8, $s7, 14 ;
	//ldas_global_u32	$s9, [&__math32_LOG_INV_TBL] ;
	add_u32	 $s8, $s9, $s8 ;
	ld_readonly_f32	$s8, [$s8] ;
	mul_f32	 $s6, $s6, $s8 ;
	mul_f32	 $s8, $s6, $s6 ;
	mad_f32	 $s9, $s6, 0F3eaaaaab, 0F3f000000 ;
	mad_f32	 $s6, $s9, $s8, $s6 ;
	neg_f32	 $s6, $s6 ;
	add_u32	 $s2, $s2, -127 ;
	shr_u32	 $s4, $s4, 23 ;
	add_u32	 $s4, $s4, -253 ;
	cmov_b32	 $s2, $c0, $s4, $s2 ;
	cvt_near_f32_s32	$s2, $s2 ;
	mad_f32	 $s4, $s2, 0F3805fdf4, $s6 ;
	shr_u32	 $s6, $s7, 13 ;
	//ldas_global_u32	$s7, [&__math32_LOGE_TBL] ;
	add_u32	 $s6, $s7, $s6 ;
	ld_readonly_f32	$s7, [$s6 + 4] ;
	add_f32	 $s4, $s4, $s7 ;
	ld_readonly_f32	$s6, [$s6] ;
	mad_f32	 $s2, $s2, 0F3f317000, $s6 ;
	add_f32	 $s2, $s2, $s4 ;
	add_f32	 $s4, $s5, 0Fbf800000 ;
	add_f32	 $s5, $s4, 0F40000000 ;
	div_f32	 $s5, $s4, $s5 ;
	add_f32	 $s6, $s5, $s5 ;
	mul_f32	 $s7, $s6, $s6 ;
	mad_f32	 $s8, $s7, 0F3c4ccccd, 0F3daaaaab ;
	mul_f32	 $s7, $s8, $s7 ;
	mul_f32	 $s5, $s5, $s4 ;
	neg_f32	 $s5, $s5 ;
	mad_f32	 $s5, $s6, $s7, $s5 ;
	add_f32	 $s5, $s5, $s4 ;
	abs_f32	 $s4, $s4 ;
	cmp_lt_b1_f32	 $c0, $s4, 0F3d800000 ;
	cmov_b32	 $s2, $c0, $s5, $s2 ;
	cmp_eq_b1_u32	 $c0, $s3, 0 ;
	cmov_b32	 $s2, $c0, 0Fff800000, $s2 ;
	neg_f32	 $s4, $s2 ;
	brn	@BB163_5 ;
@BB163_7:                               // %__tgamma_f32.exit
	st_arg_u32 $s2, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptgamma_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
	spill_u32 %stack[12];
@__amd_amp_Ptgamma_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	abs_f64	 $d0, $d0 ;
	st_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	and_b64	 $d0, $d0, 9223372036854775807 ;
	mov_b64	$d1, $d0 ;
	cmp_gt_b1_u64	 $c0, $d0, 9218868437227405311 ;
	cbr	$c0, @BB164_11 ;
// BB#1:
	cmp_lt_b1_f64	 $c0, $d1, 0D3b90000000000000 ;
	cbr	$c0, @BB164_7 ;
// BB#2:
	cmp_ge_b1_f64	 $c0, $d1, 0D4000000000000000 ;
	cbr	$c0, @BB164_16 ;
// BB#3:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d3, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d3, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	neg_f64	 $d0, $d0 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3feccccc00000000 ;
	cmov_b64	 $d0, $c0, $d0, 0D0000000000000000 ;
	sub_f64	 $d3, 0D4000000000000000, $d1 ;
	add_f64	 $d4, $d1, 0Dbff762d86356be3f ;
	cmp_lt_b1_f64	 $c1, $d1, 0D3ffbb4c300000000 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	cmp_lt_b1_f64	 $c2, $d1, 0D3ff3b4c400000000 ;
	cmov_b64	 $d2, $c2, $d2, $d3 ;
	sub_f64	 $d3, 0D3ff0000000000000, $d1 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	add_f64	 $d3, $d1, 0Dbfdd8b618d5af8fc ;
	cmp_lt_b1_f64	 $c3, $d1, 0D3fe7694400000000 ;
	cmov_b64	 $d2, $c3, $d3, $d2 ;
	cmp_lt_b1_f64	 $c4, $d1, 0D3fcda66100000000 ;
	cmov_b64	 $d1, $c4, $d1, $d2 ;
	cvt_u32_b1	$s0, $c1 ;
	cmov_b32	 $s0, $c2, 2, $s0 ;
	cmov_b32	 $s0, $c0, 0, $s0 ;
	cmov_b32	 $s0, $c3, 1, $s0 ;
	cmov_b32	 $s0, $c4, 2, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cbr	$c0, @BB164_8 ;
// BB#4:
	cmp_eq_b1_u32	 $c0, $s0, 1 ;
	cbr	$c0, @BB164_14 ;
// BB#5:
	cmp_eq_b1_u32	 $c0, $s0, 2 ;
	cbr	$c0, @BB164_15 ;
// BB#6:
	mov_b64	$d1, $d0 ;
	brn	@BB164_9 ;
@BB164_7:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	neg_f64	 $d1, $d0 ;
	brn	@BB164_11 ;
@BB164_8:
	fma_f64	 $d2, $d1, 0D3f07858e90a45837, 0D3efa7074428cfa52 ;
	fma_f64	 $d2, $d1, $d2, 0D3f1c5088987dfb07 ;
	fma_f64	 $d2, $d1, $d2, 0D3f2cf2eced10e54d ;
	fma_f64	 $d2, $d1, $d2, 0D3f40b6c689b99c00 ;
	fma_f64	 $d2, $d1, $d2, 0D3f538a94116f3f5d ;
	fma_f64	 $d2, $d1, $d2, 0D3f67add8ccb7926b ;
	fma_f64	 $d2, $d1, $d2, 0D3f7e404fb68fefe8 ;
	fma_f64	 $d2, $d1, $d2, 0D3f951322ac92547b ;
	fma_f64	 $d2, $d1, $d2, 0D3fb13e001a5562a7 ;
	fma_f64	 $d2, $d1, $d2, 0D3fd4a34cc4a60fad ;
	fma_f64	 $d2, $d1, $d2, 0D3fb3c467e37db0c8 ;
	add_f64	 $d2, $d2, 0Dbfe0000000000000 ;
	fma_f64	 $d1, $d1, $d2, $d0 ;
@BB164_9:
	ld_spill_u64	$d0, [%stack][0] ; // 8-byte Folded Reload
	cmp_ge_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cbr	$c0, @BB164_11 ;
// BB#10:
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	and_b64	 $d2, $d0, -9223372036854775808 ;
	st_spill_u64	$d2, [%stack][32] ; // 8-byte Folded Reload
	xor_b64	 $d0, $d2, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	st_spill_u64	$d0, [%stack][40] ; // 8-byte Folded Reload
	cvt_zeroi_s64_f64	$d2, $d0 ;
	st_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d3, $d2 ;
	sub_f64	 $d3, $d0, $d3 ;
	sub_f64	 $d4, 0D3ff0000000000000, $d3 ;
	add_f64	 $d5, $d3, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d3, 0D3fe8000000000000 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	sub_f64	 $d5, 0D3fe0000000000000, $d3 ;
	cmp_lt_b1_f64	 $c0, $d3, 0D3fe0000000000000 ;
	cmov_b64	 $d4, $c0, $d5, $d4 ;
	cmp_le_b1_f64	 $c0, $d3, 0D3fd0000000000000 ;
	cmov_b64	 $d4, $c0, $d3, $d4 ;
	mul_f64	 $d4, $d4, 0D400921fb54442d18 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, 0D3fe0000000000000 ;
	sub_f64	 $d7, 0D3ff0000000000000, $d6 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d7 ;
	sub_f64	 $d0, $d0, $d6 ;
	fma_f64	 $d0, $d4, 0D0000000000000000, $d0 ;
	fma_f64	 $d6, 0Dbda907db46cc5e42, $d5, 0D3e21eeb69037ab78 ;
	fma_f64	 $d6, $d6, $d5, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d6, $d6, $d5, 0D3efa01a019f4ec90 ;
	fma_f64	 $d6, $d6, $d5, 0Dbf56c16c16c16967 ;
	fma_f64	 $d6, $d6, $d5, 0D3fa5555555555555 ;
	mul_f64	 $d2, $d5, $d5 ;
	fma_f64	 $d0, $d6, $d2, $d0 ;
	add_f64	 $d0, $d7, $d0 ;
	fma_f64	 $d2, 0D3de5e0b2f9a43bb8, $d5, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d2, $d2, $d5, 0D3ec71de3796cde01 ;
	fma_f64	 $d2, $d2, $d5, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d2, $d2, $d5, 0D3f81111111110bb3 ;
	mul_f64	 $d6, $d5, $d4 ;
	neg_f64	 $d6, $d6 ;
	fma_f64	 $d2, $d6, $d2, 0D0000000000000000 ;
	fma_f64	 $d2, $d2, $d5, 0D8000000000000000 ;
	fma_f64	 $d2, $d6, 0Dbfc5555555555555, $d2 ;
	sub_f64	 $d2, $d4, $d2 ;
	cmp_gtu_b1_f64	 $c1, $d3, 0D3fe8000000000000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][24] ; // 8-byte Folded Reload
	shl_u64	 $d2, $d2, 63 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	xor_b64	 $d2, $d2, $d3 ;
	xor_b64	 $d0, $d2, $d0 ;
	ld_spill_u64	$d2, [%stack][8] ; // 8-byte Folded Reload
	cmp_lt_b1_s64	 $c0, $d2, 9218868437227405312 ;
	cmov_b64	 $d2, $c0, $d3, 9221120237041090560 ;
	ld_spill_u64	$d3, [%stack][40] ; // 8-byte Folded Reload
	cmp_lt_b1_f64	 $c0, $d3, 0D4330000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d2 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d2, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d2, $d0, $d2 ;
	abs_f64	 $d2, $d2 ;
	div_f64	 $d2, 0D400921fb54442d18, $d2 ;
	mov_b64	$d3, $d2 ;
	cmp_lt_b1_u64	 $c0, $d3, 4503599627370496 ;
	or_b64	 $d4, $d3, 274719577269600256 ;
	add_f64	 $d4, $d4, 0D83d0000000000000 ;
	cmov_b64	 $d3, $c0, $d4, $d3 ;
	shr_s64	 $d4, $d3, 45 ;
	cvt_u32_u64	$s0, $d4 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d4, $s0 ;
	mul_f64	 $d4, $d4, 0D3f80000000000000 ;
	and_b64	 $d5, $d3, 4503599627370495 ;
	or_b64	 $d5, $d5, 4602678819172646912 ;
	sub_f64	 $d5, $d5, $d4 ;
	fma_f64	 $d4, $d5, 0D3fe0000000000000, $d4 ;
	div_f64	 $d4, $d5, $d4 ;
	mul_f64	 $d5, $d4, $d4 ;
	fma_f64	 $d6, $d5, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d6, $d5, $d6, 0D3fb5555555555557 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d4, $d4, $d5, $d4 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d5, [$s1] ;
	add_f64	 $d4, $d5, $d4 ;
	shr_u64	 $d3, $d3, 52 ;
	cvt_u32_u64	$s1, $d3 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d3, $s1 ;
	fma_f64	 $d4, $d3, 0D3e6efa39ef35793c, $d4 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d5, [$s0] ;
	fma_f64	 $d3, $d3, 0D3fe62e42e0000000, $d5 ;
	add_f64	 $d3, $d3, $d4 ;
	add_f64	 $d4, $d2, 0Dbff0000000000000 ;
	add_f64	 $d5, $d4, 0D4000000000000000 ;
	div_f64	 $d5, $d4, $d5 ;
	add_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, $d6 ;
	mul_f64	 $d6, $d6, $d7 ;
	fma_f64	 $d0, $d7, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d0, $d7, $d0, 0D3f89999999bac6d4 ;
	fma_f64	 $d0, $d7, $d0, 0D3fb55555555554e6 ;
	mul_f64	 $d5, $d4, $d5 ;
	neg_f64	 $d5, $d5 ;
	fma_f64	 $d0, $d6, $d0, $d5 ;
	add_f64	 $d0, $d4, $d0 ;
	cmp_le_b1_f64	 $c0, $d2, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d2, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d0, $d3 ;
	class_f64	 $c0, $d2, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d2, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d2, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	sub_f64	 $d1, $d0, $d1 ;
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	cmp_eq_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0D7ff0000000000000, $d1 ;
@BB164_11:                              // %__lgamma_f64.exit.i
	mul_f64	 $d0, $d1, 0D40571547652b82fe ;
	cvt_zeroi_s32_f64	$s0, $d0 ;
	and_b32	 $s1, $s0, 63 ;
	shl_u32	 $s1, $s1, 4 ;
	//ldas_global_u32	$s2, [&__math64_TWO_TO_JBY64_EP] ;
	add_u32	 $s1, $s2, $s1 ;
	ld_readonly_f64	$d0, [$s1 + 8] ;
	ld_readonly_f64	$d2, [$s1] ;
	add_f64	 $d3, $d2, $d0 ;
	cvt_near_f64_s32	$d4, $s0 ;
	fma_f64	 $d5, 0Dbf862e42fefa0000, $d4, $d1 ;
	fma_f64	 $d4, 0Dbd1cf79abc9e3b39, $d4, $d5 ;
	fma_f64	 $d5, $d4, 0D3f56c16c16c16c17, 0D3f81111111111111 ;
	fma_f64	 $d5, $d4, $d5, 0D3fa5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fc5555555555555 ;
	fma_f64	 $d5, $d4, $d5, 0D3fe0000000000000 ;
	fma_f64	 $d5, $d4, $d5, 0D3ff0000000000000 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d0, $d3, $d4, $d0 ;
	add_f64	 $d0, $d0, $d2 ;
	shr_u64	 $d2, $d0, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	shr_s32	 $s0, $s0, 6 ;
	add_u32	 $s2, $s1, $s0 ;
	sub_u32	 $s3, -2147483648, $s0 ;
	cmp_gt_b1_s32	 $c0, $s3, $s1 ;
	cmp_lt_b1_s32	 $c1, $s0, 1 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s2, $c0, -2147483648, $s2 ;
	sub_u32	 $s3, 2147483647, $s0 ;
	cmp_lt_b1_s32	 $c0, $s3, $s1 ;
	cmp_gt_b1_s32	 $c1, $s0, 0 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b32	 $s0, $c0, 2147483647, $s2 ;
	max_s32	 $s0, $s0, 0 ;
	min_s32	 $s0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c0, $s0, 2047 ;
	cmp_eq_b1_u32	 $c1, $s0, 0 ;
	or_b1	 $c0, $c1, $c0 ;
	cmp_eq_b1_u32	 $c1, $s1, 0 ;
	or_b1	 $c0, $c0, $c1 ;
	not_b1	 $c0, $c0 ;
	and_b64	 $d2, $d0, 4503599627370495 ;
	cmov_b64	 $d3, $c0, $d2, 0 ;
	cmp_eq_b1_u32	 $c0, $s1, 2047 ;
	cmov_b64	 $d2, $c0, $d2, $d3 ;
	cvt_u64_u32	$d3, $s0 ;
	cmov_b64	 $d3, $c0, 2047, $d3 ;
	extract_u64	 $d4, $d0, 52, 11 ;
	cmov_b64	 $d3, $c1, $d4, $d3 ;
	shl_u64	 $d3, $d3, 52 ;
	and_b64	 $d0, $d0, -9223372036854775808 ;
	or_b64	 $d0, $d3, $d0 ;
	or_b64	 $d0, $d0, $d2 ;
	cmp_nan_b1_f64	 $c0, $d1, $d1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	cmp_gt_b1_f64	 $c0, $d1, 0D40862e42fefa39ef ;
	cmov_b64	 $d0, $c0, 0D7ff0000000000000, $d0 ;
	cmp_lt_b1_f64	 $c0, $d1, 0Dc0874910d52d3051 ;
	cmov_b64	 $d0, $c0, 0D0000000000000000, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	ld_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	cmp_geu_b1_f64	 $c0, $d0, 0D0000000000000000 ;
	cbr	$c0, @BB164_13 ;
// BB#12:
	and_b64	 $d1, $d0, -9223372036854775808 ;
	st_spill_u64	$d1, [%stack][32] ; // 8-byte Folded Reload
	xor_b64	 $d0, $d1, $d0 ;
	st_spill_u64	$d0, [%stack][16] ; // 8-byte Folded Reload
	mov_b64	$d2, $d0 ;
	cvt_zeroi_s64_f64	$d3, $d2 ;
	st_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	cvt_near_f64_s64	$d4, $d3 ;
	sub_f64	 $d4, $d2, $d4 ;
	sub_f64	 $d5, 0D3ff0000000000000, $d4 ;
	add_f64	 $d6, $d4, 0Dbfe0000000000000 ;
	cmp_le_b1_f64	 $c0, $d4, 0D3fe8000000000000 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	sub_f64	 $d6, 0D3fe0000000000000, $d4 ;
	cmp_lt_b1_f64	 $c0, $d4, 0D3fe0000000000000 ;
	cmov_b64	 $d5, $c0, $d6, $d5 ;
	cmp_le_b1_f64	 $c0, $d4, 0D3fd0000000000000 ;
	cmov_b64	 $d5, $c0, $d4, $d5 ;
	mul_f64	 $d5, $d5, 0D400921fb54442d18 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d7, $d6, 0D3fe0000000000000 ;
	sub_f64	 $d0, 0D3ff0000000000000, $d7 ;
	sub_f64	 $d1, 0D3ff0000000000000, $d0 ;
	sub_f64	 $d1, $d1, $d7 ;
	fma_f64	 $d1, $d5, 0D0000000000000000, $d1 ;
	fma_f64	 $d7, 0Dbda907db46cc5e42, $d6, 0D3e21eeb69037ab78 ;
	fma_f64	 $d7, $d7, $d6, 0Dbe927e4fa17f65f6 ;
	fma_f64	 $d7, $d7, $d6, 0D3efa01a019f4ec90 ;
	fma_f64	 $d7, $d7, $d6, 0Dbf56c16c16c16967 ;
	fma_f64	 $d7, $d7, $d6, 0D3fa5555555555555 ;
	mul_f64	 $d3, $d6, $d6 ;
	fma_f64	 $d1, $d7, $d3, $d1 ;
	add_f64	 $d0, $d0, $d1 ;
	fma_f64	 $d1, 0D3de5e0b2f9a43bb8, $d6, 0Dbe5ae600b42fdfa7 ;
	fma_f64	 $d1, $d1, $d6, 0D3ec71de3796cde01 ;
	fma_f64	 $d1, $d1, $d6, 0Dbf2a01a019e83e5c ;
	fma_f64	 $d1, $d1, $d6, 0D3f81111111110bb3 ;
	mul_f64	 $d3, $d6, $d5 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d1, $d3, $d1, 0D0000000000000000 ;
	fma_f64	 $d1, $d1, $d6, 0D8000000000000000 ;
	fma_f64	 $d1, $d3, 0Dbfc5555555555555, $d1 ;
	sub_f64	 $d1, $d5, $d1 ;
	cmp_gtu_b1_f64	 $c1, $d4, 0D3fe8000000000000 ;
	or_b1	 $c0, $c0, $c1 ;
	cmov_b64	 $d0, $c0, $d1, $d0 ;
	ld_spill_u64	$d3, [%stack][24] ; // 8-byte Folded Reload
	shl_u64	 $d1, $d3, 63 ;
	ld_spill_u64	$d3, [%stack][32] ; // 8-byte Folded Reload
	xor_b64	 $d1, $d1, $d3 ;
	xor_b64	 $d0, $d1, $d0 ;
	ld_spill_u64	$d1, [%stack][16] ; // 8-byte Folded Reload
	cmp_lt_b1_s64	 $c0, $d1, 9218868437227405312 ;
	cmov_b64	 $d1, $c0, $d3, 9221120237041090560 ;
	cmp_lt_b1_f64	 $c0, $d2, 0D4330000000000000 ;
	cmov_b64	 $d0, $c0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][0] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d1 ;
	ld_spill_u64	$d1, [%stack][8] ; // 8-byte Folded Reload
	mul_f64	 $d0, $d0, $d1 ;
	div_f64	 $d0, 0D400921fb54442d18, $d0 ;
	st_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	brn	@BB164_13 ;
@BB164_14:
	fma_f64	 $d2, $d1, 0D3f35fd3ee8c2d3f4, 0Dbf347f24ecc38c38 ;
	fma_f64	 $d2, $d1, $d2, 0D3f34af6d6c0ebbf7 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf41a6109c73e0ec ;
	fma_f64	 $d2, $d1, $d2, 0D3f4cdf0cef61a8e9 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf56fe8ebf2d1af1 ;
	fma_f64	 $d2, $d1, $d2, 0D3f6282d32e15c915 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf6e2effb3e914d7 ;
	fma_f64	 $d2, $d1, $d2, 0D3f78fce0e370e344 ;
	fma_f64	 $d2, $d1, $d2, 0Dbf851f9fba91ec6a ;
	fma_f64	 $d2, $d1, $d2, 0D3f9266e7970af9ec ;
	fma_f64	 $d2, $d1, $d2, 0Dbfa0c9a8df35b713 ;
	fma_f64	 $d2, $d1, $d2, 0D3fb08b4294d5419b ;
	fma_f64	 $d2, $d1, $d2, 0Dbfc2e4278dc6c509 ;
	fma_f64	 $d2, $d1, $d2, 0D3fdef72bc8ee38a2 ;
	mul_f64	 $d1, $d1, $d1 ;
	fma_f64	 $d1, $d1, $d2, 0D3c50c7caa48a971f ;
	add_f64	 $d1, $d1, 0Dbfbf19b9bcc38a42 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB164_9 ;
@BB164_15:
	fma_f64	 $d2, $d1, 0D3f6a5abb57d0cf61, 0D3fbaae55d6537c88 ;
	fma_f64	 $d2, $d1, $d2, 0D3fe89dfbe45050af ;
	fma_f64	 $d2, $d1, $d2, 0D40010725a42b18f5 ;
	fma_f64	 $d2, $d1, $d2, 0D4003a5d7c2bd619c ;
	fma_f64	 $d2, $d1, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, $d1, 0D3f8b678bbf2bab09, 0D3fcd4eaef6010924 ;
	fma_f64	 $d3, $d1, $d3, 0D3fef497644ea8450 ;
	fma_f64	 $d3, $d1, $d3, 0D3ff7475cd119bd6f ;
	fma_f64	 $d3, $d1, $d3, 0D3fe4401e8b005dff ;
	fma_f64	 $d3, $d1, $d3, 0Dbfb3c467e37db0c8 ;
	mul_f64	 $d3, $d1, $d3 ;
	div_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d1, 0Dbfe0000000000000, $d1, $d2 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB164_9 ;
@BB164_16:
	cmp_ge_b1_f64	 $c0, $d1, 0D4020000000000000 ;
	cbr	$c0, @BB164_18 ;
// BB#17:
	cvt_zeroi_s32_f64	$s0, $d1 ;
	cvt_near_f64_s32	$d0, $s0 ;
	sub_f64	 $d0, $d1, $d0 ;
	add_f64	 $d1, $d0, 0D4014000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 5 ;
	cmov_b64	 $d1, $c0, $d1, 0D3ff0000000000000 ;
	add_f64	 $d2, $d0, 0D4018000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 6 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d2, $d1 ;
	add_f64	 $d2, $d0, 0D4010000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 4 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0D4008000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 3 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	add_f64	 $d2, $d0, 0D4000000000000000 ;
	cmp_gt_b1_s32	 $c0, $s0, 2 ;
	cmov_b64	 $d2, $c0, $d2, 0D3ff0000000000000 ;
	mul_f64	 $d1, $d1, $d2 ;
	mov_b64	$d2, $d1 ;
	cmp_lt_b1_u64	 $c0, $d2, 4503599627370496 ;
	or_b64	 $d3, $d2, 274719577269600256 ;
	add_f64	 $d3, $d3, 0D83d0000000000000 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	shr_s64	 $d3, $d2, 45 ;
	cvt_u32_u64	$s0, $d3 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d3, $s0 ;
	mul_f64	 $d3, $d3, 0D3f80000000000000 ;
	and_b64	 $d4, $d2, 4503599627370495 ;
	or_b64	 $d4, $d4, 4602678819172646912 ;
	sub_f64	 $d4, $d4, $d3 ;
	fma_f64	 $d3, $d4, 0D3fe0000000000000, $d3 ;
	div_f64	 $d3, $d4, $d3 ;
	mul_f64	 $d4, $d3, $d3 ;
	fma_f64	 $d5, $d4, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d5, $d4, $d5, 0D3fb5555555555557 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d3, $d3, $d4, $d3 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d4, [$s1] ;
	add_f64	 $d3, $d4, $d3 ;
	shr_u64	 $d2, $d2, 52 ;
	cvt_u32_u64	$s1, $d2 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d2, $s1 ;
	fma_f64	 $d3, $d2, 0D3e6efa39ef35793c, $d3 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d4, [$s0] ;
	fma_f64	 $d2, $d2, 0D3fe62e42e0000000, $d4 ;
	add_f64	 $d2, $d2, $d3 ;
	add_f64	 $d3, $d1, 0Dbff0000000000000 ;
	add_f64	 $d4, $d3, 0D4000000000000000 ;
	div_f64	 $d4, $d3, $d4 ;
	add_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d6, $d5, $d5 ;
	mul_f64	 $d5, $d5, $d6 ;
	fma_f64	 $d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d7, $d6, $d7, 0D3f89999999bac6d4 ;
	fma_f64	 $d6, $d6, $d7, 0D3fb55555555554e6 ;
	mul_f64	 $d4, $d3, $d4 ;
	neg_f64	 $d4, $d4 ;
	fma_f64	 $d4, $d5, $d6, $d4 ;
	add_f64	 $d3, $d3, $d4 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d2, $c0, $d3, $d2 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d2, $c0, $d2, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d1, $c0, 0Dfff0000000000000, $d2 ;
	fma_f64	 $d2, $d0, 0D3edebaf7a5b38140, 0D3f497ddaca41a95b ;
	fma_f64	 $d2, $d0, $d2, 0D3f9317ea742ed475 ;
	fma_f64	 $d2, $d0, $d2, 0D3fc601edccfbdf27 ;
	fma_f64	 $d2, $d0, $d2, 0D3fe71a1893d3dcdc ;
	fma_f64	 $d2, $d0, $d2, 0D3ff645a762c4ab74 ;
	fma_f64	 $d2, $d0, $d2, 0D3ff0000000000000 ;
	fma_f64	 $d3, $d0, 0D3f00bfecdd17e945, 0D3f5e26b67368f239 ;
	fma_f64	 $d3, $d0, $d3, 0D3f9b481c7e939961 ;
	fma_f64	 $d3, $d0, $d3, 0D3fc2bb9cbee5f2f7 ;
	fma_f64	 $d3, $d0, $d3, 0D3fd4d98f4f139f59 ;
	fma_f64	 $d3, $d0, $d3, 0D3fcb848b36e20878 ;
	fma_f64	 $d3, $d0, $d3, 0Dbfb3c467e37db0c8 ;
	mul_f64	 $d3, $d0, $d3 ;
	div_f64	 $d2, $d3, $d2 ;
	fma_f64	 $d0, 0D3fe0000000000000, $d0, $d2 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB164_9 ;
@BB164_18:
	cmp_lt_b1_u64	 $c0, $d0, 4503599627370496 ;
	or_b64	 $d2, $d0, 274719577269600256 ;
	add_f64	 $d2, $d2, 0D83d0000000000000 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	shr_s64	 $d2, $d0, 45 ;
	cvt_u32_u64	$s0, $d2 ;
	and_b32	 $s1, $s0, 1 ;
	extract_u32	 $s0, $s0, 1, 6 ;
	or_b32	 $s0, $s0, 64 ;
	add_u32	 $s0, $s0, $s1 ;
	cvt_near_f64_s32	$d2, $s0 ;
	mul_f64	 $d2, $d2, 0D3f80000000000000 ;
	and_b64	 $d3, $d0, 4503599627370495 ;
	or_b64	 $d3, $d3, 4602678819172646912 ;
	sub_f64	 $d3, $d3, $d2 ;
	fma_f64	 $d2, $d3, 0D3fe0000000000000, $d2 ;
	div_f64	 $d2, $d3, $d2 ;
	mul_f64	 $d3, $d2, $d2 ;
	fma_f64	 $d4, $d3, 0D3f6249423bd94741, 0D3f89999999865ede ;
	fma_f64	 $d4, $d3, $d4, 0D3fb5555555555557 ;
	mul_f64	 $d3, $d3, $d4 ;
	fma_f64	 $d2, $d2, $d3, $d2 ;
	shl_u32	 $s0, $s0, 4 ;
	//ldas_global_u32	$s1, [&__math64_LN_TBL] ;
	add_u32	 $s0, $s0, $s1 ;
	add_u32	 $s1, $s0, -1016 ;
	ld_readonly_f64	$d3, [$s1] ;
	add_f64	 $d2, $d3, $d2 ;
	shr_u64	 $d0, $d0, 52 ;
	cvt_u32_u64	$s1, $d0 ;
	and_b32	 $s1, $s1, 2047 ;
	cmov_b32	 $s2, $c0, -1083, -1023 ;
	add_u32	 $s1, $s1, $s2 ;
	cvt_near_f64_s32	$d0, $s1 ;
	fma_f64	 $d2, $d0, 0D3e6efa39ef35793c, $d2 ;
	add_u32	 $s0, $s0, -1024 ;
	ld_readonly_f64	$d3, [$s0] ;
	fma_f64	 $d0, $d0, 0D3fe62e42e0000000, $d3 ;
	add_f64	 $d0, $d0, $d2 ;
	add_f64	 $d2, $d1, 0Dbff0000000000000 ;
	add_f64	 $d3, $d2, 0D4000000000000000 ;
	div_f64	 $d3, $d2, $d3 ;
	add_f64	 $d4, $d3, $d3 ;
	mul_f64	 $d5, $d4, $d4 ;
	mul_f64	 $d4, $d4, $d5 ;
	fma_f64	 $d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f ;
	fma_f64	 $d6, $d5, $d6, 0D3f89999999bac6d4 ;
	fma_f64	 $d5, $d5, $d6, 0D3fb55555555554e6 ;
	mul_f64	 $d3, $d2, $d3 ;
	neg_f64	 $d3, $d3 ;
	fma_f64	 $d3, $d4, $d5, $d3 ;
	add_f64	 $d2, $d2, $d3 ;
	cmp_le_b1_f64	 $c0, $d1, 0D3ff1082c00000000 ;
	cmp_ge_b1_f64	 $c1, $d1, 0D3fee0faa00000000 ;
	and_b1	 $c0, $c1, $c0 ;
	cmov_b64	 $d0, $c0, $d2, $d0 ;
	class_f64	 $c0, $d1, 516 ;
	cvt_u32_b1	$s0, $c0 ;
	cvt_b1_u32	$c0, $s0 ;
	not_b1	 $c0, $c0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff0000000000000 ;
	cmp_lt_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cvt_u32_b1	$s0, $c0 ;
	class_f64	 $c0, $d1, 3 ;
	cvt_u32_b1	$s1, $c0 ;
	and_b32	 $s1, $s1, 1 ;
	or_b32	 $s0, $s1, $s0 ;
	cmp_eq_b1_u32	 $c0, $s0, 0 ;
	cmov_b64	 $d0, $c0, $d0, 0D7ff8000000000000 ;
	cmp_eq_b1_f64	 $c0, $d1, 0D0000000000000000 ;
	cmov_b64	 $d0, $c0, 0Dfff0000000000000, $d0 ;
	add_f64	 $d0, $d0, 0Dbff0000000000000 ;
	add_f64	 $d2, $d1, 0Dbfe0000000000000 ;
	mul_f64	 $d0, $d2, $d0 ;
	div_f64	 $d1, 0D3ff0000000000000, $d1 ;
	mul_f64	 $d2, $d1, $d1 ;
	fma_f64	 $d3, $d2, 0Dbf5ab89d0b9e43e4, 0D3f4b67ba4cdad5d1 ;
	fma_f64	 $d3, $d2, $d3, 0Dbf4380cb8c0fe741 ;
	fma_f64	 $d3, $d2, $d3, 0D3f4a019f98cf38b6 ;
	fma_f64	 $d3, $d2, $d3, 0Dbf66c16c16b02e5c ;
	fma_f64	 $d2, $d2, $d3, 0D3fb555555555553b ;
	fma_f64	 $d1, $d1, $d2, 0D3fdacfe390c97d69 ;
	add_f64	 $d1, $d0, $d1 ;
	brn	@BB164_9 ;
@BB164_13:                              // %__tgamma_f64.exit
	ld_spill_u64	$d0, [%stack][8] ; // 8-byte Folded Reload
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptrunc_f32(arg_f32 %ret_r0) (
	arg_f32 %arg_val0)
{
@__amd_amp_Ptrunc_f32_entry:
// BB#0:
	ld_arg_f32	$s0, [%arg_val0] ;
	cvt_zeroi_f32_f32	 $s0, $s0 ;
	st_arg_u32 $s0, [%ret_r0] ;
	ret ;
};

function &__amd_amp_Ptrunc_f64(arg_f64 %ret_r0) (
	arg_f64 %arg_val0)
{
@__amd_amp_Ptrunc_f64_entry:
// BB#0:
	ld_arg_f64	$d0, [%arg_val0] ;
	cvt_zeroi_f64_f64	 $d0, $d0 ;
	st_arg_f64 $d0, [%ret_r0] ;
	ret ;
};

