version 1:0:$small;

function &__amd_amp_Fcos_f32(arg_f32 %ret_val)(arg_f32 %arg_val0);

kernel &__OpenCL_test_libm1_kernel(
	kernarg_u32 %arg_val0,
	kernarg_u32 %arg_val1)
{
	spill_u32 %stack[1];

@__OpenCL_test_libm1_kernel_entry:
	workitemaid	$s1, 0;
	shl_u32	$s0, $s1, 2;
	st_spill_u32	$s0, [%stack];
	ld_kernarg_u32	$s1, [%arg_val0];
	add_u32	$s1, $s0, $s1;
	ld_global_f32	$s2, [$s1];
	{
	arg_f32 %par_val;
	st_arg_f32	$s2, [%par_val];
	arg_f32 %ret_val;
	call	&__amd_amp_Fcos_f32 (%ret_val) (%par_val);
	ld_arg_f32	$s2, [%ret_val];
	}
	ld_spill_u32	$s0, [%stack];
	ld_kernarg_u32	$s3, [%arg_val1];
	add_u32	$s3, $s0, $s3;
	st_global_f32	$s2, [$s3];
	ret;
};
version 1:0:$small;

function &__amd_amp_Fcos_f32(arg_f32 %ret_r0)(arg_f32 %arg_val0)
{

@__amd_amp_Fcos_f32_entry:
	// BB#0:
	ld_arg_f32	$s0, [%arg_val0];
	and_b32	$s1, $s0, 2147483647;
	mov_b32	$s2, $s1;
	cmp_geu_b1_f32	$c0, $s2, 0F4b000000;
	cbr	$c0, @BB5_2;
	// BB#1:
	mad_f32	$s0, $s2, 0F3f22f983, 0F3f000000;
	cvt_zeroi_f32_f32	$s0, $s0;
	mul_f32	$s3, $s0, 0F3fc90fda;
	neg_f32	$s4, $s3;
	fma_f32	$s4, $s0, 0F3fc90fda, $s4;
	sub_f32	$s5, $s2, $s3;
	sub_f32	$s2, $s2, $s5;
	sub_f32	$s2, $s2, $s3;
	sub_f32	$s2, $s2, $s4;
	add_f32	$s2, $s5, $s2;
	mul_f32	$s3, $s0, 0F33a22168;
	sub_f32	$s4, $s2, $s3;
	sub_f32	$s2, $s2, $s4;
	sub_f32	$s2, $s2, $s3;
	neg_f32	$s3, $s3;
	fma_f32	$s3, $s0, 0F33a22168, $s3;
	sub_f32	$s2, $s2, $s3;
	add_f32	$s2, $s4, $s2;
	mul_f32	$s3, $s0, 0F27c234c4;
	sub_f32	$s4, $s2, $s3;
	sub_f32	$s2, $s2, $s4;
	sub_f32	$s2, $s2, $s3;
	add_f32	$s2, $s4, $s2;
	neg_f32	$s3, $s3;
	fma_f32	$s3, $s0, 0F27c234c4, $s3;
	neg_f32	$s3, $s3;
	cvt_zeroi_s32_f32	$s0, $s0;
	brn	@BB5_3;

@BB5_2:
	and_b32	$s0, $s0, 8388607;
	or_b32	$s0, $s0, 8388608;
	mul_hi_u32	$s2, $s0, 4266746795;
	mad_u32	$s3, $s0, 1011060801, $s2;
	cmp_lt_b1_u32	$c0, $s3, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s4, $s0, 1011060801;
	add_u32	$s2, $s2, $s4;
	mad_u32	$s4, $s0, 3680671129, $s2;
	cmp_lt_b1_u32	$c0, $s4, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s5, $s0, 3680671129;
	add_u32	$s2, $s2, $s5;
	mad_u32	$s5, $s0, 4113882560, $s2;
	cmp_lt_b1_u32	$c0, $s5, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s6, $s0, 4113882560;
	add_u32	$s2, $s2, $s6;
	mad_u32	$s6, $s0, 4230436817, $s2;
	cmp_lt_b1_u32	$c0, $s6, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s7, $s0, 4230436817;
	add_u32	$s2, $s2, $s7;
	mad_u32	$s7, $s0, 1313084713, $s2;
	cmp_lt_b1_u32	$c0, $s7, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s8, $s0, 1313084713;
	add_u32	$s2, $s2, $s8;
	mad_u32	$s8, $s0, 2734261102, $s2;
	cmp_lt_b1_u32	$c0, $s8, $s2;
	cvt_u32_b1	$s2, $c0;
	mul_hi_u32	$s9, $s0, 2734261102;
	add_u32	$s2, $s2, $s9;
	shr_u32	$s9, $s1, 23;
	add_u32	$s9, $s9, 4294967176;
	cmp_gt_b1_u32	$c0, $s9, 31;
	cmov_b32	$s2, $c0, $s8, $s2;
	cmov_b32	$s8, $c0, $s7, $s8;
	cmov_b32	$s10, $c0, 4294967295, 0;
	and_b32	$s10, $s10, 32;
	sub_u32	$s9, $s9, $s10;
	cmp_gt_b1_u32	$c1, $s9, 31;
	cmov_b32	$s2, $c1, $s8, $s2;
	cmov_b32	$s7, $c0, $s6, $s7;
	cmov_b32	$s8, $c1, $s7, $s8;
	cmov_b32	$s10, $c1, 4294967295, 0;
	and_b32	$s10, $s10, 32;
	sub_u32	$s9, $s9, $s10;
	cmp_gt_b1_u32	$c2, $s9, 31;
	cmov_b32	$s2, $c2, $s8, $s2;
	cmov_b32	$s6, $c0, $s5, $s6;
	cmov_b32	$s7, $c1, $s6, $s7;
	cmov_b32	$s8, $c2, $s7, $s8;
	cmov_b32	$s10, $c2, 4294967295, 0;
	and_b32	$s10, $s10, 32;
	sub_u32	$s9, $s9, $s10;
	cmp_gt_b1_u32	$c3, $s9, 31;
	cmov_b32	$s2, $c3, $s8, $s2;
	cmov_b32	$s10, $c3, 4294967295, 0;
	and_b32	$s10, $s10, 32;
	sub_u32	$s11, $s10, $s9;
	neg_s32	$s12, $s11;
	shl_u32	$s13, $s2, $s12;
	cmov_b32	$s5, $c0, $s4, $s5;
	cmov_b32	$s6, $c1, $s5, $s6;
	cmov_b32	$s7, $c2, $s6, $s7;
	cmov_b32	$s8, $c3, $s7, $s8;
	shr_u32	$s14, $s8, $s11;
	or_b32	$s13, $s13, $s14;
	cmp_ne_b1_u32	$c4, $s9, $s10;
	cmov_b32	$s9, $c4, $s13, $s2;
	shl_u32	$s2, $s9, 2;
	cmov_b32	$s4, $c0, $s3, $s4;
	cmov_b32	$s5, $c1, $s4, $s5;
	cmov_b32	$s6, $c2, $s5, $s6;
	cmov_b32	$s7, $c3, $s6, $s7;
	shr_u32	$s10, $s7, $s11;
	shl_u32	$s13, $s8, $s12;
	or_b32	$s10, $s13, $s10;
	cmov_b32	$s8, $c4, $s10, $s8;
	shr_u32	$s10, $s8, 30;
	or_b32	$s10, $s2, $s10;
	shr_s32	$s13, $s2, 31;
	cmp_eq_b1_u32	$c5, $s10, $s13;
	xor_b32	$s10, $s10, $s13;
	firstbit_b32	$s14, $s10;
	cmov_b32	$s14, $c5, 32, $s14;
	sub_u32	$s15, 31, $s14;
	mul_u32	$s0, $s0, 4266746795;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmov_b32	$s0, $c1, $s0, $s4;
	cmov_b32	$s0, $c2, $s0, $s5;
	cmov_b32	$s0, $c3, $s0, $s6;
	shr_u32	$s3, $s0, $s11;
	shl_u32	$s4, $s7, $s12;
	or_b32	$s3, $s4, $s3;
	cmov_b32	$s3, $c4, $s3, $s7;
	shl_u32	$s4, $s3, 2;
	shr_u32	$s0, $s0, 30;
	or_b32	$s0, $s4, $s0;
	xor_b32	$s0, $s13, $s0;
	shr_u32	$s0, $s0, $s15;
	neg_s32	$s4, $s15;
	shr_u32	$s3, $s3, 30;
	shl_u32	$s5, $s8, 2;
	or_b32	$s3, $s5, $s3;
	xor_b32	$s3, $s13, $s3;
	shl_u32	$s5, $s3, $s4;
	or_b32	$s0, $s5, $s0;
	shr_u32	$s5, $s0, 9;
	shr_u32	$s3, $s3, $s15;
	shl_u32	$s4, $s10, $s4;
	or_b32	$s3, $s4, $s3;
	shl_u32	$s4, $s3, 23;
	or_b32	$s4, $s4, $s5;
	firstbit_b32	$s5, $s4;
	cmp_eq_b1_u32	$c0, $s4, 0;
	cmov_b32	$s5, $c0, 32, $s5;
	sub_u32	$s6, 31, $s5;
	shr_u32	$s0, $s0, $s6;
	neg_s32	$s6, $s6;
	shl_u32	$s4, $s4, $s6;
	or_b32	$s0, $s4, $s0;
	shr_u32	$s0, $s0, 9;
	sub_u32	$s4, 102, $s14;
	sub_u32	$s4, $s4, $s5;
	shl_u32	$s4, $s4, 23;
	and_b32	$s2, $s2, 2147483648;
	or_b32	$s4, $s4, $s2;
	or_b32	$s0, $s4, $s0;
	shr_u32	$s3, $s3, 9;
	sub_u32	$s4, 126, $s14;
	shl_u32	$s4, $s4, 23;
	or_b32	$s2, $s4, $s2;
	or_b32	$s2, $s2, $s3;
	mul_f32	$s3, $s2, 0F3fc90fda;
	neg_f32	$s4, $s3;
	fma_f32	$s4, $s2, 0F3fc90fda, $s4;
	fma_f32	$s2, $s2, 0F33a22168, $s4;
	fma_f32	$s0, $s0, 0F3fc90fda, $s2;
	add_f32	$s2, $s3, $s0;
	sub_f32	$s3, $s2, $s3;
	sub_f32	$s3, $s0, $s3;
	shr_u32	$s0, $s9, 30;
	extract_u32	$s4, $s9, 29, 1;
	add_u32	$s0, $s4, $s0;

@BB5_3:
	// %__cos_f32.exit
	neg_f32	$s4, $s2;
	mul_f32	$s4, $s3, $s4;
	mul_f32	$s5, $s2, $s2;
	mad_f32	$s6, $s5, 0Fad47d74e, 0F310f74f6;
	mad_f32	$s6, $s5, $s6, 0Fb492923a;
	mad_f32	$s6, $s5, $s6, 0F37d00ae2;
	mad_f32	$s6, $s5, $s6, 0Fbab60b60;
	mad_f32	$s6, $s5, $s6, 0F3d2aaaab;
	mul_f32	$s6, $s5, $s6;
	mad_f32	$s4, $s5, $s6, $s4;
	mov_b32	$s6, $s2;
	and_b32	$s6, $s6, 2147483647;
	add_u32	$s7, $s6, 4278190080;
	add_u32	$s8, $s6, 3244713574;
	cmp_lt_b1_u32	$c0, $s8, 11429479;
	cmov_b32	$s7, $c0, $s7, 0;
	cmp_gt_b1_u32	$c0, $s6, 1061683200;
	cmov_b32	$s6, $c0, 1049624576, $s7;
	neg_f32	$s7, $s6;
	mad_f32	$s7, $s5, 0F3f000000, $s7;
	sub_f32	$s4, $s7, $s4;
	sub_f32	$s6, 0F3f800000, $s6;
	sub_f32	$s4, $s6, $s4;
	mad_f32	$s6, $s5, 0F2f2ec9d3, 0Fb2d72f34;
	mad_f32	$s6, $s5, $s6, 0F3636df25;
	mad_f32	$s6, $s5, $s6, 0Fb95009d4;
	mad_f32	$s6, $s5, $s6, 0F3c088887;
	mul_f32	$s7, $s5, $s2;
	neg_f32	$s8, $s7;
	mul_f32	$s6, $s6, $s8;
	mad_f32	$s6, $s3, 0F3f000000, $s6;
	neg_f32	$s3, $s3;
	mad_f32	$s3, $s5, $s6, $s3;
	mad_f32	$s3, $s7, 0F3e2aaaab, $s3;
	sub_f32	$s2, $s2, $s3;
	neg_f32	$s2, $s2;
	cvt_b1_u32	$c0, $s0;
	not_b1	$c0, $c0;
	cmov_b32	$s2, $c0, $s4, $s2;
	and_b32	$s0, $s0, 2;
	cmp_gt_b1_u32	$c0, $s0, 1;
	cvt_u32_b1	$s0, $c0;
	shl_u32	$s0, $s0, 31;
	xor_b32	$s0, $s2, $s0;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	st_arg_u32	$s0, [%ret_r0];
	ret;
};
