FATOBJ README

=== At a glance ===

This program is intended for manipulations with HSA Fat object files
in the AMD HSA compiler stack(s):

 * "create" combines input Host object file, Device object file
   and Option file into Fat object file. 

 * "extract" performs reverse operation: is extracts all 
    files from Fat object container and writes them to disk.

=== Glossary ===

 * Fat object file
     :File which may contain Device object file, Host object file
     and Option file. Valid Fat object file contains Host code at least.

 * Device object file
     :File with ".brig" extension.
     Default basename is full name of Fat object file.

 * Host object file
     :File with ".obj" extension.
     Default basename is full name of Fat object file.

 * Option file
     :file with ".opt" extension. 
     Default basename is full name of Fat object file.
     The HSA compiler driver may want to pass some information from 
     Compiler to Linker. The Option files can be used for this purpose.

=== Example commands ===

 > fatobj -create foo.fatobj

   Finds "foo.fatobj.brig", "foo.fatobj.obj" and "foo.fatobj.opt",
   embeds them into ELF and writes to disk as "foo.fatobj".

 > fatobj -extract bar.x

   Opens Fat object file "bar.x" and writes to disk:
   Host Code   - into "bar.x.obj",
   Device Code - into "bar.x.brig",
   Option file - into "bar.x.opt".

 > fatobj -detect-type zombie.zoo

   Checks contents of "zombie.zoo" and returns value
   according to the detected type of that file:
   1 - Unknown type,
   2 - Fat object file,
   3 - Device object file in 'plain old' ELF/BRIG format,
   4 - Device object file in BIF3.0 format,
   All other return values mean error opening or reading file.

 > fatobj -help
 > fatobj -help-hidden

   No comments necessary.

=== Details ===

 * The program assumes that host, device and option files reside in 
   the same directory and have identical basenames (i.e. only 
   extensions differ). By default, the basename is identical to the 
   full filename of Fat object file.

   NOTE: There is a hidden option which allows overriding of 
   basename of output file(s).

 * If "create" is unable to find any of the input files (except Host 
   object file) it issues diagnostic message and continues. 
   If Host object file is not found on disk, "create" fails.

   For instance, if only Host object file is found, "create" successfully 
   creates output file, but that file contains only Host object.

 * If "extract" is unable to find contents of any object (except Host 
   object), then it does not fail. It writes to disk only those 
   files which reside in the Fat object file. If Host object file 
   is not found inside Fat object file, "extract" fails.
   
   For instance, if "foo.fatobj" contains only Host code,
   and "foo.fatobj.brig" exists on disk, "fatobj -extract foo.fatobj"
   will NOT overwrite or delete "foo.fatobj.brig".

 * "create" does not validate the contents of input files.
   "extract" checks that input .fatobj has valid elf-file-type.

 * Fat object files are ELF files which have elf-file-type = 0xffad.
   Embedded files are put in the following ELF sections:
     - ".hsa_file_device" for Device object file
     - ".hsa_file_host" for Host object file.
     - ".hsa_file_option" for Option file.
